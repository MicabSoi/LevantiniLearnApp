=== FILE: src/components/Alphabet.tsx ===
import React, { useRef, useEffect, useState } from 'react';
import { Volume2 } from 'lucide-react';
import { supabase } from '../lib/supabaseClient'; // Make sure your supabase client is correctly imported

interface AlphabetProps {
  setSubTab?: (tab: string) => void;
}

const Alphabet: React.FC<AlphabetProps> = ({ setSubTab }) => {
  const [alphabetData, setAlphabetData] = useState([]);
  const [specialLettersData, setSpecialLettersData] = useState([]);
  const [loading, setLoading] = useState(true);
  const audioRefs = useRef({});

  useEffect(() => {
    async function fetchAlphabet() {
      // Fetch all rows from the "alphabet" table
      const { data, error } = await supabase
        .from('alphabet')
        .select('*')
        .order('id', { ascending: true });

      if (error) {
        console.error('Error fetching alphabet data:', error);
      } else {
        console.log('Fetched data:', data); // Log the whole response

        // Log each letter with its audio URL
        data.forEach((letter) => {
          console.log('Letter:', letter.letter);
          console.log('Audio URL:', letter.audio_url);
        });

        // Define the correct order of the Arabic alphabet
        const arabicLetterOrder = [
          'ا',
          'ب',
          'ت',
          'ث',
          'ج',
          'ح',
          'خ',
          'د',
          'ذ',
          'ر',
          'ز',
          'س',
          'ش',
          'ص',
          'ض',
          'ط',
          'ظ',
          'ع',
          'غ',
          'ف',
          'ق',
          'ك',
          'ل',
          'م',
          'ن',
          'ه',
          'و',
          'ي',
        ];

        // Partition the data: separate main alphabet and special letters
        const specialLettersSet = new Set(['ء', 'ة', 'ى', 'لا']);
        const mainAlphabet = data
          .filter((row) => !specialLettersSet.has(row.letter.trim()))
          .sort(
            (a, b) =>
              arabicLetterOrder.indexOf(a.letter) -
              arabicLetterOrder.indexOf(b.letter)
          );

        const specialLetters = data.filter((row) =>
          specialLettersSet.has(row.letter.trim())
        );

        setAlphabetData(mainAlphabet);
        setSpecialLettersData(specialLetters);

        setSpecialLettersData(specialLetters);
      }
      setLoading(false);
    }
    fetchAlphabet();
  }, []);

  const playAudio = async (filePath, letter) => {
    try {
      // Ensure the file path is correct (Check Supabase Storage for actual path)
      console.log(`Requesting signed URL for file: ${filePath}`);

      // Get a signed URL from Supabase
      const { data, error } = await supabase.storage
        .from('audio') // Make sure "audio" is your actual bucket name
        .createSignedUrl(filePath, 60); // URL expires in 60 seconds

      if (error) {
        console.error(`Error creating signed URL for ${letter}:`, error);
        return;
      }

      console.log(`Signed URL for ${letter}: ${data.signedUrl}`);

      // Fetch the audio file as a Blob
      const response = await fetch(data.signedUrl);
      if (!response.ok) {
        throw new Error(`Failed to fetch audio: ${response.statusText}`);
      }

      const blob = await response.blob();
      const blobUrl = URL.createObjectURL(blob); // Convert blob to local object URL

      console.log(`Playing audio from local blob URL: ${blobUrl}`);

      // Play the audio
      let audioElement = new Audio(blobUrl);
      audioElement.play().catch((err) => {
        console.error(`Error playing audio for ${letter}:`, err);
      });
    } catch (error) {
      console.error(`Error in playAudio function for ${letter}:`, error);
    }
  };

  return (
    <div className="p-4">
      <button
        onClick={() => setSubTab?.('landing')}
        className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Learn
      </button>

      <h2 className="text-xl font-bold mb-4">Arabic Alphabet</h2>

      {/* Main Alphabet */}
      <div className="overflow-x-auto">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {alphabetData.map((letter) => (
            <div
              key={letter.letter}
              className="bg-white dark:bg-dark-100 p-4 rounded-lg shadow-sm border border-gray-200 dark:border-dark-300 flex flex-col"
            >
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center">
                  <div className="text-3xl font-bold ml-1">{letter.letter}</div>
                  <div className="text-xl text-gray-600 dark:text-gray-400 ml-3">
                    {letter.name} - {letter.transliteration}
                  </div>
                </div>
                <button
                  onClick={() => playAudio(letter.audio_url, letter.letter)}
                  className="p-2 rounded-full bg-emerald-100 dark:bg-emerald-900/30 text-emerald-600 dark:text-emerald-400 hover:bg-emerald-200"
                >
                  <Volume2 size={16} />
                </button>
              </div>

              {/* Use the new pronunciation_description from the database */}
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-6">
                {letter.pronunciation_description}
              </p>

              <div className="grid grid-cols-3 gap-4">
                {/* End Position */}
                <div className="text-center">
                  <div className="font-medium text-sm mb-2">End:</div>
                  <div className="text-2xl mb-2">{letter.forms.end}</div>
                  <div className="text-lg">{letter.examples.end.word}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {letter.examples.end.transliteration}
                  </div>
                  <div className="text-sm text-gray-500 dark:text-gray-500">
                    {letter.examples.end.translation}
                  </div>
                </div>

                {/* Middle Position */}
                <div className="text-center">
                  <div className="font-medium text-sm mb-2">Middle:</div>
                  <div className="text-2xl mb-2">{letter.forms.middle}</div>
                  <div className="text-lg">{letter.examples.middle.word}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {letter.examples.middle.transliteration}
                  </div>
                  <div className="text-sm text-gray-500 dark:text-gray-500">
                    {letter.examples.middle.translation}
                  </div>
                </div>

                {/* Start Position */}
                <div className="text-center">
                  <div className="font-medium text-sm mb-2">Start:</div>
                  <div className="text-2xl mb-2">{letter.forms.start}</div>
                  <div className="text-lg">{letter.examples.start.word}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {letter.examples.start.transliteration}
                  </div>
                  <div className="text-sm text-gray-500 dark:text-gray-500">
                    {letter.examples.start.translation}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Special Letters Section */}
      <h2 className="text-xl font-bold mb-4 mt-8">Special Letters</h2>
      <div className="overflow-x-auto">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
          {specialLettersData.map((letter) => (
            <div
              key={letter.letter}
              className="bg-white dark:bg-dark-100 p-4 rounded-lg shadow-sm border border-gray-200 dark:border-dark-300 flex flex-col"
            >
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center">
                  <div className="text-3xl font-bold ml-1">{letter.letter}</div>
                  <div className="text-xl text-gray-600 dark:text-gray-400 ml-3">
                    {letter.name} - {letter.transliteration}
                  </div>
                </div>
                <button
                  onClick={() => playAudio(letter.audio_url, letter.letter)}
                  className="p-2 rounded-full bg-emerald-100 dark:bg-emerald-900/30 text-emerald-600 dark:text-emerald-400 hover:bg-emerald-200"
                >
                  <Volume2 size={16} />
                </button>
              </div>

              {/* Use the new pronunciation_description here too */}
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-6">
                {letter.pronunciation_description}
              </p>

              <div className="grid grid-cols-3 gap-4">
                {/* End Position */}
                <div className="text-center">
                  <div className="font-medium text-sm mb-2">End:</div>
                  <div className="text-2xl mb-2">{letter.forms.end}</div>
                  <div className="text-lg">{letter.examples.end.word}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {letter.examples.end.transliteration}
                  </div>
                  <div className="text-sm text-gray-500 dark:text-gray-500">
                    {letter.examples.end.translation}
                  </div>
                </div>

                {/* Middle Position */}
                <div className="text-center">
                  <div className="font-medium text-sm mb-2">Middle:</div>
                  <div className="text-2xl mb-2">{letter.forms.middle}</div>
                  <div className="text-lg">{letter.examples.middle.word}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {letter.examples.middle.transliteration}
                  </div>
                  <div className="text-sm text-gray-500 dark:text-gray-500">
                    {letter.examples.middle.translation}
                  </div>
                </div>

                {/* Start Position */}
                <div className="text-center">
                  <div className="font-medium text-sm mb-2">Start:</div>
                  <div className="text-2xl mb-2">{letter.forms.start}</div>
                  <div className="text-lg">{letter.examples.start.word}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {letter.examples.start.transliteration}
                  </div>
                  <div className="text-sm text-gray-500 dark:text-gray-500">
                    {letter.examples.start.translation}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Alphabet;




=== FILE: src/components/AlphabetSongLesson.tsx ===
import React, { useState, useEffect, useRef } from 'react';

const useAudioBuffers = (audioFiles) => {
  const audioContextRef = useRef(null);
  const [buffers, setBuffers] = useState({});

  useEffect(() => {
    // Create the AudioContext
    audioContextRef.current = new (window.AudioContext ||
      window.webkitAudioContext)();

    async function preloadAudio() {
      const newBuffers = {};
      await Promise.all(
        audioFiles.map(async (file) => {
          try {
            const response = await fetch(file.url);
            const arrayBuffer = await response.arrayBuffer();
            const audioBuffer = await audioContextRef.current.decodeAudioData(
              arrayBuffer
            );
            newBuffers[file.letter] = audioBuffer;
          } catch (error) {
            console.error(`Error loading audio for ${file.letter}:`, error);
          }
        })
      );
      setBuffers(newBuffers);
    }
    preloadAudio();
  }, [audioFiles]);

  return { audioContext: audioContextRef.current, buffers };
};

const AlphabetSongLesson = ({ letters, audioFiles }) => {
  const [currentIndex, setCurrentIndex] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);

  // Use our custom hook to preload audio buffers
  const { audioContext, buffers } = useAudioBuffers(audioFiles);

  const playSong = () => {
    console.log('Play button clicked');
    let index = 0;
    setIsPlaying(true);

    const playNext = () => {
      if (index < audioFiles.length) {
        const { letter } = audioFiles[index];
        const buffer = buffers[letter];

        if (!buffer || !audioContext) {
          console.error(`Missing preloaded audio for letter ${letter}`);
          index++;
          playNext();
          return;
        }

        console.log(`Playing preloaded audio for ${letter}`);
        setCurrentIndex(index);

        // Create a source node and play it
        const source = audioContext.createBufferSource();
        source.buffer = buffer;
        source.connect(audioContext.destination);
        source.start(0);

        // When the current audio finishes, play the next one
        source.onended = () => {
          console.log(`Audio ended for ${letter}`);
          index++;
          playNext();
        };
      } else {
        console.log('Finished playing all audio files');
        setCurrentIndex(null);
        setIsPlaying(false);
      }
    };

    playNext();
  };

  return (
    <div className="alphabet-song-lesson">
      <h2 className="text-2xl font-bold mb-6">Learn the Arabic Alphabet</h2>
      <div
        className="alphabet-display"
        style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fill, minmax(60px, 1fr))',
          gap: '1rem',
          padding: '1rem',
          background: 'rgba(0, 0, 0, 0.03)',
          borderRadius: '0.5rem',
          marginBottom: '2rem',
        }}
      >
        {letters.map((letter, idx) => (
          <div
            key={letter}
            className="flex items-center justify-center text-3xl font-bold p-4 rounded-lg"
          >
            {letter}
          </div>
        ))}
      </div>
      <div className="flex justify-center">
        <button
          onClick={playSong}
          disabled={isPlaying}
          className={`px-6 py-3 rounded-lg font-medium text-white transition-all duration-200 ${
            isPlaying
              ? 'bg-gray-400 cursor-not-allowed'
              : 'bg-emerald-600 hover:bg-emerald-700'
          }`}
        >
          {isPlaying ? 'Playing...' : 'Play Alphabet Song'}
        </button>
      </div>
      <p className="text-center text-gray-600 mt-4 text-sm">
        Click play to hear each letter pronounced in sequence
      </p>
    </div>
  );
};

export default AlphabetSongLesson;




=== FILE: src/components/Auth.tsx ===
import React, { useState } from 'react';
import { useSupabase } from '../context/SupabaseContext';
import { Loader2, LogIn, UserPlus } from 'lucide-react';
import { initUserDecks } from '../lib/initUserDecks';

const Auth: React.FC = () => {
  const { signIn, signUp } = useSupabase();
  const [isSignUp, setIsSignUp] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      if (isSignUp) {
        const { data: { user } } = await signUp(email, password);
        if (user) {
          await initUserDecks(user.id);
        }
      } else {
        await signIn(email, password);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-dark-300 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white">
            {isSignUp ? 'Create your account' : 'Sign in to your account'}
          </h2>
        </div>

        {error && (
          <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 px-4 py-3 rounded-md">
            {error}
          </div>
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="email-address" className="sr-only">
                Email address
              </label>
              <input
                id="email-address"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-dark-200 placeholder-gray-500 text-gray-900 dark:text-white rounded-t-md focus:outline-none focus:ring-emerald-500 focus:border-emerald-500 focus:z-10 sm:text-sm"
                placeholder="Email address"
              />
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                required
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-dark-200 placeholder-gray-500 text-gray-900 dark:text-white rounded-b-md focus:outline-none focus:ring-emerald-500 focus:border-emerald-500 focus:z-10 sm:text-sm"
                placeholder="Password"
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={loading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-emerald-600 hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 disabled:bg-emerald-400"
            >
              {loading ? (
                <Loader2 className="animate-spin h-5 w-5" />
              ) : isSignUp ? (
                <>
                  <UserPlus className="h-5 w-5 mr-2" />
                  Sign up
                </>
              ) : (
                <>
                  <LogIn className="h-5 w-5 mr-2" />
                  Sign in
                </>
              )}
            </button>
          </div>

          <div className="text-center">
            <button
              type="button"
              onClick={() => setIsSignUp(!isSignUp)}
              className="text-emerald-600 hover:text-emerald-500"
            >
              {isSignUp
                ? 'Already have an account? Sign in'
                : "Don't have an account? Sign up"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default Auth



=== FILE: src/components/CardView.tsx ===
import React, { useState, useEffect, useRef } from 'react';
import { Volume2 } from 'lucide-react';

// Define the expected structure of the 'fields' JSONB column for a basic card
interface CardFields {
  english: string;
  arabic: string;
  transliteration?: string;
  clozeText?: string; // For cloze cards (not implemented in this CardView yet)
  imageUrl?: string; // For image cards (not fully implemented in this CardView yet)
  // Add other fields as needed for specific card types
}

interface CardViewProps {
  card: {
    id: string;
    fields: CardFields;
    audio_url?: string | null; // Add audio_url here
    // layout?: any; // Assuming we render based on simple fields for now
    // type?: 'basic' | 'cloze' | 'image'; // Assuming 'basic' for now
  };
  // Corrected prop type to only expect quality
  onQualitySelect: (quality: number) => void;
}

const CardView: React.FC<CardViewProps> = ({ card, onQualitySelect }) => {
  const [isFlipped, setIsFlipped] = useState(false);
  const [showQualityButtons, setShowQualityButtons] = useState(false);
  const audioRef = useRef<HTMLAudioElement | null>(null);

  // Reset state when card changes
  useEffect(() => {
    setIsFlipped(false);
    setShowQualityButtons(false);
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.src = '';
      audioRef.current = null;
    }
  }, [card]);

  const handleFlip = () => {
    if (!isFlipped) {
      setIsFlipped(true);
      // Show quality buttons after a slight delay
      setTimeout(() => {
        setShowQualityButtons(true);
        // Autoplay audio on flip if available
        if (card.audio_url) {
          playAudio(card.audio_url);
        }
      }, 300); // Adjust delay as needed
    }
    // Flipping back is not typically done in a standard review session flow,
    // but you could add logic here if needed.
  };

  const handleQualitySelect = (quality: number) => {
    // Corrected call to match the updated prop type
    onQualitySelect(quality); // Call the parent handler
  };

  const playAudio = (audioUrl: string) => {
    try {
      if (!audioUrl) return;

      if (!audioRef.current) {
        audioRef.current = new Audio(audioUrl);
        audioRef.current.onerror = (e) => {
          console.error('Audio failed to load:', e);
        };
      } else {
        audioRef.current.src = audioUrl;
      }

      audioRef.current.currentTime = 0;
      audioRef.current.volume = 0.7; // Adjust volume if needed
      const playPromise = audioRef.current.play();

      if (playPromise !== undefined) {
        playPromise.catch((error) => {
          console.error('Error playing audio:', error);
        });
      }
    } catch (error) {
      console.error('Error in playAudio function:', error);
    }
  };

  const renderFront = () => (
    <div className="flex flex-col items-center justify-center min-h-[200px] p-6 bg-gray-100 dark:bg-dark-100 rounded-t-lg">
      <p className="text-2xl font-bold text-center text-gray-900 dark:text-white">
        {card.fields.english}
      </p>
      {/* Add image rendering here if card type is 'image' */}
      {/* {card.type === 'image' && card.fields.imageUrl && (
        <img src={card.fields.imageUrl} alt="Flashcard front" className="mt-4 max-h-40 object-contain" />
      )} */}
    </div>
  );

  const renderBack = () => (
    <div className="flex flex-col items-center justify-center min-h-[200px] p-6 bg-gray-50 dark:bg-dark-200 rounded-t-lg">
      {card.fields.arabic && (
        <p
          dir="rtl"
          className="text-3xl font-bold text-center text-gray-900 dark:text-white"
        >
          {card.fields.arabic}
        </p>
      )}
      {card.fields.transliteration && (
        <p className="text-lg text-gray-600 dark:text-gray-400 text-center mt-2">
          ({card.fields.transliteration})
        </p>
      )}
      {/* Add cloze text rendering here if card type is 'cloze' */}
      {/* {card.type === 'cloze' && (
         <p className="text-xl font-bold text-center text-gray-900 dark:text-white mt-4">
           {card.fields.clozeText} // Render with blanks filled? Or originally with blanks? Depends on layout logic.
         </p>
      )} */}
      {/* Add image rendering here if card type is 'image' */}
      {/* {card.type === 'image' && card.fields.imageUrl && (
        <img src={card.fields.imageUrl} alt="Flashcard back" className="mt-4 max-h-40 object-contain" />
      )} */}

      {card.audio_url && (
        <button
          onClick={(e) => {
            e.stopPropagation(); // Prevent flip if clicking audio
            playAudio(card.audio_url!);
          }}
          className="mt-4 p-2 rounded-full bg-emerald-100 dark:bg-emerald-900/30 text-emerald-600 dark:text-emerald-400 hover:bg-emerald-200"
        >
          <Volume2 size={20} />
        </button>
      )}
    </div>
  );

  return (
    <div className="max-w-md mx-auto bg-white dark:bg-dark-200 rounded-lg shadow-xl overflow-hidden">
      {/* Card Content Area */}
      <div onClick={handleFlip} className="cursor-pointer">
        {isFlipped ? renderBack() : renderFront()}
      </div>

      {/* Quality Buttons */}
      {showQualityButtons && (
        <div className="p-4 grid grid-cols-4 gap-3 mt-4">
          {/* Quality 0 button - Blackout */}
          <button
            onClick={() => handleQualitySelect(0)}
            className="p-3 rounded-md bg-red-500 text-white text-xs font-bold hover:bg-red-600"
          >
            0<span className="block font-normal text-gray-200">Blackout</span>
          </button>
          {/* Quality 1 button - Wrong but familiar */}
          <button
            onClick={() => handleQualitySelect(1)}
            className="p-3 rounded-md bg-orange-500 text-white text-xs font-bold hover:bg-orange-600"
          >
            1
            <span className="block font-normal text-gray-200">
              Wrong but familiar
            </span>
          </button>
          {/* Quality 2 button - Correct after hesitation */}
          <button
            onClick={() => handleQualitySelect(2)}
            className="p-3 rounded-md bg-yellow-500 text-white text-xs font-bold hover:bg-yellow-600"
          >
            2<span className="block font-normal text-gray-800">Hesitation</span>
          </button>
          {/* Quality 3 button - Perfect recall */}
          <button
            onClick={() => handleQualitySelect(3)}
            className="p-3 rounded-md bg-green-500 text-white text-xs font-bold hover:bg-green-600"
          >
            3<span className="block font-normal text-gray-200">Perfect</span>
          </button>
        </div>
      )}
    </div>
  );
};

export default CardView;


=== FILE: src/components/Comprehension.tsx ===
import React from 'react';
import { BookOpen } from 'lucide-react';

interface ComprehensionProps {
  setSubTab: (tab: string) => void;
}

const Comprehension: React.FC<ComprehensionProps> = ({ setSubTab }) => {
  return (
    <div className="p-4">
      <button
        onClick={() => setSubTab?.('landing')}
        className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Fluency
      </button>

      <h2 className="text-xl font-bold mb-6">Comprehension Practice</h2>

      <div className="bg-gray-50 dark:bg-dark-100 p-6 rounded-lg border border-gray-200 dark:border-dark-300 text-center">
        <BookOpen className="mx-auto text-gray-400 mb-4" size={48} />
        <p className="text-gray-600 dark:text-gray-400">
          Reading and listening comprehension exercises will be available soon.
        </p>
      </div>

      <div className="mt-8 bg-emerald-50 dark:bg-emerald-900/20 p-4 rounded-lg border border-emerald-200 dark:border-emerald-800">
        <h3 className="font-bold text-emerald-800 dark:text-emerald-300 mb-2">
          Coming Soon
        </h3>
        <ul className="mt-2 text-sm text-emerald-700 dark:text-emerald-200 list-disc list-inside">
          <li>Reading passages with comprehension questions</li>
          <li>Audio listening exercises</li>
          <li>Interactive dialogue practice</li>
          <li>Progress tracking and difficulty levels</li>
        </ul>
      </div>
    </div>
  );
};

export default Comprehension;




=== FILE: src/components/CreateDeckModal.tsx ===
import React, { useState } from 'react';
import { X } from 'lucide-react';

interface CreateDeckModalProps {
  onClose: () => void;
  onSubmit: (name: string, description: string, emoji: string) => void;
}

const EMOJI_OPTIONS = ['📚', '✏️', '🎯', '🌟', '💡', '🔤', '📝', '🎨', '🎵', '🌍'];

const CreateDeckModal: React.FC<CreateDeckModalProps> = ({ onClose, onSubmit }) => {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [selectedEmoji, setSelectedEmoji] = useState('📚');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(name, description, selectedEmoji);
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
      <div className="bg-white dark:bg-dark-200 rounded-lg w-full max-w-md">
        <div className="flex justify-between items-center p-4 border-b border-gray-200 dark:border-dark-100">
          <h2 className="text-lg font-bold">Create New Deck</h2>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
          >
            <X size={20} />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-4 space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">
              Choose an Emoji
            </label>
            <div className="grid grid-cols-5 gap-2">
              {EMOJI_OPTIONS.map(emoji => (
                <button
                  key={emoji}
                  type="button"
                  onClick={() => setSelectedEmoji(emoji)}
                  className={`text-2xl p-2 rounded-lg ${
                    selectedEmoji === emoji
                      ? 'bg-emerald-100 dark:bg-emerald-900/30'
                      : 'hover:bg-gray-100 dark:hover:bg-dark-100'
                  }`}
                >
                  {emoji}
                </button>
              ))}
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">
              Deck Name
            </label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-2 border border-gray-300 dark:border-dark-100 dark:bg-dark-300 rounded-lg"
              placeholder="Enter deck name"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">
              Description
            </label>
            <textarea
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              className="w-full p-2 border border-gray-300 dark:border-dark-100 dark:bg-dark-300 rounded-lg"
              placeholder="Enter deck description"
              rows={3}
              required
            />
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-dark-100 rounded-lg"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700"
            >
              Create Deck
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}



=== FILE: src/components/DeckList.tsx ===
import React from 'react';
import { useDecks } from '../hooks/useDecks';
import { useSupabase } from '../context/SupabaseContext';
import { Loader2, Plus, Archive, Edit2, BookOpen } from 'lucide-react';

interface DeckListProps {
  onSelectDeck: (deckId: string) => void;
  onCreateDeck: () => void;
}

const DeckList: React.FC<DeckListProps> = ({ onSelectDeck, onCreateDeck }) => {
  const { user } = useSupabase();
  const { decks, loading, error, archiveDeck } = useDecks(user);

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <Loader2 className="w-8 h-8 animate-spin text-emerald-600" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg">
        {error}
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <button
        onClick={onCreateDeck}
        className="w-full p-4 bg-emerald-50 dark:bg-emerald-900/20 border-2 border-dashed border-emerald-200 dark:border-emerald-800 rounded-lg text-emerald-600 dark:text-emerald-400 hover:bg-emerald-100 dark:hover:bg-emerald-900/30 transition-colors flex items-center justify-center"
      >
        <Plus size={20} className="mr-2" />
        Create New Deck
      </button>

      {decks.length === 0 ? (
        <div className="text-center text-gray-500 dark:text-gray-400 py-8">
          No decks yet. Create your first deck to get started!
        </div>
      ) : (
        <div className="grid gap-4">
          {decks.map(deck => (
            <div
              key={deck.id}
              className="bg-white dark:bg-dark-200 p-4 rounded-lg border border-gray-200 dark:border-dark-300 hover:border-emerald-500 dark:hover:border-emerald-500 transition-colors"
            >
              <div className="flex items-start justify-between">
                <div 
                  className="flex-1 cursor-pointer"
                  onClick={() => onSelectDeck(deck.id)}
                >
                  <div className="flex items-center">
                    <span className="text-2xl mr-2">{deck.emoji}</span>
                    <h3 className="font-bold">{deck.name}</h3>
                  </div>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                    {deck.description}
                  </p>
                </div>

                <div className="flex space-x-2">
                  <button
                    onClick={() => onSelectDeck(deck.id)}
                    className="p-2 text-emerald-600 dark:text-emerald-400 hover:bg-emerald-50 dark:hover:bg-emerald-900/20 rounded-lg transition-colors"
                    title="Study Deck"
                  >
                    <BookOpen size={18} />
                  </button>
                  <button
                    onClick={() => {/* Implement edit */}}
                    className="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-dark-100 rounded-lg transition-colors"
                    title="Edit Deck"
                  >
                    <Edit2 size={18} />
                  </button>
                  <button
                    onClick={() => {
                      if (confirm('Are you sure you want to archive this deck?')) {
                        archiveDeck(deck.id);
                      }
                    }}
                    className="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-dark-100 rounded-lg transition-colors"
                    title="Archive Deck"
                  >
                    <Archive size={18} />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}



=== FILE: src/components/Dictionary.tsx ===
import React, { useState } from 'react';
import { Search, Star, BookOpen } from 'lucide-react';
import { useLearnedWords } from '../context/LearnedWordsContext';

// Sample dictionary data
const dictionaryData = [
  {
    id: 1,
    word: 'مرحبا',
    transliteration: 'marhaba',
    definition: 'Hello',
    example: 'مرحبا، كيف حالك؟',
    exampleTranslation: 'Hello, how are you?',
  },
  {
    id: 2,
    word: 'شكرا',
    transliteration: 'shukran',
    definition: 'Thank you',
    example: 'شكرا جزيلا',
    exampleTranslation: 'Thank you very much',
  },
  {
    id: 3,
    word: 'بدي',
    transliteration: 'biddi',
    definition: 'I want',
    example: 'بدي روح عالبيت',
    exampleTranslation: 'I want to go home',
  },
  {
    id: 4,
    word: 'منيح',
    transliteration: 'mniih',
    definition: 'Good',
    example: 'هاد منيح كتير',
    exampleTranslation: 'This is very good',
  },
  {
    id: 5,
    word: 'يلا',
    transliteration: 'yalla',
    definition: "Let's go/Come on",
    example: 'يلا نروح',
    exampleTranslation: "Let's go",
  },
];

interface DictionaryProps {
  setActiveTab: (tab: string) => void;
  setWordBankSubTab: (tab: string) => void;
}

const Dictionary: React.FC<DictionaryProps> = ({
  setActiveTab,
  setWordBankSubTab,
}) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [favorites, setFavorites] = useState<number[]>([]);
  const { addLearnedWord } = useLearnedWords();

  const filteredWords = dictionaryData.filter(
    (item) =>
      item.word.includes(searchTerm) ||
      item.transliteration.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.definition.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const toggleFavorite = (id: number) => {
    if (favorites.includes(id)) {
      setFavorites(favorites.filter((favId) => favId !== id));
    } else {
      setFavorites([...favorites, id]);
    }
  };

  const markAsLearned = (word: (typeof dictionaryData)[0]) => {
    addLearnedWord(word);
  };

  return (
    <div className="p-4">
      <button
        onClick={() => {
          setActiveTab('wordbank');
          setWordBankSubTab('add words');
        }}
        className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Vocabulary
      </button>

      <h2 className="text-xl font-bold mb-4">Travel Dictionary</h2>

      {/* Search Bar */}
      <div className="relative mb-6">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <Search size={18} className="text-gray-400" />
        </div>
        <input
          type="text"
          className="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-dark-200 placeholder-gray-500 dark:placeholder-gray-400 rounded-md leading-5 focus:outline-none focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm"
          placeholder="Search words in Arabic, English or transliteration"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>

      {/* Dictionary List */}
      <div className="space-y-4">
        {filteredWords.length > 0 ? (
          filteredWords.map((item) => (
            <div
              key={item.id}
              className="border border-gray-200 dark:border-dark-100 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-dark-100 dark:bg-dark-200"
            >
              <div className="flex justify-between items-start">
                <div>
                  <h3 className="text-lg font-bold">{item.word}</h3>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">
                    {item.transliteration}
                  </p>
                  <p className="mb-2">{item.definition}</p>
                  <div className="bg-gray-50 dark:bg-dark-100 p-2 rounded-md">
                    <p className="text-sm font-medium">{item.example}</p>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      {item.exampleTranslation}
                    </p>
                  </div>
                </div>
                <div className="flex flex-col space-y-2">
                  <button
                    onClick={() => toggleFavorite(item.id)}
                    className="p-1"
                  >
                    <Star
                      size={20}
                      className={
                        favorites.includes(item.id)
                          ? 'fill-yellow-400 text-yellow-400'
                          : 'text-gray-300'
                      }
                    />
                  </button>
                  <button
                    onClick={() => markAsLearned(item)}
                    className="p-1 text-emerald-600 hover:text-emerald-800"
                    title="Mark as learned"
                  >
                    <BookOpen size={20} />
                  </button>
                </div>
              </div>
            </div>
          ))
        ) : (
          <p className="text-center text-gray-500 py-4">
            No words found. Try a different search term.
          </p>
        )}
      </div>
    </div>
  );
};

export default Dictionary;




=== FILE: src/components/FindTutor.tsx ===
import React from 'react';
import { Users } from 'lucide-react';

interface FindTutorProps {
  setSubTab: (tab: string) => void;
}

const FindTutor: React.FC<FindTutorProps> = ({ setSubTab }) => {
  return (
    <div className="p-4">
      <button
        onClick={() => setSubTab?.('landing')}
        className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Fluency
      </button>

      <h2 className="text-xl font-bold mb-6">Find a Tutor</h2>

      <div className="bg-gray-50 dark:bg-dark-100 p-6 rounded-lg border border-gray-200 dark:border-dark-300 text-center">
        <Users className="mx-auto text-gray-400 mb-4" size={48} />
        <p className="text-gray-600 dark:text-gray-400">
          Connect with native speakers and qualified tutors.
        </p>
      </div>

      <div className="mt-8 bg-emerald-50 dark:bg-emerald-900/20 p-4 rounded-lg border border-emerald-200 dark:border-emerald-800">
        <h3 className="font-bold text-emerald-800 dark:text-emerald-300 mb-2">
          Coming Soon
        </h3>
        <ul className="mt-2 text-sm text-emerald-700 dark:text-emerald-200 list-disc list-inside">
          <li>Browse tutor profiles and availability</li>
          <li>Schedule one-on-one sessions</li>
          <li>Group conversation practice</li>
          <li>Reviews and ratings system</li>
        </ul>
      </div>
    </div>
  );
};

export default FindTutor;




=== FILE: src/components/FlashcardDeck.tsx ===
import React, { useState, useEffect } from 'react';
import { BookOpen, Bookmark, GraduationCap, Plus, Volume2 } from 'lucide-react';
import { supabase } from '../lib/supabaseClient';
import FlashcardForm from './FlashcardForm';
import { useNavigate } from 'react-router-dom';

// Define types for flashcards and decks
interface Flashcard {
  id: string;
  english: string;
  arabic: string;
  transliteration?: string;
  image_url?: string;
  audio_url?: string;
  tags?: string[];
}

interface Deck {
  id: string;
  name: string;
  description: string;
  emoji?: string;
  is_default: boolean;
  archived: boolean;
  created_at: string;
  cards?: Flashcard[];
}

// Icons based on deck type
const getDeckIcon = (deckId: string) => {
  if (deckId === 'verbs') {
    return <BookOpen className="w-6 h-6 text-emerald-600" />;
  } else if (deckId === 'nouns') {
    return <Bookmark className="w-6 h-6 text-emerald-600" />;
  } else if (deckId === 'learned') {
    return <GraduationCap className="w-6 h-6 text-emerald-600" />;
  } else {
    return <BookOpen className="w-6 h-6 text-gray-600" />;
  }
};

interface FlashcardDeckProps {
  setActiveTab: (tab: string) => void;
  setWordBankSubTab: (tab: string) => void;
}

const FlashcardDeck: React.FC<FlashcardDeckProps> = ({
  setActiveTab,
  setWordBankSubTab,
}) => {
  const [decks, setDecks] = useState<Deck[]>([]);
  const [selectedDeck, setSelectedDeck] = useState<string | null>(null);
  const [deckCards, setDeckCards] = useState<Flashcard[]>([]);
  const [isCreatingNewDeck, setIsCreatingNewDeck] = useState(false);
  const [newDeckName, setNewDeckName] = useState('');
  const [newDeckDescription, setNewDeckDescription] = useState('');
  const [showFlashcardForm, setShowFlashcardForm] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState<string>('');

  const navigate = useNavigate();

  // Load user's decks from Supabase
  const loadUserDecks = async () => {
    const { data, error } = await supabase
      .from('decks')
      .select('*')
      .order('created_at', { ascending: true });
    if (error) {
      console.error('Error loading decks:', error);
    } else {
      setDecks(data as Deck[]);
    }
  };

  // Load flashcards for the selected deck
  const loadDeckData = async (deckId: string) => {
    const { data, error } = await supabase
      .from('flashcards')
      .select('*')
      .eq('deck_id', deckId);
    if (error) {
      console.error('Error loading flashcards:', error);
    } else {
      setDeckCards(data as Flashcard[]);
    }
  };

  useEffect(() => {
    loadUserDecks();
  }, []);

  useEffect(() => {
    if (selectedDeck) {
      loadDeckData(selectedDeck);
    }
  }, [selectedDeck]);

  const handleSaveNewDeck = async () => {
    if (!newDeckName.trim()) return; // require a deck name
    setError(null);

    try {
      const {
        data: { session },
        error: sessionError,
      } = await supabase.auth.getSession();
      if (sessionError) throw sessionError;
      if (!session?.user) throw new Error('No authenticated user');

      const { data, error: insertError } = await supabase
        .from('decks')
        .insert({
          user_id: session.user.id,
          name: newDeckName,
          description: newDeckDescription,
          emoji: '📚',
          is_default: false,
          archived: false,
        })
        .select()
        .single();

      if (insertError) throw insertError;

      setDecks((prev) => [...prev, data]);
      setIsCreatingNewDeck(false);
      setNewDeckName('');
      setNewDeckDescription('');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create deck');
      console.error('Error creating deck:', err);
    }
  };

  // Filter flashcards based on search term
  const filteredCards = deckCards.filter((card) => {
    const term = searchTerm.toLowerCase();
    return (
      card.english.toLowerCase().includes(term) ||
      card.arabic.toLowerCase().includes(term) ||
      (card.transliteration &&
        card.transliteration.toLowerCase().includes(term)) ||
      (card.tags && card.tags.join(' ').toLowerCase().includes(term))
    );
  });

  return (
    <div className="p-4">
      <button
        onClick={() => {
          setActiveTab('wordbank');
          setWordBankSubTab('add words');
        }}
        className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Vocabulary
      </button>
      <h2 className="text-xl font-bold mb-6">Flashcard Decks</h2>

      {error && (
        <div className="mb-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 px-4 py-3 rounded-md">
          {error}
        </div>
      )}

      {/* When a deck is selected, show back button and search bar */}
      {selectedDeck && (
        <div className="mb-4">
          <button
            onClick={() => {
              setSelectedDeck(null);
              setDeckCards([]);
            }}
            className="bg-gray-100 dark:bg-dark-100 px-4 py-2 rounded-md hover:bg-gray-200 dark:hover:bg-dark-200"
          >
            Back to Decks
          </button>
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Search flashcards..."
            className="w-full p-2 mt-4 mb-4 border rounded dark:bg-dark-200 dark:border-gray-600"
          />
        </div>
      )}

      {/* Deck list and New Deck form when no deck is selected */}
      {!selectedDeck && (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {decks.map((deck) => (
              <div
                key={deck.id}
                className="bg-white dark:bg-dark-200 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-dark-100 hover:border-emerald-500 dark:hover:border-emerald-500 transition-colors cursor-pointer"
                onClick={() => setSelectedDeck(deck.id)}
              >
                <div className="flex items-center mb-3">
                  {getDeckIcon(deck.id)}
                  <h3 className="text-lg font-bold ml-2">{deck.name}</h3>
                </div>
                <p className="text-gray-600 dark:text-gray-300 text-sm">
                  {deck.description}
                </p>
              </div>
            ))}
          </div>
          <div className="mt-4">
            <button
              onClick={() => setIsCreatingNewDeck(true)}
              className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-emerald-600"
            >
              Create New Deck
            </button>
          </div>
          {isCreatingNewDeck && (
            <div className="mb-4 p-4 border rounded-md mt-4 bg-white dark:bg-gray-900 border-gray-300 dark:border-gray-700">
              <h3 className="font-bold mb-2 text-gray-900 dark:text-gray-100">
                New Deck
              </h3>
              <div className="mb-2">
                <label className="block text-sm font-medium text-gray-900 dark:text-gray-300">
                  Name
                </label>
                <input
                  type="text"
                  value={newDeckName}
                  onChange={(e) => setNewDeckName(e.target.value)}
                  className="mt-1 block w-full border border-gray-500 dark:border-gray-700 dark:bg-gray-800 dark:text-white rounded-md shadow-sm focus:outline-none focus:border-emerald-500 dark:focus:border-gray-700"
                />
              </div>
              <div className="mb-2">
                <label className="block text-sm font-medium text-gray-900 dark:text-gray-300">
                  Description
                </label>
                <input
                  type="text"
                  value={newDeckDescription}
                  onChange={(e) => setNewDeckDescription(e.target.value)}
                  className="mt-1 block w-full border border-gray-500 dark:border-gray-700 dark:bg-gray-800 dark:text-white rounded-md shadow-sm focus:outline-none focus:border-emerald-500 dark:focus:border-gray-700"
                />
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={handleSaveNewDeck}
                  className="bg-emerald-500 text-white px-4 py-2 rounded-md hover:bg-emerald-600"
                >
                  Save
                </button>
                <button
                  onClick={() => {
                    setIsCreatingNewDeck(false);
                    setNewDeckName('');
                    setNewDeckDescription('');
                  }}
                  className="bg-gray-300 dark:bg-gray-700 text-black dark:text-white px-4 py-2 rounded-md hover:bg-gray-400 dark:hover:bg-gray-600"
                >
                  Cancel
                </button>
              </div>
            </div>
          )}
        </>
      )}

      {/* Flashcards view for a selected deck */}
      {selectedDeck && (
        <div className="max-w-2xl mx-auto">
          <h3 className="text-xl font-bold mb-4">Deck Cards</h3>

          {!showFlashcardForm && (
            <button
              onClick={() => setShowFlashcardForm(true)}
              className="mb-4 w-full p-4 bg-emerald-50 dark:bg-emerald-900/20 border-2 border-dashed border-emerald-200 dark:border-emerald-800 rounded-lg text-emerald-600 dark:text-emerald-400 hover:bg-emerald-100 dark:hover:bg-emerald-900/30 transition-colors flex items-center justify-center"
            >
              <Plus size={20} className="mr-2" />
              Add New Flashcard
            </button>
          )}

          {showFlashcardForm && (
            <div className="mb-6 bg-white dark:bg-dark-200 p-6 rounded-lg border border-gray-200 dark:border-dark-100">
              <FlashcardForm
                deckId={selectedDeck}
                onSuccess={() => {
                  setShowFlashcardForm(false);
                  loadDeckData(selectedDeck);
                }}
                onCancel={() => setShowFlashcardForm(false)}
              />
            </div>
          )}

          {filteredCards.length > 0 ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {filteredCards.map((card) => (
                <div
                  key={card.id}
                  className="relative p-4 bg-white dark:bg-dark-200 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 hover:border-emerald-500 dark:hover:border-emerald-500 transition-all cursor-pointer"
                  onClick={() =>
                    navigate(`/flashcard/${card.id}`, { replace: true })
                  }
                >
                  <div className="flex">
                    {card.image_url ? (
                      <img
                        src={card.image_url}
                        alt="Thumbnail"
                        className="object-cover rounded-md h-16 w-16"
                      />
                    ) : (
                      <div className="flex items-center justify-center bg-gray-100 dark:bg-gray-700 rounded-md max-h-20 max-w-32">
                        <span className="text-gray-400 text-sm">No Image</span>
                      </div>
                    )}
                    <div className="ml-4 flex flex-col justify-center">
                      <p className="text-lg font-semibold text-gray-800 dark:text-gray-100">
                        {card.english}
                      </p>
                      <p className="text-sm text-gray-600 dark:text-gray-300">
                        {card.arabic}
                      </p>
                      {card.transliteration && (
                        <p className="text-sm italic text-gray-500 dark:text-gray-400">
                          {card.transliteration}
                        </p>
                      )}
                    </div>
                  </div>
                  {card.tags && card.tags.length > 0 && (
                    <div className="mt-2">
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        Tags: {card.tags.join(', ')}
                      </p>
                    </div>
                  )}
                  {card.audio_url && (
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        new Audio(card.audio_url).play();
                      }}
                      className="absolute top-2 right-2 bg-emerald-100 dark:bg-emerald-900/30 text-emerald-600 dark:text-emerald-400 rounded-full p-2 hover:bg-emerald-200 dark:hover:bg-emerald-800/50 transition-colors"
                    >
                      <Volume2 size={16} />
                    </button>
                  )}
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-500 dark:text-gray-400">
              No flashcards in this deck yet.
            </p>
          )}
        </div>
      )}
    </div>
  );
};

export default FlashcardDeck;




=== FILE: src/components/FlashcardDetail.tsx ===
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { supabase } from '../lib/supabaseClient';
import { Loader2 } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

interface Flashcard {
  id: string;
  english: string;
  arabic: string;
  transliteration?: string;
  image_url?: string;
  audio_url?: string;
  tags?: string[];
}

const FlashcardDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [flashcard, setFlashcard] = useState<Flashcard | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchFlashcard = async () => {
      setLoading(true);
      const { data, error } = await supabase
        .from('flashcards')
        .select('*')
        .eq('id', id)
        .single();
      if (error) {
        setError(error.message);
      } else {
        setFlashcard(data as Flashcard);
      }
      setLoading(false);
    };

    if (id) fetchFlashcard();
  }, [id]);

  if (loading) {
    return (
      <div className="flex justify-center items-center py-10">
        <Loader2 size={40} />
      </div>
    );
  }

  if (error) {
    return <div className="text-red-600 p-4">{error}</div>;
  }

  if (!flashcard) {
    return (
      <div className="p-4 text-gray-900 dark:text-white">
        Flashcard not found.
      </div>
    );
  }

  return (
    <div className="p-4 text-gray-900 dark:text-white">
      <button
        onClick={() => navigate('/')} // or navigate('/flashcards') if your decks page is at a different route
        className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Deck
      </button>

      <div className="max-w-2xl mx-auto bg-white dark:bg-dark-200 rounded-lg shadow-sm border border-gray-200 dark:border-dark-100 overflow-hidden">
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-4">{flashcard.english}</h1>

          {flashcard.image_url && (
            <div className="mb-6">
              <img
                crossOrigin="anonymous"
                src={flashcard.image_url}
                alt="Flashcard"
                className="w-full rounded-lg"
              />
            </div>
          )}

          <div className="space-y-4">
            <div className="bg-gray-50 dark:bg-dark-100 p-4 rounded-lg">
              <h2 className="font-bold text-lg mb-2">Arabic</h2>
              <p className="text-2xl">{flashcard.arabic}</p>
            </div>

            {flashcard.transliteration && (
              <div className="bg-gray-50 dark:bg-dark-100 p-4 rounded-lg">
                <h2 className="font-bold text-lg mb-2">Transliteration</h2>
                <p className="text-lg">{flashcard.transliteration}</p>
              </div>
            )}

            {flashcard.audio_url && (
              <div className="bg-gray-50 dark:bg-dark-100 p-4 rounded-lg">
                <h2 className="font-bold text-lg mb-2">Pronunciation</h2>
                <audio controls className="w-full">
                  <source src={flashcard.audio_url} />
                  Your browser does not support the audio element.
                </audio>
              </div>
            )}

            {flashcard.tags && flashcard.tags.length > 0 && (
              <div className="flex flex-wrap gap-2 mt-4">
                {flashcard.tags.map((tag) => (
                  <span
                    key={tag}
                    className="px-3 py-1 bg-emerald-100 dark:bg-emerald-900/30 text-emerald-800 dark:text-emerald-200 rounded-full text-sm"
                  >
                    {tag}
                  </span>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default FlashcardDetail;




=== FILE: src/components/FlashcardForm.tsx ===
import React, { useState, useRef } from 'react';
import { supabase } from '../lib/supabaseClient';
import { Loader2, X, Upload, Mic, Square, Camera } from 'lucide-react';

interface FlashcardFormProps {
  deckId: string;
  onSuccess: () => void;
  onCancel: () => void;
}

const FlashcardForm: React.FC<FlashcardFormProps> = ({ deckId, onSuccess, onCancel }) => {
  const [english, setEnglish] = useState('');
  const [arabic, setArabic] = useState('');
  const [transliteration, setTransliteration] = useState('');
  const [tags, setTags] = useState<string[]>([]);
  const [tagInput, setTagInput] = useState('');
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [audioFile, setAudioFile] = useState<File | null>(null);
  const [isRecording, setIsRecording] = useState(false);
  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<{[key: string]: string}>({});
  
  const audioChunksRef = useRef<Blob[]>([]);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const audioInputRef = useRef<HTMLInputElement>(null);

  const validate = () => {
    const errors: {[key: string]: string} = {};
    
    if (!english.trim()) {
      errors.english = 'English word is required';
    }
    
    if (!arabic.trim() && !transliteration.trim()) {
      errors.translation = 'Either Arabic or Transliteration is required';
    }
    
    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleImageSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setImageFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleAudioSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setAudioFile(file);
    }
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const recorder = new MediaRecorder(stream);
      audioChunksRef.current = [];
      
      recorder.ondataavailable = (e) => {
        audioChunksRef.current.push(e.data);
      };
      
      recorder.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
        const file = new File([audioBlob], 'recording.webm', { type: 'audio/webm' });
        setAudioFile(file);
      };
      
      setMediaRecorder(recorder);
      recorder.start();
      setIsRecording(true);
    } catch (err) {
      setError('Microphone access denied');
    }
  };

  const stopRecording = () => {
    if (mediaRecorder && isRecording) {
      mediaRecorder.stop();
      setIsRecording(false);
      mediaRecorder.stream.getTracks().forEach(track => track.stop());
    }
  };

  const handleTagAdd = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && tagInput.trim()) {
      e.preventDefault();
      if (!tags.includes(tagInput.trim())) {
        setTags([...tags, tagInput.trim()]);
      }
      setTagInput('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validate()) return;
    
    setLoading(true);
    setError(null);
    
    try {
      let imageUrl = null;
      let audioUrl = null;
      
      // Upload image if exists
      if (imageFile) {
        const imagePath = `flashcard-images/${Date.now()}-${imageFile.name}`;
        const { error: uploadError } = await supabase.storage
          .from('flashcard-images')
          .upload(imagePath, imageFile);
          
        if (uploadError) throw uploadError;
        
        const { data: { publicUrl } } = supabase.storage
          .from('flashcard-images')
          .getPublicUrl(imagePath);
          
        imageUrl = publicUrl;
      }
      
      // Upload audio if exists
      if (audioFile) {
        const audioPath = `flashcard-audio/${Date.now()}-${audioFile.name}`;
        const { error: uploadError } = await supabase.storage
          .from('flashcard-audio')
          .upload(audioPath, audioFile);
          
        if (uploadError) throw uploadError;
        
        const { data: { publicUrl } } = supabase.storage
          .from('flashcard-audio')
          .getPublicUrl(audioPath);
          
        audioUrl = publicUrl;
      }
      
const { error: insertError } = await supabase
  .from('flashcards')
  .insert({
    deck_id: deckId,
    english: english,       // Changed from "English" to "english"
    arabic: arabic,         // Changed from "Arabic" to "arabic"
    transliteration: transliteration,
    image_url: imageUrl,
    audio_url: audioUrl,
    tags: tags              // Assuming tags is stored as a text[] column
  });

        
      if (insertError) throw insertError;
      
      onSuccess();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create flashcard');
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 p-3 rounded-md">
          {error}
        </div>
      )}
      
      {/* English Word */}
      <div>
        <label className="block text-sm font-medium mb-1">
          English Word *
        </label>
        <input
          type="text"
          value={english}
          onChange={(e) => setEnglish(e.target.value)}
          className={`w-full p-2 border rounded-lg dark:bg-dark-200 ${
            validationErrors.english 
              ? 'border-red-500 dark:border-red-800' 
              : 'border-gray-300 dark:border-gray-600'
          }`}
        />
        {validationErrors.english && (
          <p className="mt-1 text-sm text-red-600 dark:text-red-400">
            {validationErrors.english}
          </p>
        )}
      </div>

      {/* Arabic Word */}
      <div>
        <label className="block text-sm font-medium mb-1">
          Arabic Word
        </label>
        <input
          type="text"
          value={arabic}
          onChange={(e) => setArabic(e.target.value)}
          dir="rtl"
          className={`w-full p-2 border rounded-lg dark:bg-dark-200 ${
            validationErrors.translation 
              ? 'border-red-500 dark:border-red-800' 
              : 'border-gray-300 dark:border-gray-600'
          }`}
        />
      </div>

      {/* Transliteration */}
      <div>
        <label className="block text-sm font-medium mb-1">
          Transliteration
        </label>
        <input
          type="text"
          value={transliteration}
          onChange={(e) => setTransliteration(e.target.value)}
          className={`w-full p-2 border rounded-lg dark:bg-dark-200 ${
            validationErrors.translation 
              ? 'border-red-500 dark:border-red-800' 
              : 'border-gray-300 dark:border-gray-600'
          }`}
        />
        {validationErrors.translation && (
          <p className="mt-1 text-sm text-red-600 dark:text-red-400">
            {validationErrors.translation}
          </p>
        )}
      </div>

      {/* Image Upload */}
      <div>
        <label className="block text-sm font-medium mb-1">
          Image
        </label>
        <div className="flex items-center space-x-4">
          <button
            type="button"
            onClick={() => fileInputRef.current?.click()}
            className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-dark-100"
          >
            <Upload size={18} className="inline mr-2" />
            Upload Image
          </button>
          <button
            type="button"
            onClick={() => fileInputRef.current?.click()}
            className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-dark-100"
          >
            <Camera size={18} className="inline mr-2" />
            Take Photo
          </button>
        </div>
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          capture="environment"
          onChange={handleImageSelect}
          className="hidden"
        />
        {imagePreview && (
          <div className="mt-2 relative">
            <img
              src={imagePreview}
              alt="Preview"
              className="max-h-40 rounded-lg"
            />
            <button
              type="button"
              onClick={() => {
                setImageFile(null);
                setImagePreview(null);
              }}
              className="absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600"
            >
              <X size={14} />
            </button>
          </div>
        )}
      </div>

      {/* Audio Upload/Recording */}
      <div>
        <label className="block text-sm font-medium mb-1">
          Audio
        </label>
        <div className="flex items-center space-x-4">
          <button
            type="button"
            onClick={() => audioInputRef.current?.click()}
            className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-dark-100"
          >
            <Upload size={18} className="inline mr-2" />
            Upload Audio
          </button>
          <button
            type="button"
            onClick={isRecording ? stopRecording : startRecording}
            className={`px-4 py-2 border rounded-lg ${
              isRecording
                ? 'bg-red-500 text-white border-red-500 hover:bg-red-600'
                : 'border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-dark-100'
            }`}
          >
            {isRecording ? (
              <Square size={18} className="inline mr-2" />
            ) : (
              <Mic size={18} className="inline mr-2" />
            )}
            {isRecording ? 'Stop Recording' : 'Record Audio'}
          </button>
        </div>
        <input
          ref={audioInputRef}
          type="file"
          accept="audio/*"
          onChange={handleAudioSelect}
          className="hidden"
        />
        {audioFile && (
          <div className="mt-2 flex items-center">
            <audio controls className="max-w-full">
              <source src={URL.createObjectURL(audioFile)} />
            </audio>
            <button
              type="button"
              onClick={() => setAudioFile(null)}
              className="ml-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600"
            >
              <X size={14} />
            </button>
          </div>
        )}
      </div>

      {/* Tags */}
      <div>
        <label className="block text-sm font-medium mb-1">
          Tags
        </label>
        <input
          type="text"
          value={tagInput}
          onChange={(e) => setTagInput(e.target.value)}
          onKeyDown={handleTagAdd}
          placeholder="Type and press Enter to add tags"
          className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-dark-200"
        />
        {tags.length > 0 && (
          <div className="flex flex-wrap gap-2 mt-2">
            {tags.map(tag => (
              <span
                key={tag}
                className="px-2 py-1 bg-emerald-100 dark:bg-emerald-900/30 text-emerald-800 dark:text-emerald-200 rounded-full text-sm flex items-center"
              >
                {tag}
                <button
                  type="button"
                  onClick={() => removeTag(tag)}
                  className="ml-1 hover:text-emerald-600"
                >
                  <X size={14} />
                </button>
              </span>
            ))}
          </div>
        )}
      </div>

      {/* Form Actions */}
      <div className="flex justify-end space-x-3">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-dark-100 rounded-lg"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={loading}
          className="px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-emerald-400 flex items-center"
        >
          {loading ? (
            <>
              <Loader2 size={18} className="animate-spin mr-2" />
              Saving...
            </>
          ) : (
            'Save Flashcard'
          )}
        </button>
      </div>
    </form>
  );
};

export default FlashcardForm;



=== FILE: src/components/FluencyLanding.tsx ===
import React from 'react';
import {
  Languages,
  BookOpen,
  Users,
  GraduationCap,
  MessageSquare,
  ChevronRight,
  Star,
  Clock,
} from 'lucide-react';

interface FluencyLandingProps {
  setSubTab: (tab: string) => void;
}

// Sample forum topics data
const forumTopics = [
  {
    id: 1,
    title: 'Tips for mastering Levantine verb conjugation',
    participants: 24,
    timestamp: '2h ago',
    preview:
      "I've been struggling with past tense conjugations. Here's what helped me...",
  },
  {
    id: 2,
    title: 'Common expressions in Damascus dialect',
    participants: 18,
    timestamp: '4h ago',
    preview: "Here are some everyday phrases you'll hear in Damascus...",
  },
  {
    id: 3,
    title: 'Lebanese vs Palestinian pronunciation',
    participants: 31,
    timestamp: '6h ago',
    preview: "Let's discuss the main differences in pronunciation between...",
  },
];

// Sample learning materials data
const learningMaterials = [
  {
    id: 1,
    title: 'Shopping at the Souq',
    date: '1 day ago',
    level: 'Intermediate',
    category: 'Daily Life',
  },
  {
    id: 2,
    title: 'Family Gatherings Vocabulary',
    date: '2 days ago',
    level: 'Beginner',
    category: 'Culture',
  },
];

const FluencyLanding: React.FC<FluencyLandingProps> = ({ setSubTab }) => {
  const options = [
    {
      id: 'translate',
      label: 'Translate',
      description: 'Translate between English and Arabic',
      icon: <Languages size={24} className="text-emerald-600" />,
    },
    {
      id: 'comprehension',
      label: 'Comprehension',
      description: 'Practice reading and listening',
      icon: <BookOpen size={24} className="text-emerald-600" />,
    },
    {
      id: 'tutor',
      label: 'Find a Tutor',
      description: 'Connect with native speakers',
      icon: <GraduationCap size={24} className="text-emerald-600" />,
    },
    {
      id: 'community',
      label: 'Community',
      description: 'Join language exchange groups',
      icon: <Users size={24} className="text-emerald-600" />,
    },
  ];

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-2 text-gray-800 dark:text-gray-100">
        Fluency
      </h2>
      <p className="text-gray-600 dark:text-gray-400 mb-6">
        Practice your Levantine Arabic skills
      </p>
      <div className="grid grid-cols-2 gap-4">
        {options.map((option) => (
          <div
            key={option.id}
            onClick={() => setSubTab(option.id)}
            className="p-4 rounded-lg cursor-pointer transition-colors duration-200 bg-gray-50 dark:bg-dark-100 border border-gray-200 dark:border-dark-300 hover:!border-emerald-500 dark:hover:!border-emerald-500"
          >
            <div className="flex items-center justify-center mb-3">
              <div className="p-3 rounded-full bg-emerald-50 dark:bg-emerald-900/20">
                {option.icon}
              </div>
            </div>
            <h3 className="font-bold text-center mb-1 text-gray-800 dark:text-white">
              {option.label}
            </h3>
            <p className="text-sm text-center text-gray-600 dark:text-gray-300">
              {option.description}
            </p>
          </div>
        ))}
      </div>

      {/* Trending Topics Section */}
      <div className="mt-8 bg-gray-50 dark:bg-dark-100 rounded-lg overflow-hidden border border-gray-200 dark:border-dark-300">
        <div className="p-4 border-b border-gray-200 dark:border-dark-300">
          <h3 className="font-bold text-lg flex items-center">
            <MessageSquare size={20} className="mr-2 text-emerald-600" />
            Trending Topics
          </h3>
        </div>

        {/* Forum Topics */}
        <div className="divide-y divide-gray-200 dark:divide-dark-300">
          {forumTopics.map((topic) => (
  <div
    key={topic.id}
    onClick={() => setSubTab('community')}
    className="p-4 bg-white dark:bg-dark-100 rounded-lg border border-gray-200 dark:border-dark-300 transition-colors duration-200 cursor-pointer hover:!border-emerald-500 dark:hover:!border-emerald-500 hover:bg-emerald-50 dark:hover:bg-emerald-900/20"
  >
              <div className="flex justify-between items-start mb-2">
                <h4 className="font-medium text-gray-900 dark:text-gray-100">
                  {topic.title}
                </h4>
                <span className="text-sm text-gray-500 flex items-center">
                  <Clock size={14} className="mr-1" />
                  {topic.timestamp}
                </span>
              </div>
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-2 line-clamp-1">
                {topic.preview}
              </p>
              <div className="flex items-center text-sm text-gray-500">
                <Users size={14} className="mr-1" />
                {topic.participants} participants
              </div>
            </div>
          ))}
        </div>

        {/* New Learning Materials */}
        <div className="border-t border-gray-200 dark:border-dark-300 p-4">
          <h4 className="font-bold text-md mb-3 flex items-center">
            <BookOpen size={18} className="mr-2 text-emerald-600" />
            New Learning Materials
          </h4>
          <div className="space-y-3">
            {learningMaterials.map((material) => (
              <div
                key={material.id}
                className="flex items-center justify-between p-3 bg-white dark:bg-dark-200 rounded-lg border border-gray-200 dark:border-dark-300 hover:border-emerald-500 transition-colors cursor-pointer"
                onClick={() => setSubTab('comprehension')}
              >
                <div>
                  <h5 className="font-medium text-gray-900 dark:text-gray-100 mb-1">
                    {material.title}
                  </h5>
                  <div className="flex items-center space-x-2 text-sm">
                    <span className="px-2 py-1 bg-emerald-100 dark:bg-emerald-900/30 text-emerald-800 dark:text-emerald-200 rounded-full">
                      {material.level}
                    </span>
                    <span className="text-gray-500">{material.category}</span>
                    <span className="text-gray-400">•</span>
                    <span className="text-gray-500">{material.date}</span>
                  </div>
                </div>
                <ChevronRight className="text-gray-400" size={20} />
              </div>
            ))}
          </div>
        </div>

        {/* View All Link */}
        <div className="p-4 bg-gray-100 dark:bg-dark-200 border-t border-gray-200 dark:border-dark-300">
          <button
            onClick={() => setSubTab('community')}
            className="w-full text-center text-emerald-600 dark:text-emerald-400 font-medium hover:text-emerald-700 dark:hover:text-emerald-300 transition-colors flex items-center justify-center"
          >
            View All Topics
            <ChevronRight size={16} className="ml-1" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default FluencyLanding;




=== FILE: src/components/Grammar.tsx ===
import React, { useState } from 'react';
import {
  ChevronDown,
  ChevronUp,
  CheckCircle,
  XCircle,
  BookOpen,
  ArrowRight,
} from 'lucide-react';

// Define the lesson type
interface Lesson {
  id: number;
  title: string;
  objective: string;
  grammarPoints: {
    point: string;
    explanation: string;
    examples: {
      arabic: string;
      transliteration: string;
      translation: string;
    }[];
  }[];
  practice: {
    question: string;
    options: string[];
    correctAnswer: number;
    feedback: string;
  }[];
}

// Define the course data
const grammarCourse: Lesson[] = [
  {
    id: 1,
    title: 'The Arabic Alphabet',
    objective:
      'Learn the basics of the Arabic alphabet and how letters connect.',
    grammarPoints: [
      {
        point: 'Letter Forms',
        explanation:
          'Arabic letters change form depending on their position in a word (beginning, middle, end, or isolated).',
        examples: [
          {
            arabic: 'ب',
            transliteration: 'b',
            translation: "The letter 'ba' in isolated form",
          },
          {
            arabic: 'بـ',
            transliteration: 'b',
            translation: "The letter 'ba' at the beginning of a word",
          },
          {
            arabic: 'ـبـ',
            transliteration: 'b',
            translation: "The letter 'ba' in the middle of a word",
          },
          {
            arabic: 'ـب',
            transliteration: 'b',
            translation: "The letter 'ba' at the end of a word",
          },
        ],
      },
      {
        point: 'Short Vowels',
        explanation:
          'Arabic has three short vowels that are usually not written but are important for pronunciation.',
        examples: [
          {
            arabic: 'بَ',
            transliteration: 'ba',
            translation: "The letter 'ba' with fatha (a sound)",
          },
          {
            arabic: 'بِ',
            transliteration: 'bi',
            translation: "The letter 'ba' with kasra (i sound)",
          },
          {
            arabic: 'بُ',
            transliteration: 'bu',
            translation: "The letter 'ba' with damma (u sound)",
          },
        ],
      },
    ],
    practice: [
      {
        question: "Which of these is the letter 'ba' at the end of a word?",
        options: ['ب', 'بـ', 'ـبـ', 'ـب'],
        correctAnswer: 3,
        feedback: "The letter 'ba' at the end of a word looks like 'ـب'.",
      },
      {
        question: "What sound does the short vowel 'fatha' represent?",
        options: ['i sound', 'u sound', 'a sound', 'o sound'],
        correctAnswer: 2,
        feedback: "The fatha represents the 'a' sound, as in 'cat'.",
      },
    ],
  },
  {
    id: 2,
    title: 'Pronouns (2l-Domaa2r)',
    objective:
      'Learn the personal pronouns in Levantine Arabic and how to use them.',
    grammarPoints: [
      {
        point: 'Subject Pronouns',
        explanation:
          'These are the basic pronouns used as the subject of a sentence.',
        examples: [
          {
            arabic: 'أنا',
            transliteration: 'ana',
            translation: 'I',
          },
          {
            arabic: 'إنتَ',
            transliteration: 'inte',
            translation: 'You (masculine)',
          },
          {
            arabic: 'إنتِ',
            transliteration: 'inti',
            translation: 'You (feminine)',
          },
          {
            arabic: 'هو',
            transliteration: 'huwwe',
            translation: 'He',
          },
          {
            arabic: 'هي',
            transliteration: 'hiyye',
            translation: 'She',
          },
          {
            arabic: 'إحنا',
            transliteration: 'i7na',
            translation: 'We',
          },
          {
            arabic: 'إنتو',
            transliteration: 'intu',
            translation: 'You (plural)',
          },
          {
            arabic: 'هم',
            transliteration: 'humme',
            translation: 'They',
          },
        ],
      },
      {
        point: 'Using Pronouns',
        explanation:
          'In Levantine Arabic, pronouns are often used with verbs and can sometimes be omitted when clear from context.',
        examples: [
          {
            arabic: 'أنا بحكي عربي',
            transliteration: 'ana ba7ki 3arabi',
            translation: 'I speak Arabic',
          },
          {
            arabic: 'هو بيشتغل هون',
            transliteration: 'huwwe byishtaghil hoon',
            translation: 'He works here',
          },
        ],
      },
    ],
    practice: [
      {
        question: "What is the Levantine Arabic pronoun for 'We'?",
        options: ['ana', 'i7na', 'intu', 'humme'],
        correctAnswer: 1,
        feedback: "The pronoun for 'We' is 'i7na' (إحنا).",
      },
      {
        question: "Which sentence means 'She speaks Arabic'?",
        options: [
          'أنا بحكي عربي',
          'هو بيحكي عربي',
          'هي بتحكي عربي',
          'إنتو بتحكو عربي',
        ],
        correctAnswer: 2,
        feedback:
          "هي بتحكي عربي (hiyye bti7ki 3arabi) means 'She speaks Arabic'.",
      },
    ],
  },
  {
    id: 3,
    title: 'Basic Sentence Structure (2l-Jomle 2l-Basiita)',
    objective: 'Learn how to form basic sentences in Levantine Arabic.',
    grammarPoints: [
      {
        point: 'Nominal Sentences',
        explanation:
          'Sentences that begin with a noun or pronoun, often expressing a state of being.',
        examples: [
          {
            arabic: 'البيت كبير',
            transliteration: 'il-beit kbiir',
            translation: 'The house is big',
          },
          {
            arabic: 'أنا مبسوط',
            transliteration: 'ana mabsooT',
            translation: 'I am happy',
          },
        ],
      },
      {
        point: 'Verbal Sentences',
        explanation: 'Sentences that begin with a verb, describing an action.',
        examples: [
          {
            arabic: 'بيشرب قهوة',
            transliteration: 'byishrab 2ahwe',
            translation: 'He drinks coffee',
          },
          {
            arabic: 'رحت عالسوق',
            transliteration: 'ri7it 3al-soo2',
            translation: 'I went to the market',
          },
        ],
      },
      {
        point: 'Question Formation',
        explanation:
          'Questions can be formed by adding question words or changing intonation.',
        examples: [
          {
            arabic: 'بتحب القهوة؟',
            transliteration: 'bti7ibb il-2ahwe?',
            translation: 'Do you like coffee?',
          },
          {
            arabic: 'وين رايح؟',
            transliteration: 'wein raaye7?',
            translation: 'Where are you going?',
          },
        ],
      },
    ],
    practice: [
      {
        question: 'Which sentence is a nominal sentence?',
        options: ['رحت عالبيت', 'البيت كبير', 'بيشرب شاي', 'بتحكي إنجليزي'],
        correctAnswer: 1,
        feedback:
          'البيت كبير (il-beit kbiir) is a nominal sentence because it starts with a noun (البيت/the house).',
      },
      {
        question:
          "How would you ask 'Do you speak Arabic?' in Levantine Arabic?",
        options: [
          'بتحكي عربي',
          'أنا بحكي عربي',
          'بتحكي عربي؟',
          'ليش بتحكي عربي',
        ],
        correctAnswer: 2,
        feedback:
          "بتحكي عربي؟ (bti7ki 3arabi?) is the correct way to ask 'Do you speak Arabic?' - just add a question mark/intonation to the statement.",
      },
    ],
  },
  {
    id: 4,
    title: 'Nouns and Gender (2l-2asmaa2 w 2l-Jens)',
    objective:
      'Learn about noun gender in Arabic and how it affects other parts of speech.',
    grammarPoints: [
      {
        point: 'Masculine and Feminine Nouns',
        explanation:
          "In Arabic, all nouns are either masculine or feminine. Many feminine nouns end with 'ة' (taa marbuuta).",
        examples: [
          {
            arabic: 'كتاب',
            transliteration: 'ktaab',
            translation: 'Book (masculine)',
          },
          {
            arabic: 'طاولة',
            transliteration: 'Taawle',
            translation: 'Table (feminine)',
          },
          {
            arabic: 'بيت',
            transliteration: 'beit',
            translation: 'House (masculine)',
          },
          {
            arabic: 'مدرسة',
            transliteration: 'madrase',
            translation: 'School (feminine)',
          },
        ],
      },
      {
        point: 'Gender Agreement',
        explanation:
          'Adjectives, verbs, and other words must agree with the gender of the noun they refer to.',
        examples: [
          {
            arabic: 'الولد طويل',
            transliteration: 'il-walad Tawiil',
            translation: 'The boy is tall (masculine)',
          },
          {
            arabic: 'البنت طويلة',
            transliteration: 'il-binit Tawiile',
            translation: 'The girl is tall (feminine)',
          },
          {
            arabic: 'هو راح',
            transliteration: 'huwwe raa7',
            translation: 'He went (masculine verb form)',
          },
          {
            arabic: 'هي راحت',
            transliteration: 'hiyye raa7at',
            translation: 'She went (feminine verb form)',
          },
        ],
      },
    ],
    practice: [
      {
        question: 'Which of these nouns is feminine?',
        options: [
          'كتاب (ktaab)',
          'بيت (beit)',
          'شارع (shaari3)',
          'سيارة (sayyaara)',
        ],
        correctAnswer: 3,
        feedback:
          'سيارة (sayyaara) is feminine because it ends with taa marbuuta (ة).',
      },
      {
        question:
          "What is the correct way to say 'The car is new' in Levantine Arabic?",
        options: [
          'السيارة جديد',
          'السيارة جديدة',
          'السيار جديد',
          'السيار جديدة',
        ],
        correctAnswer: 1,
        feedback:
          'السيارة جديدة (is-sayyaara jdiide) is correct because both the noun (car) and adjective (new) are feminine.',
      },
    ],
  },
  {
    id: 5,
    title: 'Definite and Indefinite Nouns (2l-M3arraf w 2l-Nakira)',
    objective:
      'Learn how to make nouns definite or indefinite in Levantine Arabic.',
    grammarPoints: [
      {
        point: 'The Definite Article',
        explanation:
          "The Arabic definite article 'ال' (il/el) is equivalent to 'the' in English. It's attached to the beginning of a noun.",
        examples: [
          {
            arabic: 'بيت',
            transliteration: 'beit',
            translation: 'A house (indefinite)',
          },
          {
            arabic: 'البيت',
            transliteration: 'il-beit',
            translation: 'The house (definite)',
          },
          {
            arabic: 'كتاب',
            transliteration: 'ktaab',
            translation: 'A book (indefinite)',
          },
          {
            arabic: 'الكتاب',
            transliteration: 'il-ktaab',
            translation: 'The book (definite)',
          },
        ],
      },
      {
        point: 'Sun and Moon Letters',
        explanation:
          'The pronunciation of the definite article changes depending on the first letter of the noun (sun letters vs. moon letters).',
        examples: [
          {
            arabic: 'القمر',
            transliteration: 'il-2amar',
            translation: "The moon (moon letter - clear 'l' sound)",
          },
          {
            arabic: 'الشمس',
            transliteration: 'ish-shams',
            translation: "The sun (sun letter - 'l' assimilates into 'sh')",
          },
          {
            arabic: 'الدار',
            transliteration: 'id-daar',
            translation: "The house (sun letter - 'l' assimilates into 'd')",
          },
        ],
      },
      {
        point: 'Indefinite Nouns',
        explanation:
          "Unlike Modern Standard Arabic, Levantine Arabic doesn't use tanween (nunation) for indefinite nouns. A noun without the definite article is understood to be indefinite.",
        examples: [
          {
            arabic: 'شفت بنت',
            transliteration: 'shift binit',
            translation: 'I saw a girl',
          },
          {
            arabic: 'عندي كتاب',
            transliteration: '3indi ktaab',
            translation: 'I have a book',
          },
        ],
      },
    ],
    practice: [
      {
        question: "How do you say 'the teacher' in Levantine Arabic?",
        options: [
          'معلم (m3allem)',
          'المعلم (il-m3allem)',
          'معلمة (m3allme)',
          'المعلمة (il-m3allme)',
        ],
        correctAnswer: 1,
        feedback:
          "المعلم (il-m3allem) means 'the teacher' (masculine). The definite article 'ال' (il) is added to the beginning of the noun.",
      },
      {
        question:
          "In the phrase 'الشمس' (ish-shams), why is the definite article pronounced 'ish' instead of 'il'?",
        options: [
          "Because it's a feminine noun",
          "Because 'ش' (sh) is a sun letter",
          "Because it's a plural noun",
          "Because it's a proper noun",
        ],
        correctAnswer: 1,
        feedback:
          "The letter 'ش' (sh) is a sun letter, which causes the 'l' in the definite article to assimilate, changing the pronunciation from 'il' to 'ish'.",
      },
    ],
  },
  {
    id: 6,
    title: 'Demonstratives (2smaa2 2l-Ishaara)',
    objective:
      'Learn demonstrative pronouns (this, that, these, those) in Levantine Arabic.',
    grammarPoints: [
      {
        point: 'Near Demonstratives',
        explanation:
          'Used to point to things that are close to the speaker (this, these).',
        examples: [
          {
            arabic: 'هاد',
            transliteration: 'haad',
            translation: 'This (masculine)',
          },
          {
            arabic: 'هاي',
            transliteration: 'haay',
            translation: 'This (feminine)',
          },
          {
            arabic: 'هدول',
            transliteration: 'hadool',
            translation: 'These (plural)',
          },
        ],
      },
      {
        point: 'Far Demonstratives',
        explanation:
          'Used to point to things that are far from the speaker (that, those).',
        examples: [
          {
            arabic: 'هداك',
            transliteration: 'hadaak',
            translation: 'That (masculine)',
          },
          {
            arabic: 'هديك',
            transliteration: 'hadiik',
            translation: 'That (feminine)',
          },
          {
            arabic: 'هدوليك',
            transliteration: 'hadooliik',
            translation: 'Those (plural)',
          },
        ],
      },
      {
        point: 'Using Demonstratives with Nouns',
        explanation:
          'When used with nouns, demonstratives follow a specific pattern.',
        examples: [
          {
            arabic: 'هاد البيت',
            transliteration: 'haad il-beit',
            translation: 'This house',
          },
          {
            arabic: 'هاي السيارة',
            transliteration: 'haay is-sayyaara',
            translation: 'This car',
          },
          {
            arabic: 'هداك الرجال',
            transliteration: 'hadaak ir-rijjaal',
            translation: 'That man',
          },
          {
            arabic: 'هدول الأولاد',
            transliteration: 'hadool il-2awlaad',
            translation: 'These children',
          },
        ],
      },
    ],
    practice: [
      {
        question: "How do you say 'this book' in Levantine Arabic?",
        options: ['هاد كتاب', 'هاد الكتاب', 'هاي كتاب', 'هاي الكتاب'],
        correctAnswer: 1,
        feedback:
          "هاد الكتاب (haad il-ktaab) is correct. 'هاد' is used for masculine nouns like 'كتاب' (book), and the noun takes the definite article.",
      },
      {
        question: "Which phrase means 'those houses'?",
        options: ['هدول البيوت', 'هاي البيوت', 'هدوليك البيوت', 'هداك البيوت'],
        correctAnswer: 2,
        feedback:
          "هدوليك البيوت (hadooliik il-byoot) means 'those houses'. 'هدوليك' is used for plural objects that are far from the speaker.",
      },
    ],
  },
  {
    id: 7,
    title: 'Present Tense Verbs (2l-Fi3l 2l-MoDaare3)',
    objective:
      'Learn how to conjugate and use present tense verbs in Levantine Arabic.',
    grammarPoints: [
      {
        point: 'Basic Present Tense Formation',
        explanation:
          'In Levantine Arabic, present tense verbs typically start with a prefix (b-) followed by the verb stem.',
        examples: [
          {
            arabic: 'بكتب',
            transliteration: 'baktob',
            translation: 'I write/am writing',
          },
          {
            arabic: 'بتكتب',
            transliteration: 'btiktob',
            translation: 'You write/are writing (masculine)',
          },
          {
            arabic: 'بتكتبي',
            transliteration: 'btikitbi',
            translation: 'You write/are writing (feminine)',
          },
          {
            arabic: 'بيكتب',
            transliteration: 'byiktob',
            translation: 'He writes/is writing',
          },
          {
            arabic: 'بتكتب',
            transliteration: 'btiktob',
            translation: 'She writes/is writing',
          },
        ],
      },
      {
        point: 'Plural Forms',
        explanation:
          'Plural forms of present tense verbs have their own conjugations.',
        examples: [
          {
            arabic: 'منكتب',
            transliteration: 'mniktob',
            translation: 'We write/are writing',
          },
          {
            arabic: 'بتكتبو',
            transliteration: 'btikitbu',
            translation: 'You (plural) write/are writing',
          },
          {
            arabic: 'بيكتبو',
            transliteration: 'byikitbu',
            translation: 'They write/are writing',
          },
        ],
      },
      {
        point: 'Continuous Action',
        explanation:
          "To emphasize that an action is happening right now, you can add 'عم' (3am) before the verb.",
        examples: [
          {
            arabic: 'عم بكتب',
            transliteration: '3am baktob',
            translation: 'I am writing (right now)',
          },
          {
            arabic: 'عم بياكل',
            transliteration: '3am byaakol',
            translation: 'He is eating (right now)',
          },
        ],
      },
    ],
    practice: [
      {
        question: "How do you say 'She reads' in Levantine Arabic?",
        options: ['بتقرا', 'بيقرا', 'منقرا', 'بتقري'],
        correctAnswer: 0,
        feedback:
          "بتقرا (bti2ra) is correct. For 'she' in present tense, we use the prefix 'بت' (bt).",
      },
      {
        question: "Which sentence means 'We are eating now'?",
        options: ['بناكل', 'عم بناكل', 'بياكلو', 'عم بياكلو'],
        correctAnswer: 1,
        feedback:
          "عم بناكل (3am bnaakol) means 'We are eating now'. '3am' indicates the action is happening at the moment.",
      },
    ],
  },
  {
    id: 8,
    title: 'Negation (2l-Nafi)',
    objective: 'Learn how to form negative sentences in Levantine Arabic.',
    grammarPoints: [
      {
        point: 'Negating Present Tense Verbs',
        explanation:
          "To negate present tense verbs, add 'ما' (ma) before the verb. In some regions, 'ش' (-sh) is also added at the end.",
        examples: [
          {
            arabic: 'بحب القهوة',
            transliteration: 'b7ibb il-2ahwe',
            translation: 'I like coffee',
          },
          {
            arabic: 'ما بحب القهوة',
            transliteration: 'ma b7ibb il-2ahwe',
            translation: "I don't like coffee",
          },
          {
            arabic: 'ما بحبش القهوة',
            transliteration: 'ma b7ibbish il-2ahwe',
            translation: "I don't like coffee (with -sh)",
          },
        ],
      },
      {
        point: 'Negating Past Tense Verbs',
        explanation:
          "Past tense verbs are negated by adding 'ما' (ma) before the verb and sometimes 'ش' (-sh) at the end.",
        examples: [
          {
            arabic: 'رحت عالسوق',
            transliteration: 'ri7it 3al-soo2',
            translation: 'I went to the market',
          },
          {
            arabic: 'ما رحت عالسوق',
            transliteration: 'ma ri7it 3al-soo2',
            translation: "I didn't go to the market",
          },
          {
            arabic: 'ما رحتش عالسوق',
            transliteration: 'ma ri7itsh 3al-soo2',
            translation: "I didn't go to the market (with -sh)",
          },
        ],
      },
      {
        point: 'Negating Nominal Sentences',
        explanation:
          "To negate nominal sentences (sentences without verbs), use 'مش' (mish).",
        examples: [
          {
            arabic: 'هو طويل',
            transliteration: 'huwwe Tawiil',
            translation: 'He is tall',
          },
          {
            arabic: 'هو مش طويل',
            transliteration: 'huwwe mish Tawiil',
            translation: 'He is not tall',
          },
          {
            arabic: 'الجو حلو',
            transliteration: 'ij-jaww 7ilu',
            translation: 'The weather is nice',
          },
          {
            arabic: 'الجو مش حلو',
            transliteration: 'ij-jaww mish 7ilu',
            translation: 'The weather is not nice',
          },
        ],
      },
    ],
    practice: [
      {
        question: "How do you say 'I don't understand' in Levantine Arabic?",
        options: ['ما بفهم', 'مش بفهم', 'ما فهمت', 'بفهم'],
        correctAnswer: 0,
        feedback:
          "ما بفهم (ma bafham) means 'I don't understand'. We use 'ما' (ma) to negate present tense verbs.",
      },
      {
        question: "Which sentence means 'The food is not good'?",
        options: [
          'الأكل مش منيح',
          'ما الأكل منيح',
          'الأكل ما منيح',
          'مش الأكل منيح',
        ],
        correctAnswer: 0,
        feedback:
          "الأكل مش منيح (il-akil mish mniih) means 'The food is not good'. We use 'مش' (mish) to negate nominal sentences.",
      },
    ],
  },
  {
    id: 9,
    title: 'Possessive Suffixes (2l-Domaa2r 2l-Milkiyye)',
    objective:
      'Learn how to express possession using suffixes in Levantine Arabic.',
    grammarPoints: [
      {
        point: 'Basic Possessive Suffixes',
        explanation:
          "In Arabic, possession is shown by adding suffixes to nouns rather than using separate words like 'my' or 'your'.",
        examples: [
          {
            arabic: 'كتاب',
            transliteration: 'ktaab',
            translation: 'A book',
          },
          {
            arabic: 'كتابي',
            transliteration: 'ktaabi',
            translation: 'My book',
          },
          {
            arabic: 'كتابك',
            transliteration: 'ktaabak',
            translation: 'Your book (masculine)',
          },
          {
            arabic: 'كتابك',
            transliteration: 'ktaabik',
            translation: 'Your book (feminine)',
          },
          {
            arabic: 'كتابو',
            transliteration: 'ktaabo',
            translation: 'His book',
          },
          {
            arabic: 'كتابها',
            transliteration: 'ktaabha',
            translation: 'Her book',
          },
        ],
      },
      {
        point: 'Plural Possessive Suffixes',
        explanation: 'Different suffixes are used for plural possessors.',
        examples: [
          {
            arabic: 'كتابنا',
            transliteration: 'ktaabna',
            translation: 'Our book',
          },
          {
            arabic: 'كتابكم',
            transliteration: 'ktaabkum',
            translation: 'Your book (plural)',
          },
          {
            arabic: 'كتابهم',
            transliteration: 'ktaabhum',
            translation: 'Their book',
          },
        ],
      },
      {
        point: 'Possessive Suffixes with Feminine Nouns',
        explanation:
          "When adding possessive suffixes to feminine nouns ending in 'ة' (taa marbuuta), the 'ة' changes to 't'.",
        examples: [
          {
            arabic: 'سيارة',
            transliteration: 'sayyaara',
            translation: 'A car',
          },
          {
            arabic: 'سيارتي',
            transliteration: 'sayyaarti',
            translation: 'My car',
          },
          {
            arabic: 'سيارتك',
            transliteration: 'sayyaartak',
            translation: 'Your car (masculine)',
          },
          {
            arabic: 'سيارتها',
            transliteration: 'sayyaaritha',
            translation: 'Her car',
          },
        ],
      },
    ],
    practice: [
      {
        question: "How do you say 'our house' in Levantine Arabic?",
        options: ['بيتي', 'بيتنا', 'بيتكم', 'بيتهم'],
        correctAnswer: 1,
        feedback:
          "بيتنا (beitna) means 'our house'. The suffix '-na' indicates 'our'.",
      },
      {
        question: "What is the correct way to say 'her school'?",
        options: ['مدرستي', 'مدرستك', 'مدرستها', 'مدرستنا'],
        correctAnswer: 2,
        feedback:
          "مدرستها (madrasitha) means 'her school'. Note how the feminine ending 'ة' changes to 't' before adding the suffix '-ha'.",
      },
    ],
  },
  {
    id: 10,
    title: 'Past Tense Verbs (2l-Fi3l 2l-MaaDi)',
    objective:
      'Learn how to conjugate and use past tense verbs in Levantine Arabic.',
    grammarPoints: [
      {
        point: 'Basic Past Tense Formation',
        explanation:
          'Past tense verbs in Levantine Arabic are formed by adding suffixes to the verb stem.',
        examples: [
          {
            arabic: 'كتبت',
            transliteration: 'katabit',
            translation: 'I wrote',
          },
          {
            arabic: 'كتبت',
            transliteration: 'katabit',
            translation: 'You wrote (masculine)',
          },
          {
            arabic: 'كتبتي',
            transliteration: 'katabti',
            translation: 'You wrote (feminine)',
          },
          {
            arabic: 'كتب',
            transliteration: 'katab',
            translation: 'He wrote',
          },
          {
            arabic: 'كتبت',
            transliteration: 'katabit',
            translation: 'She wrote',
          },
        ],
      },
      {
        point: 'Plural Forms',
        explanation:
          'Plural forms of past tense verbs have their own conjugations.',
        examples: [
          {
            arabic: 'كتبنا',
            transliteration: 'katabna',
            translation: 'We wrote',
          },
          {
            arabic: 'كتبتو',
            transliteration: 'katabtu',
            translation: 'You (plural) wrote',
          },
          {
            arabic: 'كتبو',
            transliteration: 'katabu',
            translation: 'They wrote',
          },
        ],
      },
      {
        point: 'Common Irregular Verbs',
        explanation: 'Some common verbs have irregular past tense forms.',
        examples: [
          {
            arabic: 'قلت',
            transliteration: '2ilt',
            translation: 'I said',
          },
          {
            arabic: 'رحت',
            transliteration: 'ri7it',
            translation: 'I went',
          },
          {
            arabic: 'جيت',
            transliteration: 'jiit',
            translation: 'I came',
          },
          {
            arabic: 'شفت',
            transliteration: 'shift',
            translation: 'I saw',
          },
        ],
      },
    ],
    practice: [
      {
        question: "How do you say 'She ate' in Levantine Arabic?",
        options: ['أكلت', 'أكل', 'أكلتي', 'أكلنا'],
        correctAnswer: 0,
        feedback:
          "أكلت (akalit) means 'She ate'. For 'she' in past tense, we add the suffix 't'.",
      },
      {
        question: "Which sentence means 'They went to the restaurant'?",
        options: [
          'راحوا عالمطعم',
          'رحت عالمطعم',
          'راح عالمطعم',
          'رحنا عالمطعم',
        ],
        correctAnswer: 0,
        feedback:
          "راحوا عالمطعم (raa7u 3al-maT3am) means 'They went to the restaurant'. The suffix '-u' indicates 'they' in past tense.",
      },
    ],
  },
];

interface GrammarProps {
  setSubTab?: (tab: string) => void;
}

const Grammar: React.FC<GrammarProps> = ({ setSubTab }) => {
  const [expandedLesson, setExpandedLesson] = useState<number | null>(null);
  const [expandedPoint, setExpandedPoint] = useState<{
    lessonId: number;
    pointIndex: number;
  } | null>(null);
  const [quizAnswers, setQuizAnswers] = useState<{
    [key: string]: number | null;
  }>({});
  const [quizSubmitted, setQuizSubmitted] = useState<{
    [key: string]: boolean;
  }>({});

  const toggleLesson = (lessonId: number) => {
    setExpandedLesson(expandedLesson === lessonId ? null : lessonId);
    // Reset expanded point when closing a lesson
    if (expandedLesson === lessonId) {
      setExpandedPoint(null);
    }
  };

  const togglePoint = (lessonId: number, pointIndex: number) => {
    if (
      expandedPoint &&
      expandedPoint.lessonId === lessonId &&
      expandedPoint.pointIndex === pointIndex
    ) {
      setExpandedPoint(null);
    } else {
      setExpandedPoint({ lessonId, pointIndex });
    }
  };

  const handleAnswerSelect = (
    lessonId: number,
    questionIndex: number,
    answerIndex: number
  ) => {
    const key = `${lessonId}-${questionIndex}`;
    if (!quizSubmitted[key]) {
      setQuizAnswers({
        ...quizAnswers,
        [key]: answerIndex,
      });
    }
  };

  const handleQuizSubmit = (lessonId: number, questionIndex: number) => {
    const key = `${lessonId}-${questionIndex}`;
    setQuizSubmitted({
      ...quizSubmitted,
      [key]: true,
    });
  };

  const isAnswerCorrect = (lessonId: number, questionIndex: number) => {
    const key = `${lessonId}-${questionIndex}`;
    const lesson = grammarCourse.find((l) => l.id === lessonId);
    if (!lesson) return false;

    return quizAnswers[key] === lesson.practice[questionIndex].correctAnswer;
  };

  return (
    <div className="p-4">
      <button
        onClick={() => setSubTab?.('landing')}
        className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center transition-colors duration-200 hover:!border-emerald-500"
      >
        ← Back to Learn
      </button>

      <h2 className="text-xl font-bold mb-4">
        Levantine Arabic Grammar Course
      </h2>

      <div className="space-y-4">
        {grammarCourse.map((lesson) => (
          <div
            key={lesson.id}
            className="border border-gray-200 dark:border-dark-100 rounded-lg overflow-hidden dark:bg-dark-200"
          >
            {/* Lesson Header */}
            <div
              className={`
               p-4 flex justify-between items-center cursor-pointer transition-colors duration-200
               ${
                 expandedLesson === lesson.id
                   ? 'bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-500'
                   : 'bg-gray-50 dark:bg-dark-100 border border-gray-200 dark:border-dark-300 hover:!border-emerald-500 dark:hover:!border-emerald-500'
               }`}
              onClick={() => toggleLesson(lesson.id)}
            >
              <div>
                <h3 className="text-lg font-bold">
                  {lesson.id}. {lesson.title}
                </h3>
                {expandedLesson !== lesson.id && (
                  <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                    {lesson.objective}
                  </p>
                )}
              </div>
              {expandedLesson === lesson.id ? (
                <ChevronUp className="text-emerald-600" />
              ) : (
                <ChevronDown className="text-gray-400" />
              )}
            </div>

            {/* Lesson Content */}
            {expandedLesson === lesson.id && (
              <div className="p-4">
                <p className="mb-4 text-gray-700">{lesson.objective}</p>

                {/* Grammar Points */}
                <h4 className="font-bold text-md mb-3">Grammar Points</h4>
                <div className="space-y-3 mb-6">
                  {lesson.grammarPoints.map((point, pointIndex) => (
                    <div
                      key={pointIndex}
                      className="border border-gray-200 rounded-lg overflow-hidden"
                    >
                      <div
                        className={`
                     p-3 flex justify-between items-center cursor-pointer transition-colors duration-200
                     ${
                       expandedPoint &&
                       expandedPoint.lessonId === lesson.id &&
                       expandedPoint.pointIndex === pointIndex
                         ? 'bg-blue-50 border border-emerald-500'
                         : 'bg-gray-50 dark:bg-dark-100 border border-gray-200 dark:border-dark-300 hover:!border-emerald-500 dark:hover:!border-emerald-500'
                     }`}
                        onClick={() => togglePoint(lesson.id, pointIndex)}
                      >
                        <h5 className="font-medium">{point.point}</h5>
                        {expandedPoint &&
                        expandedPoint.lessonId === lesson.id &&
                        expandedPoint.pointIndex === pointIndex ? (
                          <ChevronUp className="text-blue-600" size={18} />
                        ) : (
                          <ChevronDown className="text-gray-400" size={18} />
                        )}
                      </div>

                      {expandedPoint &&
                        expandedPoint.lessonId === lesson.id &&
                        expandedPoint.pointIndex === pointIndex && (
                          <div className="p-3">
                            <p className="mb-3 text-gray-700">
                              {point.explanation}
                            </p>

                            <h6 className="font-medium text-sm text-gray-600 mb-2">
                              Examples:
                            </h6>
                            <div className="space-y-2">
                              {point.examples.map((example, exIndex) => (
                                <div
                                  key={exIndex}
                                  className="bg-gray-50 p-2 rounded-md"
                                >
                                  <div className="flex justify-between">
                                    <span className="font-medium">
                                      {example.arabic}
                                    </span>
                                    <span className="text-gray-600">
                                      {example.transliteration}
                                    </span>
                                  </div>
                                  <p className="text-sm text-gray-700 mt-1">
                                    {example.translation}
                                  </p>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                    </div>
                  ))}
                </div>

                {/* Practice Exercises */}
                <h4 className="font-bold text-md mb-3">Practice Exercises</h4>
                <div className="space-y-4">
                  {lesson.practice.map((question, qIndex) => {
                    const quizKey = `${lesson.id}-${qIndex}`;
                    const isSubmitted = quizSubmitted[quizKey];
                    const isCorrect = isAnswerCorrect(lesson.id, qIndex);

                    return (
                      <div
                        key={qIndex}
                        className="border border-gray-200 rounded-lg p-4"
                      >
                        <p className="font-medium mb-3">
                          {qIndex + 1}. {question.question}
                        </p>

                        <div className="space-y-2 mb-4">
                          {question.options.map((option, oIndex) => (
                            <div
                              key={oIndex}
                              className={`
    p-2 rounded-md cursor-pointer transition-colors duration-200
    ${
      quizAnswers[quizKey] === oIndex
        ? isSubmitted
          ? isCorrect
            ? 'bg-green-100 border border-green-300'
            : 'bg-red-100 border border-red-300'
          : 'bg-blue-100 border border-blue-300'
        : isSubmitted && question.correctAnswer === oIndex
        ? 'bg-green-100 border border-green-300'
        : 'bg-gray-50 border border-gray-200 hover:!border-emerald-500 dark:border-gray-200 dark:hover:!border-emerald-500'
    }
                              }`}
                              onClick={() =>
                                handleAnswerSelect(lesson.id, qIndex, oIndex)
                              }
                            >
                              <div className="flex items-center">
                                <span className="mr-2">
                                  {String.fromCharCode(65 + oIndex)}.
                                </span>
                                <span>{option}</span>
                                {isSubmitted && (
                                  <span className="ml-auto">
                                    {oIndex === question.correctAnswer && (
                                      <CheckCircle
                                        size={18}
                                        className="text-green-600"
                                      />
                                    )}
                                    {quizAnswers[quizKey] === oIndex &&
                                      oIndex !== question.correctAnswer && (
                                        <XCircle
                                          size={18}
                                          className="text-red-600"
                                        />
                                      )}
                                  </span>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>

                        {!isSubmitted ? (
                          <button
                            className="bg-emerald-600 text-white px-4 py-2 rounded-md hover:bg-emerald-700 disabled:bg-gray-300"
                            onClick={() => handleQuizSubmit(lesson.id, qIndex)}
                            disabled={
                              quizAnswers[quizKey] === undefined ||
                              quizAnswers[quizKey] === null
                            }
                          >
                            Check Answer
                          </button>
                        ) : (
                          <div
                            className={`p-3 rounded-md ${
                              isCorrect
                                ? 'bg-green-50 border border-green-200'
                                : 'bg-red-50 border border-red-200'
                            }`}
                          >
                            <p
                              className={`font-medium ${
                                isCorrect ? 'text-green-800' : 'text-red-800'
                              }`}
                            >
                              {isCorrect ? 'Correct!' : 'Incorrect!'}{' '}
                              {question.feedback}
                            </p>
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>

                {/* Next Lesson Button */}
                {lesson.id < grammarCourse.length && (
                  <div className="mt-6 flex justify-end">
                    <button
                      className="flex items-center bg-emerald-100 text-emerald-800 px-4 py-2 rounded-md transition-colors duration-200 hover:bg-emerald-200"
                      onClick={() => {
                        /* ... */
                      }}
                      onClick={() => {
                        setExpandedLesson(lesson.id + 1);
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                      }}
                    >
                      <span className="mr-2">Next Lesson</span>
                      <ArrowRight size={18} />
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default Grammar;




=== FILE: src/components/HomePage.tsx ===
import React, { useState } from 'react';
import {
  BookOpen,
  TrendingUp,
  Award,
  Clock,
  ChevronRight,
  Settings as SettingsIcon,
  Calendar,
  BookA,
  Languages,
  Search,
  Volume2,
  AlignLeft,
} from 'lucide-react';
import { useLearnedWords } from '../context/LearnedWordsContext';

interface HomePageProps {
  setActiveTab: (tab: string) => void;
}

const HomePage: React.FC<HomePageProps> = ({ setActiveTab }) => {
  const { getTodayLearnedCount, getTodayLearnedWords } = useLearnedWords();
  const [quickStartTabs, setQuickStartTabs] = useState<string[]>(() => {
    const saved = localStorage.getItem('quickStartTabs');
    return saved ? JSON.parse(saved) : ['daily', 'wordbank', 'translate'];
  });
  const [showLearnedWords, setShowLearnedWords] = useState(false);

  const todayCount = getTodayLearnedCount();
  const todayWords = getTodayLearnedWords();

  const tabInfo = {
    daily: { name: 'Daily Words', icon: Calendar, color: 'bg-emerald-600' },
    wordbank: { name: 'Vocabulary', icon: BookA, color: 'bg-emerald-100' },
    translate: { name: 'Translate', icon: Languages, color: 'bg-emerald-100' },
    dictionary: { name: 'Dictionary', icon: Search, color: 'bg-emerald-100' },
    alphabet: { name: 'Alphabet', icon: BookA, color: 'bg-emerald-100' },
    pronunciation: {
      name: 'Pronunciation',
      icon: Volume2,
      color: 'bg-emerald-100',
    },
    grammar: { name: 'Grammar', icon: AlignLeft, color: 'bg-emerald-100' },
  };

  // Mock stats for the dashboard
  const stats = [
    {
      title: 'Words Learned Today',
      value: todayCount,
      icon: <BookOpen className="text-emerald-500" />,
      onClick: () => setShowLearnedWords(!showLearnedWords),
    },
    {
      title: 'Current Streak',
      value: '3 days',
      icon: <TrendingUp className="text-emerald-500" />,
    },
    {
      title: 'Total Words Learned',
      value: todayCount,
      icon: <Award className="text-emerald-500" />,
    },
    {
      title: 'Study Time',
      value: '25 mins',
      icon: <Clock className="text-emerald-500" />,
    },
  ];

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-6">Welcome Back!</h2>

      {/* Dashboard Cards */}
      <div className="grid grid-cols-2 gap-4 mb-6 dark:text-gray-100">
        {stats.map((stat, index) => (
          <div
            key={index}
            className={`bg-white dark:bg-dark-200 p-4 rounded-lg shadow border border-gray-100 dark:border-dark-100 ${
              index === 0
                ? 'cursor-pointer hover:bg-gray-50 dark:hover:bg-dark-100'
                : ''
            }`}
            onClick={stat.onClick}
          >
            <div className="flex items-center justify-between mb-2">
              <div className="p-2 rounded-full bg-gray-100 dark:bg-dark-100">
                {stat.icon}
              </div>
              {index === 0 && (
                <ChevronRight
                  size={16}
                  className="text-gray-400 dark:text-gray-500"
                />
              )}
            </div>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {stat.title}
            </p>
            <p className="text-xl font-bold">{stat.value}</p>
          </div>
        ))}
      </div>

      {/* Today's learned words section */}
      {showLearnedWords && (
        <div className="mt-6 bg-white dark:bg-dark-200 p-4 rounded-lg shadow border border-gray-100 dark:border-dark-100">
          <h3 className="text-lg font-bold mb-3">Words Learned Today</h3>

          {todayWords.length > 0 ? (
            <div className="space-y-3">
              {todayWords.map((word) => (
                <div
                  key={word.id}
                  className="border border-gray-200 dark:border-dark-100 rounded-lg p-3 hover:bg-gray-50 dark:hover:bg-dark-100"
                >
                  <div className="flex justify-between">
                    <div>
                      <h4 className="font-bold">{word.word}</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400">
                        {word.transliteration}
                      </p>
                    </div>
                    <p className="text-emerald-600 font-medium">
                      {word.definition}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-center text-gray-500 py-4">
              No words learned today. Start learning!
            </p>
          )}
        </div>
      )}

      {/* Quick Start Section */}
      <div className="mt-6">
        <h3 className="text-lg font-bold mb-3">Quick Start</h3>
        <div className="grid grid-cols-1 gap-3">
          {quickStartTabs.map((tabId, index) => {
            const tab = tabInfo[tabId];
            const Icon = tab.icon;
            return (
              <button
                key={tabId}
                className={`${tab.color} ${
                  tab.color === 'bg-emerald-600'
                    ? 'text-white'
                    : 'text-emerald-800'
                } p-4 rounded-lg shadow flex justify-between items-center`}
                onClick={() => setActiveTab(tabId)}
              >
                <div className="flex items-center">
                  <Icon size={20} className="mr-2" />
                  <span className="font-medium">{tab.name}</span>
                </div>
                <ChevronRight size={20} />
              </button>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default HomePage;




=== FILE: src/components/LearnLanding.tsx ===
import React from 'react';
import { BookOpen, AlignLeft, Volume2, GraduationCap } from 'lucide-react';

interface LearnLandingProps {
  setSubTab: (tab: string) => void;
}

const LearnLanding: React.FC<LearnLandingProps> = ({ setSubTab }) => {
  const options = [
    {
      id: 'topic', // Clicking this will lead to the topics grid view
      label: 'Lessons',
      description: 'Progressive chapters and interactive exercises',
      icon: <BookOpen size={24} className="text-emerald-600" />,
    },
    {
      id: 'alphabet',
      label: 'Alphabet',
      description: 'Learn Arabic letters and pronunciation',
      icon: <AlignLeft size={24} className="text-emerald-600" />,
    },
    {
      id: 'pronunciation',
      label: 'Pronunciation',
      description: 'Perfect your Arabic accent',
      icon: <Volume2 size={24} className="text-emerald-600" />,
    },
    {
      id: 'grammar',
      label: 'Grammar',
      description: 'Master Arabic grammar rules',
      icon: <GraduationCap size={24} className="text-emerald-600" />,
    },
  ];

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-2 text-gray-800 dark:text-gray-100">
        Learn
      </h2>
      <p className="text-gray-600 dark:text-gray-400 mb-6">
        Master Levantine Arabic step by step
      </p>
      <div className="grid grid-cols-2 gap-4 mb-8">
        {options.map((option) => (
          <div
            key={option.id}
            onClick={() => setSubTab(option.id)}
            className="p-4 rounded-lg cursor-pointer transition-colors duration-200 bg-gray-50 dark:bg-dark-100 border border-gray-200 dark:border-dark-300 hover:!border-emerald-500 dark:hover:!border-emerald-500"
          >
            <div className="flex items-center justify-center mb-3">
              <div className="p-3 rounded-full bg-emerald-50 dark:bg-emerald-900/20">
                {option.icon}
              </div>
            </div>
            <h3 className="font-bold text-center mb-1 text-gray-800 dark:text-gray-100">
              {option.label}
            </h3>
            <p className="text-sm text-center text-gray-600 dark:text-gray-300">
              {option.description}
            </p>
          </div>
        ))}
      </div>

      {/* Progress Section (optional) */}
      <div className="mb-4 bg-gray-50 dark:bg-dark-100 rounded-lg p-4 border border-gray-200 dark:border-dark-300 hover:!border-emerald-500 dark:hover:!border-emerald-500 transition-colors duration-200">
        <h3 className="text-sm font-medium mb-2 text-gray-600 dark:text-gray-300">
          Pick up where you left off
        </h3>
        <div className="mb-2">
          <p className="font-medium text-gray-600 dark:text-gray-300">
            Letters
          </p>
        </div>
        <div className="relative">
          <div className="flex mb-2 items-center justify-between">
            <div>
              <span className="text-xs font-semibold inline-block text-emerald-600">
                65%
              </span>
            </div>
          </div>
          <div className="overflow-hidden h-2 text-xs flex rounded bg-emerald-100 dark:bg-emerald-900/20">
            <div
              style={{ width: '65%' }}
              className="flex flex-col text-center whitespace-nowrap text-white justify-center bg-emerald-500 dark:bg-emerald-500"
            ></div>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="space-y-3">
        <button className="w-full py-3 px-4 bg-emerald-600 text-white font-bold rounded-lg hover:bg-emerald-700 transition-colors">
          Continue Learning
        </button>
        <button className="w-full py-3 px-4 bg-white dark:bg-dark-100 border border-emerald-600 text-emerald-600 font-bold rounded-lg hover:bg-emerald-50 dark:hover:bg-dark-200 transition-colors">
          Quiz Me
        </button>
      </div>
    </div>
  );
};

export default LearnLanding;




=== FILE: src/components/LessonDetailPage.tsx ===
import React, { useEffect, useState, useRef } from 'react';
import { supabase } from '../lib/supabaseClient';
import { Volume2 } from 'lucide-react';
import Quiz from './Quiz';
import { motion } from 'framer-motion';
import { useAudio } from '../context/AudioContext'; // ✅ Import shared audio data
import AlphabetSongLesson from './AlphabetSongLesson';

interface LessonDetailProps {
  lessonId: string;
  onBack: () => void;
}

// Map lesson IDs to their corresponding letters ALPHABET topic
const lessonLettersMap: { [key: string]: string[] } = {
  '657b5aef-23e3-462c-9f61-c134a855b269': ['ل', 'ا', 'ى', 'ي'],
  '81221d64-e880-407c-a9ba-fb47b02d7d10': ['ب', 'ن', 'ت', 'ث'],
  'd1df16d4-e6b2-4dbd-9d13-b43b84465e28': ['د', 'ذ', 'ط', 'ظ'],
  '78156b07-cca4-4d0c-8e6c-f3903f533844': ['ج', 'ح', 'خ'],
  '8b81eec3-1391-4371-bbf4-4a2d5b056051': ['ر', 'ز', 'و', 'ك'],
  'd5fd9cb9-2c76-44b0-a506-bf8d40beef0b': ['س', 'ش', 'ص', 'ض'],
  '5bade402-5729-4afc-a688-eae79a41bedd': ['ع', 'غ', 'ف', 'ق'],
  '8e4bc85b-08f5-448b-84fa-836235dfea4c': ['م', 'ه', 'ة', 'ء'],
  '89265e2d-d7bd-4725-9047-d1d7f84965cc': [
    'ا',
    'ب',
    'ت',
    'ث',
    'ج',
    'ح',
    'خ',
    'د',
    'ذ',
    'ر',
    'ز',
    'س',
    'ش',
    'ص',
    'ض',
    'ط',
    'ظ',
    'ع',
    'غ',
    'ف',
    'ق',
    'ك',
    'ل',
    'م',
    'ن',
    'ه',
    'و',
    'ي',
  ],
};

const LessonDetailPage: React.FC<LessonDetailProps> = ({
  lessonId,
  onBack,
}) => {
  const [lesson, setLesson] = useState<any>(null);
  const [questionCount, setQuestionCount] = useState(30);

  const [showQuiz, setShowQuiz] = useState(false);
  const [letters, setLetters] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const audioRefs = useRef<{ [key: string]: HTMLAudioElement }>({});
  const [quiz, setQuiz] = useState<any>(null);

  useEffect(() => {
    async function fetchQuizData() {
      console.log(
        '🔍 DEBUG: Fetching quiz data for:',
        lesson?.level,
        lesson?.order_num
      );

      if (
        !lesson ||
        lesson.level === undefined ||
        lesson.order_num === undefined
      ) {
        console.warn('⚠️ Lesson is missing required fields:', lesson);
        return;
      }

      const { data: quiz_questions, error: quizError } = await supabase
        .from('quiz_questions')
        .select(
          `
       *
      `
        )
        .eq('level', lesson.level)
        .eq('order_num', lesson.order_num);

      if (quizError) {
        console.error('❌ Quiz Fetch Error:', quizError);
        return;
      }

      console.log(
        '✅ Fetched quiz_questions with audio & sound:',
        quiz_questions
      );
      setQuiz(quiz_questions);
    }

    if (lesson) {
      fetchQuizData();
    }
  }, [lesson]);

  useEffect(() => {
    async function fetchLesson() {
      setLoading(true);
      setError(null);
      try {
        // Fetch lesson details
        const { data: lessonData, error: lessonError } = await supabase
          .from('lessons')
          .select('*')
          .eq('id', lessonId)
          .single();

        if (lessonError) throw lessonError;
        setLesson(lessonData);

        // Fetch letters associated with this lesson
        const lettersToFetch = lessonLettersMap[lessonId] || [];
        if (lettersToFetch.length > 0) {
          const { data: letterData, error: letterError } = await supabase
            .from('alphabet')
            .select(
              'letter, name, transliteration, pronunciation_description, forms, examples, additional_info, song_url'
            )
            .in('letter', lettersToFetch);

          if (letterError) throw letterError;

          // Maintain correct order of letters
          const orderedLetters = lettersToFetch.map((ltr) =>
            letterData.find((row) => row.letter === ltr)
          );
          setLetters(orderedLetters);
        }
      } catch (err: any) {
        console.error('Error fetching lesson or letters:', err);
        setError('Failed to load lesson content.');
      } finally {
        setLoading(false);
      }
    }

    fetchLesson();
  }, [lessonId]);
  const { audioData } = useAudio();

  const playAudio = (letter: string) => {
    // Find the audio file for this letter from the constructed list
    const audioFile = constructedAudioFiles.find(
      (file) => file.letter === letter
    );
    if (!audioFile || !audioFile.url) {
      console.warn(`No audio found for letter: ${letter}`);
      return;
    }
    const audio = new Audio(audioFile.url);
    audio.crossOrigin = 'anonymous';
    audio
      .play()
      .catch((err) => console.error(`Error playing audio for ${letter}:`, err));
  };

  if (loading) return <div className="p-4">Loading lesson...</div>;
  if (error) return <div className="p-4 text-red-600">{error}</div>;
  if (!lesson) return <div className="p-4">Lesson not found.</div>;

  const renderQuiz = () => {
    // Pick a random letter from the lesson as the correct answer
    const correctLetter = letters[Math.floor(Math.random() * letters.length)];

    // Shuffle options (correct letter + random others)
    const options = [...letters]
      .sort(() => Math.random() - 0.5) // Shuffle
      .slice(0, 3); // Pick 3 random options

    // Ensure the correct letter is always included
    if (!options.includes(correctLetter)) {
      options.push(correctLetter);
    }

    // State to track user's selection
    const [selectedOption, setSelectedOption] = useState<string | null>(null);
    const [isCorrect, setIsCorrect] = useState<boolean | null>(null);

    const handleOptionClick = (option: string) => {
      setSelectedOption(option);
      setIsCorrect(option === correctLetter.letter);

      // Reset after a delay
      setTimeout(() => {
        setSelectedOption(null);
        setIsCorrect(null);
      }, 1500);
    };

    return (
      <div className="quiz-container">
        <h2 className="text-xl font-bold mb-4">
          Which letter makes this sound?
        </h2>

        {/* Play Sound Button */}
        <button
          onClick={() => new Audio(correctLetter.audio_url).play()}
          className="play-button"
        >
          🔊 Play Sound
        </button>

        {/* Answer Options */}
        <div className="options-container">
          {options.map((option) => (
            <motion.div
              key={option.letter}
              className={`option ${
                selectedOption === option.letter ? 'selected' : ''
              }`}
              whileTap={{ scale: 0.9 }}
              animate={
                isCorrect !== null
                  ? option.letter === correctLetter.letter
                    ? { scale: 1.2 }
                    : { x: [-10, 10, -5, 5, 0] }
                  : {}
              }
              transition={{ duration: 0.3 }}
              onClick={() => handleOptionClick(option.letter)}
            >
              {option.letter}
            </motion.div>
          ))}
        </div>

        {/* Feedback */}
        {isCorrect !== null && (
          <motion.div
            className={`feedback ${isCorrect ? 'correct' : 'wrong'}`}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            {isCorrect ? '✅ Correct!' : '❌ Try Again'}
          </motion.div>
        )}

        {/* Return to Lesson */}
        <motion.button
          onClick={() => setShowQuiz(false)}
          className="mt-6 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          ⬅ Back to Lesson
        </motion.button>
      </div>
    );
  };

  if (showQuiz && quiz) {
    return (
      <Quiz
        lesson={lesson}
        lessonId={lessonId}
        quizData={quiz}
        onComplete={() => setShowQuiz(false)}
        onBack={() => setShowQuiz(false)}
        questionCount={questionCount}
      />
    );
  }
  // Create an array that maps each letter to its audio file URL with logging
  const constructedAudioFiles = letters.map((l) => {
    console.log(`Using audio URL for ${l.letter}: ${l.song_url}`);
    return { letter: l.letter, url: l.song_url };
  });

  // This will print the complete list in the console
  console.log('constructedAudioFiles:', constructedAudioFiles);
  return (
    <div className="p-4">
      {/* Go Back Button */}
      <button
        onClick={onBack}
        className="mb-4 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Lessons
      </button>

      {/* Lesson Title & Description */}
      <h2 className="text-2xl font-bold mb-2">{lesson.title}</h2>
      <p className="text-gray-600 dark:text-white mb-6 whitespace-pre-wrap">
        {lesson.description}
      </p>
      {/* For lesson 9, include the Alphabet Song component */}

      {lesson.order_num === 9 && (
        <div className="mb-6">
          {console.log('Audio data available:', audioData)}
          {console.log('Letters being mapped:', letters)}
          <AlphabetSongLesson
            letters={letters.map((l) => l.letter)}
            audioFiles={constructedAudioFiles}
          />
        </div>
      )}

      {/* Display Letter Cards */}
      {letters.length > 0 && (
        <div>
          <h3 className="text-xl font-bold mb-4">Letters in this Lesson</h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 gap-4">
            {letters.map((letter) => (
              <div key={letter.letter} className="flex flex-col">
                {/* Letter Card */}
                <div className="bg-white dark:bg-dark-100 p-4 rounded-lg shadow-sm border border-gray-200 dark:border-dark-300 flex flex-col">
                  {/* Letter Display */}
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center">
                      <div className="text-3xl font-bold ml-1">
                        {letter.letter}
                      </div>
                      <div className="text-xl text-gray-600 dark:text-gray-400 ml-3">
                        {letter.name} - {letter.transliteration}
                      </div>
                    </div>
                    <button
                      onClick={() => playAudio(letter.letter)}
                      className="p-2 rounded-full bg-emerald-100 dark:bg-emerald-900/30 text-emerald-600 dark:text-emerald-400 hover:bg-emerald-200"
                    >
                      <Volume2 size={16} />
                    </button>
                  </div>

                  {/* Pronunciation Description */}
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                    {letter.pronunciation_description}
                  </p>

                  {/* Forms & Examples Table */}
                  <div className="grid grid-cols-3 gap-4">
                    {['end', 'middle', 'start'].map((position) => (
                      <div key={position} className="text-center">
                        <div className="font-medium text-sm mb-2 capitalize">
                          {position}:
                        </div>
                        <div className="text-2xl mb-5">
                          {letter.forms[position]}
                        </div>
                        {letter.examples[position]?.word && (
                          <div className="text-md" dir="rtl">
                            {letter.examples[position].word}
                          </div>
                        )}

                        <div className="text-sm text-gray-600 dark:text-gray-400">
                          {letter.examples[position]?.transliteration}
                        </div>
                        <div className="text-xs text-gray-500 dark:text-gray-500">
                          {letter.examples[position]?.translation}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Additional Info Outside the Letter Card */}
                {letter.additional_info && (
                  <p className="mt-2 text-black dark:text-white text-lg">
                    {letter.additional_info}
                  </p>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      <div className="flex justify-center items-center mt-4 gap-4">
        <label className="text-sm font-medium text-gray-700 dark:text-white">
          Number of Questions:
        </label>
        <select
          value={questionCount}
          onChange={(e) => setQuestionCount(Number(e.target.value))}
          className="px-3 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-dark-100 text-gray-700 dark:text-white"
        >
          {[5, 10, 15, 20, 25, 30].map((num) => (
            <option key={num} value={num}>
              {num}
            </option>
          ))}
        </select>
      </div>

      {/* Start Quiz Button */}
      <div className="flex justify-center mt-6">
        <motion.button
          onClick={() => setShowQuiz(true)}
          className="mt-6 px-6 py-3 bg-emerald-600 text-white rounded-lg shadow-md hover:bg-emerald-700 transition-all"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          disabled={!quiz || quiz.length === 0} // ✅ Disable if no quiz_questions are found
          style={{ opacity: quiz && quiz.length > 0 ? 1 : 0.5 }} // ✅ Dim button when loading
        >
          {quiz && quiz.length > 0 ? 'Start Quiz' : 'Loading Quiz...'}
        </motion.button>
      </div>
    </div> // ✅ Now the JSX structure is correct
  );
};

export default LessonDetailPage;




=== FILE: src/components/LessonViewer.tsx ===
import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';
import { Lesson, Letter } from '../types/lessons';
import { Volume2, AlertCircle, Loader2, ChevronRight } from 'lucide-react';

interface LessonViewerProps {
  lessonId: string;
  lessonType?: string;
}

const LessonViewer: React.FC<LessonViewerProps> = ({ lessonId, lessonType }) => {
  const [lesson, setLesson] = useState<Lesson | null>(null);
  const [letters, setLetters] = useState<Letter[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedQuizAnswers, setSelectedQuizAnswers] = useState<{ [key: string]: string }>({});
  const [showResults, setShowResults] = useState(false);

  // Fetch lesson data
  useEffect(() => {
    async function fetchLesson() {
      try {
        setLoading(true);
        setError(null);

        const { data, error: lessonError } = await supabase
          .from('lessons')
          .select('*')
          .eq('id', lessonId)
          .single();

        if (lessonError) throw lessonError;
        if (!data) throw new Error('Lesson not found');

        setLesson(data as Lesson);

        // If it's an alphabet lesson and has letters, fetch letter details
        if (data.type === 'alphabet' && data.content.letters?.length) {
          const { data: letterData, error: letterError } = await supabase
            .from('alphabet')
            .select('*')
            .in('letter', data.content.letters);

          if (letterError) throw letterError;
          setLetters(letterData || []);
        }
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load lesson');
        console.error('Error fetching lesson:', err);
      } finally {
        setLoading(false);
      }
    }

    fetchLesson();
  }, [lessonId]);

  const handleQuizAnswer = (questionIndex: number, answer: string) => {
    setSelectedQuizAnswers(prev => ({
      ...prev,
      [questionIndex]: answer
    }));
  };

  const checkAnswers = () => {
    setShowResults(true);
  };

  const playAudio = async (audioUrl: string) => {
    try {
      const audio = new Audio(audioUrl);
      await audio.play();
    } catch (err) {
      console.error('Error playing audio:', err);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <Loader2 className="w-8 h-8 animate-spin text-emerald-600" />
      </div>
    );
  }

  if (error || !lesson) {
    return (
      <div className="p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
        <div className="flex items-center text-red-700 dark:text-red-400">
          <AlertCircle className="w-5 h-5 mr-2" />
          <p>{error || 'Failed to load lesson'}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 bg-white dark:bg-dark-200 rounded-lg shadow-sm">
      {/* Lesson Header */}
      <div className="mb-6">
        <h1 className="text-2xl font-bold mb-2">{lesson.title}</h1>
        <p className="text-gray-600 dark:text-gray-400">{lesson.description}</p>
      </div>

      {/* Pronunciation Section */}
      {lesson.content.pronunciation && (
        <div className="mb-6 bg-emerald-50 dark:bg-emerald-900/20 p-4 rounded-lg">
          <h2 className="font-bold mb-2">Pronunciation Guide</h2>
          <p className="text-gray-700 dark:text-gray-300">{lesson.content.pronunciation}</p>
        </div>
      )}

      {/* Examples Section */}
      {lesson.content.examples && lesson.content.examples.length > 0 && (
        <div className="mb-6">
          <h2 className="font-bold mb-3">Examples</h2>
          <div className="grid gap-3">
            {lesson.content.examples.map((example, index) => (
              <div 
                key={index}
                className="p-3 bg-gray-50 dark:bg-dark-100 rounded-lg"
              >
                <p className="text-gray-700 dark:text-gray-300">{example}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Letters Section (for alphabet lessons) */}
      {lesson.type === 'alphabet' && letters.length > 0 && (
        <div className="mb-6">
          <h2 className="font-bold mb-3">Letters</h2>
          <div className="grid gap-4">
            {letters.map((letter) => (
              <div 
                key={letter.id}
                className="p-4 border border-gray-200 dark:border-dark-100 rounded-lg"
              >
                <div className="flex items-center justify-between mb-3">
                  <div>
                    <span className="text-2xl font-bold">{letter.letter}</span>
                    <span className="ml-3 text-gray-600 dark:text-gray-400">
                      {letter.name} ({letter.transliteration})
                    </span>
                  </div>
                  {letter.audio_url && (
                    <button
                      onClick={() => playAudio(letter.audio_url!)}
                      className="p-2 rounded-full bg-emerald-100 dark:bg-emerald-900/30 text-emerald-600 dark:text-emerald-400"
                    >
                      <Volume2 size={18} />
                    </button>
                  )}
                </div>

                {/* Letter Forms */}
                <div className="grid grid-cols-4 gap-3 mb-3">
                  {Object.entries(letter.forms).map(([position, form]) => (
                    <div 
                      key={position}
                      className="text-center p-2 bg-gray-50 dark:bg-dark-100 rounded"
                    >
                      <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">
                        {position}
                      </p>
                      <p className="text-xl">{form}</p>
                    </div>
                  ))}
                </div>

                {/* Letter Examples */}
                <div className="space-y-2">
                  {letter.examples.map((example, idx) => (
                    <div 
                      key={idx}
                      className="text-sm text-gray-700 dark:text-gray-300"
                    >
                      <span className="font-bold">{example.word}</span>
                      <span className="mx-2">-</span>
                      <span>{example.transliteration}</span>
                      <span className="mx-2">-</span>
                      <span className="italic">{example.meaning}</span>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Quiz Section */}
      {lesson.content.quiz && lesson.content.quiz.length > 0 && (
        <div className="mt-8">
          <h2 className="font-bold text-xl mb-4">Practice Quiz</h2>
          <div className="space-y-6">
            {lesson.content.quiz.map((question, qIndex) => (
              <div 
                key={qIndex}
                className="border border-gray-200 dark:border-dark-100 rounded-lg p-4"
              >
                <div className="flex items-start justify-between mb-4">
                  <h3 className="font-medium">{question.question}</h3>
                  {question.audio && (
                    <button
                      onClick={() => playAudio(question.audio!)}
                      className="p-2 rounded-full bg-emerald-100 dark:bg-emerald-900/30 text-emerald-600 dark:text-emerald-400"
                    >
                      <Volume2 size={18} />
                    </button>
                  )}
                </div>

                <div className="space-y-2">
                  {question.options.map((option, oIndex) => (
                    <button
                      key={oIndex}
                      onClick={() => handleQuizAnswer(qIndex, option)}
                      className={`w-full text-left p-3 rounded-lg border transition-colors ${
                        selectedQuizAnswers[qIndex] === option
                          ? 'border-emerald-500 bg-emerald-50 dark:bg-emerald-900/20'
                          : 'border-gray-200 dark:border-dark-100 hover:bg-gray-50 dark:hover:bg-dark-100'
                      }`}
                    >
                      {option}
                    </button>
                  ))}
                </div>

                {showResults && selectedQuizAnswers[qIndex] && (
                  <div className={`mt-3 p-3 rounded-lg ${
                    selectedQuizAnswers[qIndex] === question.answer
                      ? 'bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-400'
                      : 'bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400'
                  }`}>
                    {selectedQuizAnswers[qIndex] === question.answer
                      ? 'Correct!'
                      : `Incorrect. The correct answer is: ${question.answer}`}
                  </div>
                )}
              </div>
            ))}
          </div>

          {!showResults && Object.keys(selectedQuizAnswers).length > 0 && (
            <button
              onClick={checkAnswers}
              className="mt-4 w-full bg-emerald-600 text-white py-2 px-4 rounded-lg hover:bg-emerald-700 transition-colors"
            >
              Check Answers
            </button>
          )}
        </div>
      )}
    </div>
  );
};

export default LessonViewer;



=== FILE: src/components/Lessons.tsx ===
import React, { useState, useEffect, useRef } from 'react';
import {
  BookOpen,
  ChevronRight,
  Volume2,
  GraduationCap,
  AlignLeft,
  Loader2,
} from 'lucide-react';
import { fetchAlphabetLessons } from '../lib/lessonService';
import { supabase } from '../lib/supabaseClient';
import Alphabet from './Alphabet';

const QuizPage = ({ lesson, onBack }) => {
  const [selectedOption, setSelectedOption] = useState(null);

  const handleOptionClick = (index) => {
    setSelectedOption(index);
  };
};

const LessonDetail = ({
  lesson,
  onBack,
}: {
  lesson: any;
  onBack: () => void;
}) => {
  const audioRefs = useRef({});
  const [lessonLetters, setLessonLetters] = useState<any[]>([]);
  const [lettersLoading, setLettersLoading] = useState(true);

  // Fetch letter details from Supabase using the IDs in lesson.content.letters.
  useEffect(() => {
    async function fetchLessonLetters() {
      console.log('Lesson content:', lesson.content);
      // Check if lesson.content.letters exists and is an array
      if (lesson.content && Array.isArray(lesson.content.letters)) {
        const letterIds = lesson.content.letters;
        console.log('Letter IDs to fetch:', letterIds);
        const { data, error } = await supabase
          .from('alphabet')
          .select('*')
          .in('id', letterIds);
        if (error) {
          console.error('Error fetching lesson letters:', error);
        } else {
          console.log('Fetched lesson letters:', data);
          setLessonLetters(data);
        }
      } else {
        console.warn('No letter IDs found in lesson.content.letters');
        setLessonLetters([]);
      }
      setLettersLoading(false);
    }
    fetchLessonLetters();
  }, [lesson]);

  const playAudio = (audioUrl: string, letter: string) => {
    try {
      if (!audioRefs.current[letter]) {
        const audio = new Audio(audioUrl);
        audioRefs.current[letter] = audio;
        audio.onerror = (e) => {
          console.error('Audio failed to load:', e);
        };
      }
      const audioElement = audioRefs.current[letter];
      audioElement.currentTime = 0;
      const playPromise = audioElement.play();
      if (playPromise !== undefined) {
        playPromise.catch((error) => {
          console.error('Error playing audio:', error);
        });
      }
    } catch (error) {
      console.error('Error in playAudio function:', error);
    }
  };

  if (!lesson?.content) {
    return (
      <div className="p-4 animate-fade-in">
        <button
          onClick={onBack}
          className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
        >
          ← Back to Lessons
        </button>
        <div className="text-center text-gray-500 dark:text-gray-400 py-8 bg-gray-50 dark:bg-dark-100 rounded-lg">
          Lesson content is not available.
        </div>
      </div>
    );
  }
  // This is to fetch the individual lesson data
  return (
    <div className="p-4 animate-fade-in">
      <button
        onClick={onBack}
        className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Lessons
      </button>

      <h2 className="text-2xl font-bold mb-2">{lesson.title}</h2>
      <p className="text-gray-600 dark:text-gray-400 mb-6">
        {lesson.description}
      </p>
      {/* Render the pronunciation */}
      <p className="text-gray-600 dark:text-gray-400 mb-6">
        {lesson.content.pronunciation}
      </p>
      {/* Render the examples */}
      <ul className="list-disc ml-6 text-gray-600 dark:text-gray-400 mb-6">
        {lesson.content.examples.map((example, index) => (
          <li key={index}>{example}</li>
        ))}
      </ul>
    </div>
  );
};

interface LessonContent {
  lesson_group: string;
  letters: {
    letter: string;
    name: string;
    transliteration: string;
    forms: {
      isolated: string;
      initial: string;
      medial: string;
      final: string;
    };
    examples: {
      word: string;
      transliteration: string;
      meaning: string;
    }[];
  }[];
}

interface LessonsProps {
  subTab?: TabType;
  setSubTab?: (tab: TabType) => void;
}

const Lessons: React.FC<LessonsProps> = ({ subTab = 'lessons', setSubTab }) => {
  const [selectedLesson, setSelectedLesson] = useState<any>(null);
  const [isQuizActive, setIsQuizActive] = useState(false);
  const [showLessons, setShowLessons] = useState(false);
  const [lessons, setLessons] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const [selectedTopic, setSelectedTopic] = useState<string | null>(null);

  // Remove or comment out the original useEffect that loads lessons on mount.
  // Then add this effect to load lessons only when the "alphabet" topic is selected:
  useEffect(() => {
    if (selectedTopic === 'alphabet') {
      async function loadLessons() {
        setLoading(true);
        setError(null);
        try {
          const data = await fetchAlphabetLessons();
          setLessons(data);
        } catch (error) {
          console.error('Failed to fetch lessons:', error);
          setError('Failed to load lessons. Please try again later.');
        } finally {
          setLoading(false);
        }
      }
      loadLessons();
    }
  }, [selectedTopic]);

  const handleLessonClick = async (lessonId: string) => {
    setLoading(true);
    setError(null);
    try {
      const { data, error } = await supabase
        .from('lessons')
        .select('*')
        .eq('id', lessonId)
        .single();

      if (error) {
        throw error;
      }

      if (data) {
        console.log('Fetched lesson data:', data); // Add this line to log fetched data
        setSelectedLesson(data);
        setShowLessons(false);
      } else {
        setError('Lesson content not found');
      }
    } catch (err) {
      console.error('Error fetching lesson:', err);
      setError('Failed to load lesson content');
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    setSelectedLesson(null);
    setShowLessons(true);
    setError(null);
  };

  // Show lesson detail or quiz if a lesson is selected
  if (selectedLesson) {
    return isQuizActive ? (
      <div className="p-4">
        <QuizPage
          lesson={selectedLesson}
          onBack={() => setIsQuizActive(false)}
        />
      </div>
    ) : (
      <div className="p-4">
        <LessonDetail
          lesson={selectedLesson}
          onBack={handleBack}
          onQuizStart={() => setIsQuizActive(true)}
        />
      </div>
    );
  }

  // Show lessons list when Lessons is clicked
  if (showLessons) {
    if (!selectedTopic) {
      // Topics grid view
      return (
        <div className="p-4">
          <button
            onClick={() => setShowLessons(false)}
            className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
          >
            ← Back to Learn
          </button>
          <h2 className="text-2xl font-bold mb-6">Select a Topic</h2>
          <div className="grid grid-cols-1 gap-4">
            {[
              {
                id: 'alphabet',
                label: 'Alphabet',
                description: 'Learn Arabic letters and pronunciation',
                icon: <AlignLeft size={24} />,
                progress: 65, // placeholder – this will be replaced with dynamic data later
              },
              {
                id: 'topic2',
                label: 'Topic 2',
                description: 'Coming soon',
                icon: <BookOpen size={24} />,
                progress: 25, // placeholder – this will be replaced with dynamic data later
              },
              {
                id: 'topic3',
                label: 'Topic 3',
                description: 'Coming soon',
                icon: <BookOpen size={24} />,
                progress: 8, // placeholder – this will be replaced with dynamic data later
              },
              {
                id: 'topic4',
                label: 'Topic 4',
                description: 'Coming soon',
                icon: <BookOpen size={24} />,
                progress: 2, // placeholder – this will be replaced with dynamic data later
              },
              {
                id: 'topic5',
                label: 'Topic 5',
                description: 'Coming soon',
                icon: <BookOpen size={24} />,
                progress: 0, // placeholder – this will be replaced with dynamic data later
              },
            ].map((topic) => (
              <div
                key={topic.id}
                onClick={() => setSelectedTopic(topic.id)}
                className="p-4 rounded-lg cursor-pointer transition-all bg-white dark:bg-dark-200 hover:bg-gray-50 dark:hover:bg-dark-100 border"
              >
                <h3 className="font-medium mb-1">{topic.label}</h3>
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                  {topic.description}
                </p>
                {/* Data bar showing completion (hardcoded to 65% for now) */}
                <div className="relative h-3 bg-gray-200 dark:bg-gray-700 rounded">
                  <div
                    className="absolute top-0 left-0 h-full rounded bg-emerald-500 dark:bg-emerald-400"
                    style={{ width: `${topic.progress}%` }}
                  ></div>
                </div>
                <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                  {topic.progress}% Complete
                </p>
              </div>
            ))}
          </div>
        </div>
      );
    } else {
      // Lessons list view for the selected topic
      const topics = [
        {
          id: 'alphabet',
          label: 'Alphabet',
          description: 'Learn Arabic letters and pronunciation',
          icon: <AlignLeft size={24} />,
          lessons: lessons,
        },
        {
          id: 'topic2',
          label: 'Topic 2',
          description: 'Coming soon',
          icon: <BookOpen size={24} />,
          lessons: [],
        },
        {
          id: 'topic3',
          label: 'Topic 3',
          description: 'Coming soon',
          icon: <BookOpen size={24} />,
          lessons: [],
        },
        {
          id: 'topic4',
          label: 'Topic 4',
          description: 'Coming soon',
          icon: <BookOpen size={24} />,
          lessons: [],
        },
      ];
      const currentTopic = topics.find((topic) => topic.id === selectedTopic);
      const topicLessons = currentTopic?.lessons || [];
      return (
        <div className="p-4">
          <button
            onClick={() => setSelectedTopic(null)}
            className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
          >
            ← Back to Topics
          </button>
          <h2 className="text-2xl font-bold mb-6">{currentTopic?.label}</h2>
          {loading && (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="w-8 h-8 animate-spin text-emerald-600" />
            </div>
          )}
          {error && (
            <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 p-4 rounded-lg mb-6">
              {error}
            </div>
          )}
          {topicLessons.length > 0 ? (
            <div className="grid grid-cols-1 gap-4">
              {topicLessons.map((lesson) => (
                <div
                  key={lesson.id}
                  className="bg-white dark:bg-dark-100 p-4 rounded-lg border border-gray-200 dark:border-dark-300 hover:border-emerald-500 dark:hover:border-emerald-500 transition-colors cursor-pointer"
                  onClick={() => handleLessonClick(lesson.id)}
                >
                  <div className="flex items-center justify-between group">
                    <div>
                      <h4 className="font-medium mb-1">{lesson.title}</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400">
                        {lesson.description}
                      </p>
                    </div>
                    <ChevronRight
                      className="text-gray-400 transform transition-transform group-hover:translate-x-1"
                      size={20}
                    />
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center text-gray-500 py-8">
              Lessons coming soon!
            </div>
          )}
        </div>
      );
    }
  }

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-2">Learn</h2>
      <p className="text-gray-600 dark:text-gray-400 mb-6">
        Master Levantine Arabic step by step
      </p>

      {/* Grid of Tappable Icons */}
      <div className="grid grid-cols-2 gap-4 mb-8">
        {tabs.map((tab) => (
          <div
            key={tab.id}
            onClick={() => {
              if (tab.id === 'lessons') {
                setShowLessons(true);
              } else if (setSubTab) {
                setSubTab(tab.id);
              }
            }}
            className={`
              p-4 rounded-lg cursor-pointer transition-all
              ${
                subTab === tab.id
                  ? 'bg-emerald-50 dark:bg-emerald-900/20 border-emerald-500'
                  : 'bg-white dark:bg-dark-200 hover:bg-gray-50 dark:hover:bg-dark-100'
              } border
            `}
          >
            <div className="flex items-center justify-center mb-3">
              <div
                className={`
                p-3 rounded-full
                ${
                  subTab === tab.id
                    ? 'bg-emerald-100 dark:bg-emerald-900/30 text-emerald-600 dark:text-emerald-400'
                    : 'bg-gray-100 dark:bg-dark-100 text-gray-600 dark:text-gray-400'
                }
              `}
              >
                {tab.icon}
              </div>
            </div>
            <h3 className="font-medium text-center mb-1">{tab.label}</h3>
            <p className="text-sm text-gray-600 dark:text-gray-400 text-center">
              {tab.description}
            </p>
          </div>
        ))}
      </div>

      {/* Progress Section - change this later to refer to history of which was the last topic worked on by the user */}
      <div className="mb-4 bg-white dark:bg-dark-200 rounded-lg p-4 border border-gray-200 dark:border-dark-100">
        <h3 className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">
          Pick up where you left off
        </h3>
        <div className="mb-2">
          <p className="font-medium">Letters</p>
        </div>
        <div className="relative pt-">
          <div className="flex mb-2 items-center justify-between">
            <div>
              <span className="text-xs font-semibold inline-block text-emerald-600">
                65%
              </span>
            </div>
          </div>
          <div className="overflow-hidden h-2 text-xs flex rounded bg-emerald-100 dark:bg-emerald-900/20">
            <div
              style={{ width: '65%' }}
              className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-emerald-500"
            ></div>
          </div>
        </div>
      </div>

      <div className="space-y-3">
        <button className="w-full py-3 px-4 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors">
          Continue Learning
        </button>
        <button className="w-full py-3 px-4 bg-white dark:bg-dark-100 border border-emerald-600 text-emerald-600 rounded-lg hover:bg-emerald-50 dark:hover:bg-dark-200 transition-colors">
          Quiz Me
        </button>
      </div>
    </div>
  );
};

export default Lessons;




=== FILE: src/components/LessonsTopics.tsx ===
// LessonsTopics.tsx
import React, { useState, useEffect } from 'react';
import { Loader2, ChevronRight, BookOpen, AlignLeft } from 'lucide-react';
import { fetchLessonTopics, fetchLessonsByLevel } from '../lib/lessonService';

import LessonDetailPage from './LessonDetailPage';

interface LessonsTopicsProps {
  selectedTopic: string | null;
  setSelectedTopic: (topic: string | null) => void;
  setSelectedLesson: (lesson: any) => void;
  setSubTab: (tab: string) => void;
}

const LessonsTopics: React.FC<LessonsTopicsProps> = ({
  selectedTopic,
  setSelectedTopic,
  setSelectedLesson,
  setSubTab,
}) => {
  const [topics, setTopics] = useState<any[]>([]);
  const [lessons, setLessons] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedLessonId, setSelectedLessonId] = useState<string | null>(null);

  useEffect(() => {
    async function loadTopics() {
      try {
        const data = await fetchLessonTopics();

        // Sort by level ascending
        const sorted = data.sort((a: any, b: any) => a.level - b.level);

        const mapped = sorted.map((topic: any) => ({
          id: topic.level.toString(), // for use in routing
          label: topic.label,
          description: topic.description,
          icon:
            topic.label.toLowerCase() === 'alphabet' ? (
              <AlignLeft size={24} />
            ) : (
              <BookOpen size={24} />
            ),
          progress: 65, // placeholder for now
          type: topic.label,
        }));

        setTopics(mapped);
      } catch (err) {
        console.error('Failed to load topics:', err);
      }
    }

    loadTopics();
  }, []);

  useEffect(() => {
    if (selectedTopic) {
      async function loadLessons() {
        setLoading(true);
        setError(null);
        try {
          const topicMeta = topics.find((t) => t.id === selectedTopic);
          const level = parseInt(selectedTopic ?? '', 10);
          const lessonsData = await fetchLessonsByLevel(level);

          setLessons(lessonsData);
        } catch (err) {
          console.error('Failed to fetch lessons:', err);
          setError('Failed to load lessons. Please try again later.');
        } finally {
          setLoading(false);
        }
      }
      loadLessons();
    }
  }, [selectedTopic, topics]);

  if (selectedLessonId) {
    return (
      <LessonDetailPage
        lessonId={selectedLessonId}
        onBack={() => setSelectedLessonId(null)}
      />
    );
  }

  // 1) If NO topic is selected, show the "Select a Topic" screen with "← Back to Learn"
  if (!selectedTopic) {
    return (
      <div className="p-4">
        <button
          onClick={() => setSubTab('landing')}
          className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
        >
          ← Back to Learn
        </button>
        <h2 className="text-2xl font-bold mb-6">Select a Topic</h2>
        <div className="grid grid-cols-1 gap-4">
          {topics.map((topic) => (
            <div
              key={topic.id}
              onClick={() => setSelectedTopic(topic.id)}
              className="
                p-4 rounded-lg cursor-pointer transition-colors
                bg-gray-50 dark:bg-[#2D2D2D]
                border border-gray-200 dark:border-[#121212]
                hover:!border-emerald-500 dark:hover:!border-emerald-500
              "
            >
              <h3 className="font-bold mb-1 text-gray-800 dark:text-white">
                {topic.label}
              </h3>
              <p className="text-sm mb-2 text-gray-600 dark:text-white">
                {topic.description}
              </p>
              {/* Progress Bar */}
              <div className="relative h-3 bg-gray-200 dark:bg-gray-700 rounded">
                <div
                  className="absolute top-0 left-0 h-full rounded bg-emerald-500 dark:bg-emerald-400"
                  style={{ width: `${topic.progress}%` }}
                ></div>
              </div>
              <p className="text-xs mt-1 text-gray-800 dark:text-white">
                {topic.progress}% Complete
              </p>
            </div>
          ))}
        </div>
      </div>
    );
  }

  // 2) Otherwise, show the list of lessons for the selected topic
  return (
    <div className="p-4">
      <button
        onClick={() => {
          setSelectedTopic(null);
          setLessons([]);
        }}
        className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Topics
      </button>
      <h2 className="text-2xl font-bold mb-6">
        Lessons for {topics.find((t) => t.id === selectedTopic)?.label}
      </h2>

      {loading && (
        <div className="flex items-center justify-center py-8">
          <Loader2 className="w-8 h-8 animate-spin text-emerald-600" />
        </div>
      )}

      {error && (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 p-4 rounded-lg mb-6">
          {error}
        </div>
      )}

      <div className="grid grid-cols-1 gap-4">
        {lessons.map((lesson) => (
          <div
            key={lesson.id}
            onClick={() => setSelectedLessonId(String(lesson.id))}
            className="
              bg-gray-50 dark:bg-[#2D2D2D] p-4 rounded-lg cursor-pointer transition-colors
              border border-gray-200 dark:border-[#121212]
              hover:!border-emerald-500 dark:hover:!border-emerald-500
            "
          >
            <div className="flex items-center justify-between group">
              <div>
                <h4 className="font-bold mb-1 text-gray-800 dark:text-white">
                  {lesson.title}
                </h4>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  {lesson.preview_text || lesson.description}
                </p>
              </div>
              <ChevronRight
                className="text-gray-400 transform transition-transform group-hover:translate-x-1"
                size={20}
              />
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default LessonsTopics;




=== FILE: src/components/LetterPointerAbove.tsx ===




=== FILE: src/components/Profile.tsx ===
import React from 'react';
import { User, MapPin, Star, Trophy, BookOpen, GraduationCap } from 'lucide-react';

const Profile = () => {
  // This would come from your user context/state management
  const userProfile = {
    name: "John Doe",
    country: "United States",
    level: 12,
    joinDate: "2024-01-15",
    totalXP: 2450,
    nextLevelXP: 3000,
    achievements: [
      { id: 1, name: "First Word", description: "Added your first word to your ocabulary", icon: BookOpen },
      { id: 2, name: "Grammar Master", description: "Completed all basic grammar lessons", icon: GraduationCap },
    ]
  };

  // Calculate level progress percentage
  const levelProgress = (userProfile.totalXP / userProfile.nextLevelXP) * 100;

  return (
    <div className="space-y-6">
      {/* Basic Info */}
      <div className="bg-white dark:bg-dark-200 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-dark-100">
        <div className="flex items-start justify-between">
          <div className="flex items-center">
            <div className="w-20 h-20 bg-emerald-100 dark:bg-emerald-900 rounded-full flex items-center justify-center">
              <User size={40} className="text-emerald-600 dark:text-emerald-400" />
            </div>
            <div className="ml-4">
              <h2 className="text-xl font-bold">{userProfile.name}</h2>
              <div className="flex items-center text-gray-600 dark:text-gray-400 mt-1">
                <MapPin size={16} className="mr-1" />
                <span>{userProfile.country}</span>
              </div>
              <div className="flex items-center mt-2">
                <Star size={16} className="text-yellow-400 mr-1" />
                <span className="font-medium">Level {userProfile.level}</span>
              </div>
            </div>
          </div>
          <button className="bg-emerald-100 dark:bg-emerald-900 text-emerald-600 dark:text-emerald-400 px-4 py-2 rounded-md hover:bg-emerald-200 dark:hover:bg-emerald-800">
            Edit Profile
          </button>
        </div>
      </div>

      {/* Level Progress */}
      <div className="bg-white dark:bg-dark-200 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-dark-100">
        <h3 className="font-bold mb-4">Level Progress</h3>
        <div className="mb-2 flex justify-between text-sm">
          <span>XP: {userProfile.totalXP}</span>
          <span>Next Level: {userProfile.nextLevelXP}</span>
        </div>
        <div className="w-full bg-gray-200 dark:bg-dark-100 rounded-full h-2.5">
          <div 
            className="bg-emerald-600 h-2.5 rounded-full"
            style={{ width: `${levelProgress}%` }}
          ></div>
        </div>
      </div>

      {/* Achievements */}
      <div className="bg-white dark:bg-dark-200 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-dark-100">
        <h3 className="font-bold mb-4">Achievements</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {userProfile.achievements.map(achievement => {
            const Icon = achievement.icon;
            return (
              <div key={achievement.id} className="flex items-start space-x-3 p-3 bg-gray-50 dark:bg-dark-100 rounded-lg">
                <div className="p-2 bg-emerald-100 dark:bg-emerald-900 rounded-full">
                  <Icon size={20} className="text-emerald-600 dark:text-emerald-400" />
                </div>
                <div>
                  <h4 className="font-medium">{achievement.name}</h4>
                  <p className="text-sm text-gray-600 dark:text-gray-400">{achievement.description}</p>
                </div>
              </div>
            );
          })}
        </div>
      </div>

      {/* Join Date */}
      <div className="text-center text-sm text-gray-600 dark:text-gray-400">
        Member since {new Date(userProfile.joinDate).toLocaleDateString()}
      </div>
    </div>
  );
};

export default Profile;



=== FILE: src/components/Progress.tsx ===
import React from 'react';
import { BookOpen, GraduationCap, Star, Trophy, Award, TrendingUp } from 'lucide-react';

const Progress = () => {
  // This would come from your user context/state management
  const progressData = {
    level: 12,
    totalXP: 2450,
    lessonsCompleted: 15,
    totalLessons: 30,
    grammarPoints: 8,
    totalGrammarPoints: 20,
    wordsLearned: 124,
    streak: 7,
    achievements: [
      { name: "Word Collector", progress: 124, target: 200 },
      { name: "Grammar Master", progress: 8, target: 20 },
      { name: "Lesson Champion", progress: 15, target: 30 }
    ]
  };

  const calculateProgress = (current: number, total: number) => {
    return (current / total) * 100;
  };

  return (
    <div className="space-y-6">
      {/* Level Overview */}
      <div className="bg-white dark:bg-dark-200 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-dark-100">
        <div className="flex items-center justify-between mb-4">
          <h3 className="font-bold text-lg">Current Level</h3>
          <div className="flex items-center">
            <Star size={20} className="text-yellow-400 mr-2" />
            <span className="font-bold text-xl">Level {progressData.level}</span>
          </div>
        </div>
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-emerald-50 dark:bg-emerald-900/20 p-4 rounded-lg">
            <div className="flex items-center text-emerald-600 dark:text-emerald-400 mb-2">
              <Trophy size={20} className="mr-2" />
              <span className="font-medium">Total XP</span>
            </div>
            <span className="text-2xl font-bold">{progressData.totalXP}</span>
          </div>
          <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
            <div className="flex items-center text-blue-600 dark:text-blue-400 mb-2">
              <TrendingUp size={20} className="mr-2" />
              <span className="font-medium">Day Streak</span>
            </div>
            <span className="text-2xl font-bold">{progressData.streak} days</span>
          </div>
        </div>
      </div>

      {/* Learning Progress */}
      <div className="bg-white dark:bg-dark-200 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-dark-100">
        <h3 className="font-bold mb-6">Learning Progress</h3>
        <div className="space-y-6">
          {/* Lessons Progress */}
          <div>
            <div className="flex justify-between mb-2">
              <div className="flex items-center">
                <BookOpen size={18} className="mr-2 text-emerald-600 dark:text-emerald-400" />
                <span className="font-medium">Lessons Completed</span>
              </div>
              <span>{progressData.lessonsCompleted}/{progressData.totalLessons}</span>
            </div>
            <div className="w-full bg-gray-200 dark:bg-dark-100 rounded-full h-2.5">
              <div 
                className="bg-emerald-600 h-2.5 rounded-full"
                style={{ width: `${calculateProgress(progressData.lessonsCompleted, progressData.totalLessons)}%` }}
              ></div>
            </div>
          </div>

          {/* Grammar Progress */}
          <div>
            <div className="flex justify-between mb-2">
              <div className="flex items-center">
                <GraduationCap size={18} className="mr-2 text-blue-600 dark:text-blue-400" />
                <span className="font-medium">Grammar Points Mastered</span>
              </div>
              <span>{progressData.grammarPoints}/{progressData.totalGrammarPoints}</span>
            </div>
            <div className="w-full bg-gray-200 dark:bg-dark-100 rounded-full h-2.5">
              <div 
                className="bg-blue-600 h-2.5 rounded-full"
                style={{ width: `${calculateProgress(progressData.grammarPoints, progressData.totalGrammarPoints)}%` }}
              ></div>
            </div>
          </div>

          {/* Words Learned */}
          <div>
            <div className="flex justify-between mb-2">
              <div className="flex items-center">
                <Award size={18} className="mr-2 text-purple-600 dark:text-purple-400" />
                <span className="font-medium">Words Learned</span>
              </div>
              <span>{progressData.wordsLearned}</span>
            </div>
            <div className="w-full bg-gray-200 dark:bg-dark-100 rounded-full h-2.5">
              <div 
                className="bg-purple-600 h-2.5 rounded-full"
                style={{ width: "62%" }}
              ></div>
            </div>
          </div>
        </div>
      </div>

      {/* Achievement Progress */}
      <div className="bg-white dark:bg-dark-200 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-dark-100">
        <h3 className="font-bold mb-4">Achievement Progress</h3>
        <div className="space-y-4">
          {progressData.achievements.map((achievement, index) => (
            <div key={index} className="bg-gray-50 dark:bg-dark-100 p-4 rounded-lg">
              <div className="flex justify-between mb-2">
                <span className="font-medium">{achievement.name}</span>
                <span>{achievement.progress}/{achievement.target}</span>
              </div>
              <div className="w-full bg-gray-200 dark:bg-dark-300 rounded-full h-2">
                <div 
                  className="bg-yellow-400 h-2 rounded-full"
                  style={{ width: `${calculateProgress(achievement.progress, achievement.target)}%` }}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Progress;



=== FILE: src/components/Pronunciation.tsx ===
import React, { useRef } from 'react';
import { Volume2 } from 'lucide-react';

// Sample pronunciation data with real audio URLs
const pronunciationData = [
  {
    id: 1,
    phrase: 'كيف حالك؟',
    transliteration: 'Kif ḥālak?',
    translation: 'How are you?',
    audioUrl: 'https://www.madinaharabic.com/Audio/L001/001_003.mp3',
    phonetic: 'The "k" is pronounced at the back of the throat'
  },
  {
    id: 2,
    phrase: 'صباح الخير',
    transliteration: 'Ṣabāḥ al-khayr',
    translation: 'Good morning',
    audioUrl: 'https://www.madinaharabic.com/Audio/L001/001_007.mp3',
    phonetic: 'The "kh" sound is made by constricting the throat'
  },
  {
    id: 3,
    phrase: 'شو بتحب تاكل؟',
    transliteration: 'Shū btiḥibb tākul?',
    translation: 'What do you like to eat?',
    audioUrl: 'https://www.madinaharabic.com/Audio/L001/001_009.mp3',
    phonetic: 'The "ḥ" is a breathy H sound from the throat'
  },
  {
    id: 4,
    phrase: 'وين رايح؟',
    transliteration: 'Wayn rāyiḥ?',
    translation: 'Where are you going?',
    audioUrl: 'https://www.madinaharabic.com/Audio/L001/001_011.mp3',
    phonetic: 'The "y" is pronounced like the "y" in "yes"'
  },
  {
    id: 5,
    phrase: 'بحكي عربي شوي',
    transliteration: 'Biḥkī ʿarabī shwayy',
    translation: 'I speak a little Arabic',
    audioUrl: 'https://www.madinaharabic.com/Audio/L001/001_013.mp3',
    phonetic: 'The "ʿ" (ayn) is a constriction deep in the throat'
  }
];

interface PronunciationProps {
  setSubTab?: (tab: string) => void;
}

const Pronunciation: React.FC<PronunciationProps> = ({ setSubTab }) => {
  const audioRefs = useRef<{ [key: number]: HTMLAudioElement }>({});

  const playAudio = (audioUrl: string, id: number) => {
    try {
      // Create audio element if it doesn't exist
      if (!audioRefs.current[id]) {
        const audio = new Audio(audioUrl);
        audioRefs.current[id] = audio;
        
        // Add error handling
        audio.onerror = (e) => {
          console.error("Audio failed to load:", e);
        };
      }
      
      // Play the audio
      const audioElement = audioRefs.current[id];
      audioElement.currentTime = 0; // Reset to start
      
      // Use the play() promise to catch errors
      const playPromise = audioElement.play();
      
      if (playPromise !== undefined) {
        playPromise.catch(error => {
          console.error("Error playing audio:", error);
        });
      }
    } catch (error) {
      console.error("Error in playAudio function:", error);
    }
  };

  return (
    <div className="p-4">
      <button
        onClick={() => setSubTab?.('landing')}
        className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Learn
      </button>

      <h2 className="text-xl font-bold mb-4">Pronunciation Guide</h2>
      
      <div className="space-y-4">
        {pronunciationData.map(item => (
          <div key={item.id} className="border border-gray-200 dark:border-dark-100 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-dark-100 dark:bg-dark-200">
            <div className="flex justify-between items-start mb-2">
              <div>
                <h3 className="text-lg font-bold">{item.phrase}</h3>
                <p className="text-sm text-gray-600 dark:text-gray-400">{item.transliteration}</p>
              </div>
              <button 
                onClick={() => playAudio(item.audioUrl, item.id)}
                className="p-2 rounded-full bg-emerald-100 text-emerald-600 hover:bg-emerald-200 active:bg-emerald-300"
              >
                <Volume2 size={18} />
              </button>
            </div>
            <p className="mb-2">{item.translation}</p>
            <div className="bg-yellow-50 dark:bg-yellow-900/20 p-2 rounded-md">
              <p className="text-sm text-gray-700 dark:text-gray-300">
                <span className="font-medium">Phonetic tip:</span> {item.phonetic}
              </p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Pronunciation;



=== FILE: src/components/Quiz.tsx ===
import React, { useState, useEffect, useRef } from 'react';
import { supabase } from '../lib/supabaseClient';
import { motion, AnimatePresence } from 'framer-motion';
import {
  AlertCircle,
  CheckCircle,
  XCircle,
  ArrowRight,
  RotateCcw,
  ChevronLeft,
} from 'lucide-react';
import { useAudio } from '../context/AudioContext';
import { Volume2 } from 'lucide-react';

interface QuizQuestion {
  id: string;
  level: number;
  order_num: number;
  question_text: string;
  question_type:
    | 'letter_to_sound'
    | 'audio_to_letter'
    | 'letter_to_pronunciation';
  audio_url?: string;
  arabic_letter?: string;
  correct_letter?: string; // from subquery on quiz_options
}

interface QuizOption {
  id: string;
  quiz_question_id: number;
  level: number;
  order_num: number;
  option_text: string;
  is_correct: boolean;
}

interface QuizProps {
  lesson: any;
  lessonId: string;
  quizData: any;
  onComplete: () => void;
  onBack: () => void;
  questionCount: number;
}

const Quiz: React.FC<QuizProps> = ({
  lesson,
  lessonId,
  quizData,
  onComplete,
  onBack,
  questionCount, // ← Add this here
}) => {
  const [questions, setQuestions] = useState<QuizQuestion[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [options, setOptions] = useState<QuizOption[]>([]);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [isAnswerSubmitted, setIsAnswerSubmitted] = useState(false);
  const [isAnswerCorrect, setIsAnswerCorrect] = useState<boolean | null>(null);
  const [score, setScore] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [answers, setAnswers] = useState<{ [key: string]: string }>({});
  const [audio, setAudio] = useState<HTMLAudioElement | null>(null);
  const audioRefs = useRef<{ [key: number]: HTMLAudioElement | null }>({});
  const hasPlayedAudio = useRef(false);
  const { audioData } = useAudio();
  const [quizAudio, setQuizAudio] = useState<Map<string, string>>(new Map());
  const [quizSounds, setQuizSounds] = useState<Map<string, string>>(new Map());

  const playAudio = (letter: string) => {
    const audioUrl = quizAudio.get(`${letter}.mp3`);
    if (audioUrl) {
      new Audio(audioUrl).play();
    }
  };

  console.log('Questions Array:', questions);
  console.log('Current Question Index:', currentQuestionIndex);
  console.log('Current Question Object:', questions[currentQuestionIndex]);

  const handlePlayAudio = (letter: string) => {
    const audioUrl = audioData[letter];
    if (!audioUrl) {
      console.warn(`No audio found for letter: ${letter}`);
      return;
    }
    const audioElement = new Audio(audioUrl);
    audioElement.crossOrigin = 'anonymous'; // ensures proper CORS handling
    audioElement.volume = 0.7;
    audioElement
      .play()
      .catch((err) => console.error(`Error playing audio for ${letter}:`, err));
  };

  // ⬇️ Fetch Quiz Letter Pronunciation Audio (Keep this as is)
  useEffect(() => {
    async function fetchQuizAudio() {
      const { data, error } = await supabase.storage
        .from('audio')
        .list('letter_pronunciation');

      if (error) {
        console.error('❌ Error fetching audio:', error);
        return;
      }

      const audioMap = new Map();

      data.forEach((file) => {
        console.log('📂 Found file:', file.name);

        // Extract letter name (removing prefixes like "01-", "02-")
        const filenameWithoutPrefix = file.name
          .replace(/^\d+-/, '')
          .replace('.mp3', '');

        console.log('🔍 Processed key:', filenameWithoutPrefix);

        audioMap.set(
          filenameWithoutPrefix, // Preserve case
          `https://mnfxcqpwvsprsrxmaxxt.supabase.co/storage/v1/object/public/audio/letter_pronunciation/${file.name}`
        );
      });

      console.log('✅ Final Audio Map:', audioMap);
      setQuizAudio(audioMap);
    }

    fetchQuizAudio();
  }, []);

  // ⬇️ Fetch Correct/Incorrect Feedback Sounds (Newly Added)
  useEffect(() => {
    async function fetchSounds() {
      const soundFiles = {
        correct:
          'https://mnfxcqpwvsprsrxmaxxt.supabase.co/storage/v1/object/public/audio/SFX/correct.mp3',
        incorrect:
          'https://mnfxcqpwvsprsrxmaxxt.supabase.co/storage/v1/object/public/audio/SFX/incorrect.mp3',
      };

      const soundMap = new Map();

      for (const [key, url] of Object.entries(soundFiles)) {
        try {
          const response = await fetch(url, { mode: 'cors' });
          if (!response.ok)
            throw new Error(
              `Failed to fetch ${key} sound: ${response.statusText}`
            );

          const audioBlob = await response.blob();
          const blobUrl = URL.createObjectURL(audioBlob); // ✅ Store a Blob URL instead of an `Audio` object
          soundMap.set(key, blobUrl);
        } catch (error) {
          console.error(`Error preloading ${key} sound:`, error);
        }
      }

      setQuizSounds(soundMap);
    }

    fetchSounds();
  }, []);

  useEffect(() => {
    const fetchOptionsForCurrentQuestion = async () => {
      if (questions.length === 0 || currentQuestionIndex >= questions.length) {
        console.warn('⚠️ No valid question found!');
        return;
      }

      const currentQuizId = questions[currentQuestionIndex]?.id;
      console.log(
        '🔍 DEBUG: Fetching quiz options for new question ID:',
        currentQuizId
      );

      if (!currentQuizId) return;

      const { data: optionData, error: optionError } = await supabase
        .from('quiz_options')
        .select('*')
        .eq('quiz_question_id', currentQuizId);

      if (optionError) {
        console.error('❌ Supabase Option Fetch Error:', optionError);
        setError('Error fetching quiz options.');
        return;
      }

      console.log('✅ Successfully fetched new quiz options:', optionData);
      setOptions(shuffleArray(optionData as QuizOption[]));
    };

    fetchOptionsForCurrentQuestion();
  }, [currentQuestionIndex, questions]);
  useEffect(() => {
    console.log('✅ Debug: quizSounds Map', quizSounds);
  }, [quizSounds]);

  useEffect(() => {
    if (questions.length > 0 && options.length > 0 && !hasPlayedAudio.current) {
      const currentQuestion = questions[currentQuestionIndex];

      // 🚫 Skip autoplay if it's a 'letter_to_pronunciation' question
      if (currentQuestion.question_type === 'letter_to_pronunciation') {
        return;
      }

      const correctOption = options.find(
        (opt) =>
          opt.quiz_question_id === Number(currentQuestion.id) && opt.is_correct
      );

      if (correctOption) {
        const key = correctOption.option_text?.trim();
        const audioUrl = quizAudio.get(key || '') || audioData[key || ''];

        if (audioUrl) {
          const audioElement = new Audio(audioUrl);
          audioElement.crossOrigin = 'anonymous';
          audioElement.volume = 0.7;
          audioElement
            .play()
            .then(() => {
              hasPlayedAudio.current = true;
            })
            .catch((err) => {
              console.warn('🔇 Failed to autoplay audio:', err);
            });
        } else {
          console.warn('⚠️ No audio file found for:', key);
        }
      }
    }
  }, [currentQuestionIndex, questions, options, quizAudio, audioData]);

  useEffect(() => {
    fetchQuizData();
  }, [lessonId]);

  useEffect(() => {
    console.log('🔍 DEBUG: Current state of options:', options);
  }, [options]);

  useEffect(() => {
    if (
      questions.length > 0 &&
      questions[currentQuestionIndex]?.question_type === 'audio_to_letter'
    ) {
      const currentQuestion = questions[currentQuestionIndex];
      if (currentQuestion?.audio_url) {
        console.log(
          '🔊 Playing audio for audio_to_letter question:',
          currentQuestion.audio_url
        );
        const audioElement = new Audio(currentQuestion.audio_url);
        audioElement.volume = 0.7;
        audioElement
          .play()
          .catch((err) => console.error('Error playing audio:', err));
        setAudio(audioElement);
      }
    }
  }, [currentQuestionIndex, questions]);

  const shuffleArray = (array: any[]) => {
    return array
      .map((value) => ({ value, sort: Math.random() }))
      .sort((a, b) => a.sort - b.sort)
      .map(({ value }) => value);
  };

  const fetchQuizData = async () => {
    try {
      setLoading(true);
      setError(null);

      if (
        !lesson ||
        lesson.level === undefined ||
        lesson.order_num === undefined
      ) {
        const msg = 'Lesson is missing required fields (level and order_num).';
        console.warn('⚠️', msg, lesson);
        setError(msg);
        setLoading(false);
        return;
      }

      console.log(
        '🔍 DEBUG: Fetching quiz data for:',
        lesson.level,
        lesson.order_num
      );

      // Fetch questions along with correct answers from quiz_options (subquery)
      const { data: quizQuestions, error: quizError } = await supabase
        .from('quiz_questions')
        .select(
          `
          id,
          level,
          order_num,
          question_text,
          question_type,
          audio_url,
          arabic_letter,
          quiz_options (option_text, is_correct) 
        `
        )
        .eq('level', lesson.level)
        .eq('order_num', lesson.order_num)
        .limit(100); // Adjust limit if necessary

      if (quizError) {
        console.error('❌ Quiz Fetch Error:', quizError);
        setError('Error fetching quiz questions.');
        return;
      }

      if (!quizQuestions || quizQuestions.length === 0) {
        setError('No quiz questions found for this lesson.');
        return;
      }

      console.log('✅ Fetched quiz questions:', quizQuestions);

      // Process questions to include the correct answer
      const processedQuestions = quizQuestions.map((question) => ({
        ...question,
        correctAnswer:
          question.quiz_options?.find((opt) => opt.is_correct)?.option_text ||
          'Unavailable',
      }));

      // ✅ Shuffle before slicing based on user selection
      const shuffled = shuffleArray(processedQuestions);
      setQuestions(shuffled.slice(0, questionCount));

      console.log(
        '🎯 Processed Questions with Correct Answers:',
        processedQuestions
      );
    } catch (err) {
      setError('Failed to load quiz. Please try again.');
      console.error('❌ Error fetching quiz data:', err);
    } finally {
      setLoading(false);
    }
  };

  // Filter options for the current question by matching quiz_question_id.
  const getCurrentOptions = () => {
    console.log('🟢 Questions array:', questions);
    console.log('🟡 Current Question Index:', currentQuestionIndex);
    console.log('🔵 Current Question Object:', questions[currentQuestionIndex]);

    const currentQuestion = questions[currentQuestionIndex];
    if (!currentQuestion) {
      console.error('❌ No current question found!');
      return [];
    }

    return options.filter(
      (option) => String(option.quiz_question_id) === String(currentQuestion.id)
    );
  };

  const handleAnswerSelect = (answer: string) => {
    if (isAnswerSubmitted) return;
    setSelectedAnswer(answer);
  };

  const handleReplayAudio = () => {
    const currentQuestion = questions[currentQuestionIndex];
    const correctOption = options.find((option) => option.is_correct);

    if (!correctOption) {
      console.warn('⚠ No correct option found!');
      return;
    }

    const key = correctOption.option_text?.trim();
    const fallbackAudioUrl = quizAudio.get(key || '');

    // Use quizAudio map first
    if (fallbackAudioUrl) {
      console.log(`🔊 Replaying from quizAudio: ${fallbackAudioUrl}`);
      const audioElement = new Audio(fallbackAudioUrl);
      audioElement.crossOrigin = 'anonymous';
      audioElement.volume = 0.7;
      audioElement
        .play()
        .catch((err) => console.error(`Error playing fallback audio:`, err));
      return;
    }

    // Fall back to audioData map (if that’s what you're using elsewhere)
    const audioUrl = audioData[key || ''];
    if (audioUrl) {
      console.log(`🔊 Replaying from audioData: ${audioUrl}`);
      const audioElement = new Audio(audioUrl);
      audioElement.crossOrigin = 'anonymous';
      audioElement.volume = 0.7;
      audioElement
        .play()
        .catch((err) =>
          console.error(`Error playing audio from audioData:`, err)
        );
    } else {
      console.warn('⚠ No audio available for this question!');
    }
  };

  const handleAnswerSubmit = async () => {
    if (!selectedAnswer || isAnswerSubmitted) return;

    const currentQuestion = questions[currentQuestionIndex];
    if (!currentQuestion) {
      console.error('No current question found.');
      return;
    }

    // Check if answer is correct
    const correctOption = options.find((option) => option.is_correct);
    const isCorrect = selectedAnswer === correctOption?.option_text;
    setIsAnswerCorrect(isCorrect);

    setAnswers((prev) => ({
      ...prev,
      [currentQuestion.id]: selectedAnswer,
    }));

    if (isCorrect) {
      setScore((prev) => prev + 1);
    }

    setIsAnswerSubmitted(true);

    // ✅ Play Correct/Incorrect Sound from Preloaded Blob URL
    const soundUrl = quizSounds.get(isCorrect ? 'correct' : 'incorrect');
    if (soundUrl) {
      const audioElement = new Audio(soundUrl);
      audioElement.volume = 0.05;
      audioElement
        .play()
        .catch((err) => console.error('Error playing feedback sound:', err));
    } else {
      console.warn('⚠️ Sound effect not found!');
    }
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      const nextIndex = currentQuestionIndex + 1;
      console.log('➡ Moving to next question:', nextIndex + 1);
      setCurrentQuestionIndex(nextIndex);
      setSelectedAnswer(null);
      setIsAnswerSubmitted(false);
      hasPlayedAudio.current = false;
    } else {
      console.log('🎉 Quiz Completed!');
      setQuizCompleted(true);
    }
  };

  const handleRetry = () => {
    setCurrentQuestionIndex(0);
    setSelectedAnswer(null);
    setIsAnswerSubmitted(false);
    setScore(0);
    setQuizCompleted(false);
    setAnswers({});
    fetchQuizData();
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-emerald-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 bg-red-50 dark:bg-red-900/20 rounded-lg text-red-700 dark:text-red-400">
        <div className="flex items-center">
          <AlertCircle className="w-5 h-5 mr-2" />
          <p>{error}</p>
        </div>
      </div>
    );
  }

  if (quizCompleted) {
    const finalScore = (score / questions.length) * 100;
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="p-6 bg-white dark:bg-dark-200 rounded-lg shadow-sm"
      >
        <h2 className="text-2xl font-bold mb-4">Quiz Complete!</h2>
        <div className="mb-6">
          <div className="text-4xl font-bold text-center mb-2">
            {finalScore}%
          </div>
          <div className="text-center text-gray-600 dark:text-gray-400">
            You got {score} out of {questions.length} questions correct
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
          {questions.map((question, index) => {
            const correctAnswer = question.correctAnswer ?? 'Unavailable';
            const userAnswer = answers[question.id] ?? 'No answer given';
            const isCorrect =
              correctAnswer !== 'Unavailable' && correctAnswer === userAnswer;

            const isAudioToLetter =
              question.question_type === 'audio_to_letter';

            const questionPrompt = (() => {
              switch (question.question_type) {
                case 'letter_to_pronunciation':
                  return 'What sound does this letter make?';
                case 'letter_to_sound':
                  return 'Identify the correct pronunciation for the displayed letter.';
                case 'audio_to_letter':
                  return 'Listen to the audio and select the correct letter';
                default:
                  return 'Question';
              }
            })();

            const questionDisplay = (
              <>
                {question.question_type === 'audio_to_letter' && (
                  <span className="text-1xl font-bold">
                    {question.arabic_letter || ''}
                  </span>
                )}
                {(question.question_type === 'letter_to_sound' ||
                  question.question_type === 'letter_to_pronunciation') && (
                  <div className="flex justify-center">
                    <span className="text-4xl font-bold">
                      {question.arabic_letter || question.question_text || '—'}
                    </span>
                  </div>
                )}
              </>
            );

            return (
              <div
                key={question.id}
                className={`p-4 rounded-lg ${
                  isCorrect
                    ? 'bg-green-50 dark:bg-green-900/20 border border-green-600'
                    : 'bg-red-50 dark:bg-red-900/20 border border-red-600'
                }`}
              >
                <div className="flex items-center justify-between mb-2">
                  <span className="font-medium">Question {index + 1}</span>
                  {isCorrect ? (
                    <CheckCircle className="text-green-600 dark:text-green-400" />
                  ) : (
                    <XCircle className="text-red-600 dark:text-red-400" />
                  )}
                </div>

                <div className="text-base font-semibold text-gray-800 dark:text-gray-200 mb-1">
                  {questionPrompt}
                </div>

                {/* 🟢 Only for audio_to_letter: show "Audio was played" */}
                {isAudioToLetter && (
                  <div className="flex justify-center">
                    <p className="text-sm text-gray-500 italic mb-2">
                      Audio was played
                    </p>
                  </div>
                )}

                <div className="mb-3">{questionDisplay}</div>

                <p className="text-sm text-gray-600 dark:text-gray-400">
                  <strong>Correct answer:</strong> {correctAnswer}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  <strong>Your answer:</strong> {userAnswer}
                </p>
              </div>
            );
          })}
        </div>

        <div className="flex justify-between">
          <button
            onClick={onBack}
            className="flex items-center px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
          >
            <ChevronLeft className="w-4 h-4 mr-2" />
            Back to Lesson
          </button>
          <button
            onClick={handleRetry}
            className="flex items-center px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700"
          >
            <RotateCcw className="w-4 h-4 mr-2" />
            Try Again
          </button>
        </div>
      </motion.div>
    );
  }

  return (
    <div className="p-6 bg-white dark:bg-dark-200 rounded-lg shadow-sm">
      {/* New Back Button at the top */}
      <button
        onClick={onBack}
        className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Lesson
      </button>

      <div className="p-6 bg-white dark:bg-dark-200 rounded-lg shadow-sm">
        <div className="flex justify-between items-center mb-6">
          <div className="text-sm text-gray-600 dark:text-gray-400">
            Question {currentQuestionIndex + 1} of {questions.length}
          </div>
          <div className="text-sm font-medium">
            Score: {score}/{questions.length}
          </div>
        </div>
      </div>

      <AnimatePresence mode="wait">
        <motion.div
          key={currentQuestionIndex}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -20 }}
          className="space-y-6"
        >
          {/* For letter_to_sound, display the Arabic letter, letter_to_pronunciation, display the pronunciation and audio_to_letter, display the arabic letter  */}
          {/* Question prompt */}
          {questions[currentQuestionIndex]?.question_type ===
            'audio_to_letter' && (
            <div className="text-xl font-bold mb-4 text-center w-full">
              Which letter is this?
            </div>
          )}

          {questions[currentQuestionIndex]?.question_type ===
            'letter_to_sound' && (
            <div className="text-xl font-bold mb-4 text-center w-full">
              Which letter is this?
            </div>
          )}

          {questions[currentQuestionIndex]?.question_type ===
            'letter_to_pronunciation' && (
            <>
              {/* Prompt */}
              <div className="text-xl font-bold mb-4 text-center w-full">
                What sound does this letter make?
              </div>

              {/* Arabic letter and instruction */}
              <div className="flex flex-col items-center mb-4">
                <div className="text-5xl font-bold">
                  {questions[currentQuestionIndex]?.arabic_letter || ''}
                </div>
                <p className="text-gray-500 text-sm mt-4">
                  Select the correct pronunciation
                </p>
              </div>
            </>
          )}

          {questions[currentQuestionIndex]?.question_type ===
            'letter_to_sound' && (
            <div className="flex flex-col items-center mb-4">
              <div className="text-5xl font-bold">
                {questions[currentQuestionIndex]?.arabic_letter}
              </div>
              <p className="text-gray-500 text-sm mt-4">
                Select the correct letter name
              </p>
            </div>
          )}

          {questions[currentQuestionIndex]?.question_type ===
            'audio_to_letter' && (
            <div className="flex flex-col items-center mb-4">
              <audio
                ref={(element) => setAudio(element)}
                controls
                autoPlay
                className="hidden"
              >
                <source
                  src={questions[currentQuestionIndex]?.audio_url}
                  type="audio/mpeg"
                />
                Your browser does not support the audio element.
              </audio>
              <button
                onClick={handleReplayAudio}
                className="px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 mt-2"
              >
                🔊 Replay Audio
              </button>
            </div>
          )}

          <div className="grid grid-cols-2 gap-4">
            {getCurrentOptions().map((option) => {
              let buttonClass = 'p-6 rounded-lg border-2 transition-colors ';
              console.log(
                '✅ Options for Current Question:',
                getCurrentOptions()
              );

              if (isAnswerSubmitted) {
                // After submission, always highlight the correct option in green.
                if (option.is_correct) {
                  buttonClass +=
                    'bg-green-50 dark:bg-green-900/20 border-green-600 ';
                }
                // If the option is not correct but was selected, highlight it in red.
                else if (selectedAnswer === option.option_text) {
                  buttonClass += 'bg-red-50 dark:bg-red-900/20 border-red-600 ';
                }
                // Otherwise, use default styling.
                else {
                  buttonClass += 'border-gray-200 dark:border-dark-100 ';
                }
              } else {
                // Before submission, if the option is selected, use a selection highlight.
                if (selectedAnswer === option.option_text) {
                  buttonClass +=
                    'border-emerald-600 bg-emerald-50 dark:bg-emerald-900/20 ';
                } else {
                  buttonClass +=
                    'border-gray-200 dark:border-dark-100 hover:border-emerald-200 ';
                }
              }

              const playOptionAudio = (optionText: string | undefined) => {
                if (!optionText) {
                  console.error('🚨 Error: optionText is undefined!');
                  return;
                }

                const normalizedKey = optionText.trim(); // Keep original case

                console.log('🔍 Looking for audio:', normalizedKey); // Debugging

                const audioUrl = quizAudio.get(normalizedKey);

                if (audioUrl) {
                  console.log('🎵 Playing:', audioUrl);
                  const audioElement = new Audio(audioUrl);
                  audioElement.crossOrigin = 'anonymous'; // Handle CORS if needed
                  audioElement.volume = 0.7;
                  audioElement
                    .play()
                    .catch((err) =>
                      console.error(
                        `Error playing audio for ${optionText}:`,
                        err
                      )
                    );
                } else {
                  console.warn(`🚨 No audio found for option: ${optionText}`);
                  console.log(
                    '🔎 Available keys:',
                    Array.from(quizAudio.keys())
                  ); // Debugging
                }
              };

              return (
                <motion.button
                  key={option.id}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => {
                    if (!option.option_text) {
                      console.error(
                        '🚨 option.option_text is undefined!',
                        option
                      );
                      return;
                    }
                    handleAnswerSelect(option.option_text);
                    playOptionAudio(option.option_text);
                  }}
                  className={buttonClass}
                  disabled={isAnswerSubmitted}
                >
                  <div className="text-3xl text-center font-bold mb-2">
                    {option.option_text || '⚠️ Missing Option'}
                  </div>
                </motion.button>
              );
            })}
          </div>

          {isAnswerSubmitted ? (
            <>
              {/* Centered button */}
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                className="flex justify-center"
              >
                <button
                  onClick={handleNextQuestion}
                  className="flex items-center px-6 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700"
                >
                  {currentQuestionIndex === questions.length - 1 ? (
                    'Complete Quiz'
                  ) : (
                    <>
                      Next Question
                      <ArrowRight className="w-4 h-4 ml-2" />
                    </>
                  )}
                </button>
              </motion.div>
              {/* Feedback text appears below the button */}
              <div className="text-xl font-bold text-center mt-4">
                {isAnswerCorrect ? 'Correct!' : 'Incorrect'}
              </div>
            </>
          ) : (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              className="flex justify-center"
            >
              <button
                onClick={handleAnswerSubmit}
                disabled={!selectedAnswer}
                className="px-6 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
              >
                Submit Answer
              </button>
            </motion.div>
          )}
        </motion.div>
      </AnimatePresence>
    </div>
  );
};

export default Quiz;




=== FILE: src/components/ReviewCalendar.tsx ===
// src/components/ReviewCalendar.tsx
import React, { useState, useEffect, useMemo } from 'react';
import { supabase } from '../lib/supabaseClient';
import { ChevronLeft, ChevronRight, Loader2, AlertCircle } from 'lucide-react';
import {
  format,
  startOfMonth,
  endOfMonth,
  eachDayOfInterval,
  isSameDay,
  isToday,
  isPast,
} from 'date-fns';

// Use the Card type defined previously
import { Database } from '../types/supabase';
type Card = Database['public']['Tables']['cards']['Row'];

// Define a type for the data structure returned by the reviews fetch
interface Review {
  id: string; // review id
  card: {
    id: string;
    english: string;
    arabic: string;
    transliteration?: string | null;
  } | null; // card can be null if RLS prevents access or card deleted
  next_review_date: string | null;
}

interface ReviewCalendarProps {
  // Add any necessary props, like navigation handlers if needed later
  onCardClick?: (cardId: string) => void; // Optional handler if clicking card links to detail
  // Maybe add a prop to allow navigating to a study session for a specific day?
}

const ReviewCalendar: React.FC<ReviewCalendarProps> = ({ onCardClick }) => {
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [reviews, setReviews] = useState<Review[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedDay, setSelectedDay] = useState<Date | null>(null);

  // Calculate the start and end dates for the currently displayed month
  const startDate = startOfMonth(currentMonth);
  const endDate = endOfMonth(currentMonth);
  const daysInMonth = eachDayOfInterval({ start: startDate, end: endDate });

  // Fetch reviews for the current month + a buffer
  useEffect(() => {
    const fetchReviews = async () => {
      setLoading(true);
      setError(null);

      // Fetch reviews for ~1 month around the current view
      const fetchStartDate = startOfMonth(currentMonth);
      const fetchEndDate = endOfMonth(currentMonth);

      // Adjust range slightly to cover potential edge cases or see upcoming reviews
      // Let's fetch reviews due within the next 3 months from today for simplicity
      const today = new Date();
      const reviewRangeStart = new Date(
        today.getFullYear(),
        today.getMonth(),
        today.getDate() - 30 // Fetch some past due cards too? Or just future? Let's focus on future.
      );
      const reviewRangeEnd = new Date(
        today.getFullYear(),
        today.getMonth() + 3, // Fetch up to 3 months ahead
        today.getDate()
      );

      console.log(
        `Fetching reviews due between ${reviewRangeStart.toISOString()} and ${reviewRangeEnd.toISOString()}`
      );

      try {
        // Fetch reviews along with minimal card details
        const { data, error } = await supabase
          .from('reviews')
          .select(
            `
            id,
            next_review_date,
            card:cards!reviews_card_fk (
              id,
              english,
              arabic,
              transliteration
            )
          `
          )
          .gte('next_review_date', reviewRangeStart.toISOString()) // >= start of range
          .lte('next_review_date', reviewRangeEnd.toISOString()); // <= end of range

        if (error) {
          throw error;
        }

        // Filter out reviews where the card data is null (e.g. if RLS prevents access or card deleted)
        const validReviews = data
          ? data.filter((review) => review.card !== null)
          : [];
        setReviews(validReviews as Review[]);
        console.log('Fetched reviews:', validReviews);
      } catch (err: any) {
        console.error('Error fetching reviews:', err);
        setError('Failed to load review schedule.');
      } finally {
        setLoading(false);
      }
    };

    fetchReviews();
  }, [currentMonth]); // Refetch when the month changes

  const handlePrevMonth = () => {
    setSelectedDay(null); // Clear selected day
    setCurrentMonth(
      (prevMonth) =>
        new Date(prevMonth.getFullYear(), prevMonth.getMonth() - 1, 1)
    );
  };

  const handleNextMonth = () => {
    setSelectedDay(null); // Clear selected day
    setCurrentMonth(
      (prevMonth) =>
        new Date(prevMonth.getFullYear(), prevMonth.getMonth() + 1, 1)
    );
  };

  const handleDayClick = (day: Date) => {
    setSelectedDay(day);
  };

  // Filter reviews for the selected day
  const reviewsForSelectedDay = useMemo(() => {
    if (!selectedDay) return [];
    return reviews.filter(
      (review) =>
        review.next_review_date &&
        isSameDay(new Date(review.next_review_date), selectedDay)
    );
  }, [selectedDay, reviews]);

  // Group reviews by date for the current month view
  const reviewsByDay: { [key: string]: Review[] } = useMemo(() => {
    const grouped: { [key: string]: Review[] } = {};
    reviews.forEach((review) => {
      if (review.next_review_date) {
        const dateKey = format(new Date(review.next_review_date), 'yyyy-MM-dd');
        if (!grouped[dateKey]) {
          grouped[dateKey] = [];
        }
        grouped[dateKey].push(review);
      }
    });
    return grouped;
  }, [reviews]);

  // Determine the day of the week for the first day of the month (0 for Sunday, 6 for Saturday)
  const startingDayIndex = startDate.getDay(); // Sunday = 0, Monday = 1, ..., Saturday = 6

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-4 text-gray-800 dark:text-gray-100">
        Review Schedule
      </h2>

      {error && (
        <div className="mb-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 px-4 py-3 rounded-md flex items-start">
          <AlertCircle size={20} className="mr-2 mt-0.5 flex-shrink-0" />
          <p className="text-sm">{error}</p>
        </div>
      )}

      <div className="bg-white dark:bg-dark-200 rounded-lg shadow-sm border border-gray-200 dark:border-dark-100 p-6 mb-6">
        {/* Calendar Header */}
        <div className="flex justify-between items-center mb-4">
          <button
            onClick={handlePrevMonth}
            className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-dark-100"
          >
            <ChevronLeft size={20} />
          </button>
          <h3 className="text-lg font-bold">
            {format(currentMonth, 'MMMM yyyy')}
          </h3>
          <button
            onClick={handleNextMonth}
            className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-dark-100"
          >
            <ChevronRight size={20} />
          </button>
        </div>

        {/* Weekday Headers */}
        <div className="grid grid-cols-7 text-center text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">
          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (
            <div key={day}>{day}</div>
          ))}
        </div>

        {/* Calendar Grid */}
        <div className="grid grid-cols-7 gap-1">
          {/* Render empty cells for days before the 1st of the month */}
          {Array.from({ length: startingDayIndex }).map((_, index) => (
            <div key={`empty-${index}`} className="h-12 p-1"></div>
          ))}

          {/* Render days of the month */}
          {daysInMonth.map((day) => {
            const dayKey = format(day, 'yyyy-MM-dd');
            const dayReviews = reviewsByDay[dayKey] || [];
            const hasReviews = dayReviews.length > 0;
            const isSelected = selectedDay && isSameDay(day, selectedDay);
            const isPastDay = isPast(day) && !isToday(day);
            const isTodayDay = isToday(day);

            return (
              <div
                key={dayKey}
                className={`
                  h-16 flex flex-col items-center justify-start p-1 text-xs rounded-md cursor-pointer
                  border border-gray-200 dark:border-dark-100
                  ${
                    isPastDay
                      ? 'bg-gray-100 dark:bg-dark-300 text-gray-400'
                      : 'bg-gray-50 dark:bg-dark-100 hover:bg-gray-100 dark:hover:bg-dark-300'
                  }
                  ${
                    isSelected
                      ? 'bg-emerald-200 dark:bg-emerald-800 border-emerald-500'
                      : ''
                  }
                  ${isTodayDay ? 'border-emerald-500 border-2' : ''}
                `}
                onClick={() => handleDayClick(day)}
              >
                <span
                  className={`font-bold ${
                    isTodayDay ? 'text-emerald-700 dark:text-emerald-300' : ''
                  }`}
                >
                  {format(day, 'd')}
                </span>
                {hasReviews && (
                  <span className="mt-1 w-4 h-4 flex items-center justify-center bg-emerald-500 text-white rounded-full text-xs font-bold">
                    {dayReviews.length}
                  </span>
                )}
              </div>
            );
          })}
        </div>
        {loading && (
          <div className="flex items-center justify-center py-4">
            <Loader2 className="w-5 h-5 animate-spin text-emerald-600" />
            <span className="ml-2 text-gray-600 dark:text-gray-400 text-sm">
              Loading reviews...
            </span>
          </div>
        )}
      </div>

      {/* Details for Selected Day */}
      {selectedDay && (
        <div className="mt-6 bg-white dark:bg-dark-200 rounded-lg shadow-sm border border-gray-200 dark:border-dark-100 p-6">
          <h3 className="text-lg font-bold mb-4">
            Reviews Due on {format(selectedDay, 'PPP')}
          </h3>

          {reviewsForSelectedDay.length === 0 ? (
            <p className="text-gray-600 dark:text-gray-400">
              No cards scheduled for review on this day.
            </p>
          ) : (
            <ul className="space-y-3">
              {reviewsForSelectedDay.map((review) => (
                <li
                  key={review.id}
                  className="border border-gray-200 dark:border-dark-100 rounded-md p-3"
                >
                  {/* Display card details (English, Arabic, Transliteration) */}
                  {review.card ? (
                    <div className="flex justify-between items-center">
                      <div>
                        <p className="font-medium text-gray-900 dark:text-gray-100">
                          {review.card.english}
                        </p>
                        <p className="text-sm text-gray-700 dark:text-gray-300">
                          {review.card.arabic}
                        </p>
                        {review.card.transliteration && (
                          <p className="text-xs text-gray-600 dark:text-gray-400 italic">
                            {review.card.transliteration}
                          </p>
                        )}
                      </div>
                      {/* Add action buttons here later */}
                      {/*
                            <div className="flex space-x-2">
                                <button className="px-3 py-1 text-sm bg-emerald-100 rounded">Review Now</button>
                                <button className="px-3 py-1 text-sm bg-blue-100 rounded">Change Date</button>
                            </div>
                            */}
                    </div>
                  ) : (
                    <p className="text-red-600">Card details unavailable.</p>
                  )}
                </li>
              ))}
            </ul>
          )}
        </div>
      )}
    </div>
  );
};

export default ReviewCalendar;


=== FILE: src/components/Settings.tsx ===
import React, { useState, useEffect } from 'react';
import { Moon, Sun, Check } from 'lucide-react';

interface Tab {
  id: string;
  name: string;
  icon: string;
}

const availableTabs: Tab[] = [
  { id: 'daily', name: 'Daily Words', icon: '📅' },
  { id: 'wordbank', name: 'Vocabulary', icon: '📚' },
  { id: 'translate', name: 'Translate', icon: '🔄' },
  { id: 'dictionary', name: 'Dictionary', icon: '📖' },
  { id: 'alphabet', name: 'Alphabet', icon: '🔤' },
  { id: 'pronunciation', name: 'Pronunciation', icon: '🗣️' },
  { id: 'grammar', name: 'Grammar', icon: '📝' }
];

const Settings = () => {
  const [apiKey, setApiKey] = useState('');
  const [savedApiKey, setSavedApiKey] = useState(() => {
    return localStorage.getItem('openai_api_key') || '';
  });

  const saveApiKey = () => {
    if (apiKey) {
      localStorage.setItem('openai_api_key', apiKey);
      setSavedApiKey(apiKey);
      setApiKey('');
    }
  };

  const clearApiKey = () => {
    setApiKey('');
    setSavedApiKey('');
    localStorage.removeItem('openai_api_key');
  };

  const [isDarkMode, setIsDarkMode] = useState(() => {
    const saved = localStorage.getItem('darkMode');
    return saved ? JSON.parse(saved) : false;
  });

  const [selectedTabs, setSelectedTabs] = useState<string[]>(() => {
    const saved = localStorage.getItem('quickStartTabs');
    return saved ? JSON.parse(saved) : ['daily', 'wordbank', 'translate'];
  });

  useEffect(() => {
    localStorage.setItem('darkMode', JSON.stringify(isDarkMode));
    document.documentElement.classList.toggle('dark', isDarkMode);
  }, [isDarkMode]);

  useEffect(() => {
    localStorage.setItem('quickStartTabs', JSON.stringify(selectedTabs));
  }, [selectedTabs]);

  const toggleTab = (tabId: string) => {
    setSelectedTabs(prev => {
      if (prev.includes(tabId)) {
        return prev.filter(id => id !== tabId);
      }
      if (prev.length < 3) {
        return [...prev, tabId];
      }
      return prev;
    });
  };

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-6">Settings</h2>

      {/* Theme Settings */}
      <div className="mb-8 bg-white dark:bg-dark-200 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-dark-100 dark:shadow-black/10">
        <h3 className="font-bold mb-4">Theme</h3>
        <div className="flex items-center justify-between">
          <span className="text-gray-700 dark:text-gray-100">Dark Mode</span>
          <button
            onClick={() => setIsDarkMode(!isDarkMode)}
            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2 ${
              isDarkMode ? 'bg-emerald-600' : 'bg-gray-200'
            }`}
          >
            <span
              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                isDarkMode ? 'translate-x-6' : 'translate-x-1'
              }`}
            />
            {isDarkMode ? (
              <Moon size={12} className="absolute right-1 text-white" />
            ) : (
              <Sun size={12} className="absolute left-1 text-gray-400" />
            )}
          </button>
        </div>
      </div>

      {/* Quick Start Customization */}
      <div className="mb-8 bg-white dark:bg-dark-200 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-dark-100 dark:shadow-black/10">
        <h3 className="font-bold mb-4">Quick Start Customization</h3>
        <p className="text-sm text-gray-600 dark:text-gray-200 mb-4">
          Select up to three tabs to display in your Quick Start section
        </p>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
          {availableTabs.map(tab => (
            <button
              key={tab.id}
              onClick={() => toggleTab(tab.id)}
              className={`flex items-center justify-between p-3 rounded-lg border ${
                selectedTabs.includes(tab.id)
                  ? 'border-emerald-500 bg-emerald-50 dark:bg-emerald-900'
                  : 'border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              <div className="flex items-center">
                <span className="mr-2">{tab.icon}</span>
                <span className="font-medium">{tab.name}</span>
              </div>
              {selectedTabs.includes(tab.id) && (
                <Check size={18} className="text-emerald-600" />
              )}
            </button>
          ))}
        </div>
      </div>
      
      {/* OpenAI API Settings */}
      <div className="mb-8 bg-white dark:bg-dark-200 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-dark-100 dark:shadow-black/10">
        <h3 className="font-bold mb-4">OpenAI API Settings</h3>
        <p className="text-sm text-gray-600 dark:text-gray-200 mb-3">
          Enter your OpenAI API key to enable unlimited translations. Your key is stored locally in your browser.
        </p>
        <div className="flex mb-3">
          <input
            type="password"
            value={apiKey}
            onChange={(e) => setApiKey(e.target.value)}
            placeholder="sk-..."
            className="flex-1 p-2 border border-gray-300 dark:border-gray-600 dark:bg-dark-100 rounded-l-md focus:ring-emerald-500 focus:border-emerald-500 dark:text-gray-100 dark:placeholder-gray-500"
          />
          <button
            onClick={saveApiKey}
            className="bg-emerald-600 text-white px-3 rounded-r-md hover:bg-emerald-700"
            disabled={!apiKey}
          >
            <Check size={18} />
          </button>
        </div>
        {savedApiKey && (
          <div className="flex items-center justify-between">
            <span className="text-sm text-emerald-600">API key saved</span>
            <button
              onClick={clearApiKey}
              className="text-xs text-red-600 hover:text-red-800"
            >
              Clear API key
            </button>
          </div>
        )}
      </div>

      {/* Language Settings Placeholder */}
      <div className="mb-8 bg-white dark:bg-dark-200 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-dark-100 dark:shadow-black/10">
        <h3 className="font-bold mb-4">Language Settings</h3>
        <p className="text-gray-500 dark:text-gray-200 italic">
          Language settings will be available in a future update.
        </p>
      </div>

      {/* Notifications Placeholder */}
      <div className="bg-white dark:bg-dark-200 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-dark-100 dark:shadow-black/10">
        <h3 className="font-bold mb-4">Notifications</h3>
        <p className="text-gray-500 dark:text-gray-200 italic">
          Notification settings will be available in a future update.
        </p>
      </div>
    </div>
  );
};

export default Settings;



=== FILE: src/components/StudySelection.tsx ===
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabaseClient';

const StudySelection: React.FC = () => {
  const [decks, setDecks] = useState<{ id: string; name: string }[]>([]);
  const [selectedDecks, setSelectedDecks] = useState<Set<string>>(new Set());
  const [cardCount, setCardCount] = useState<number>(10);
  const navigate = useNavigate();

  useEffect(() => {
    async function fetchDecks() {
      const { data, error } = await supabase
        .from('decks')
        .select('id, name')
        .eq('archived', false)
        .order('created_at', { ascending: true });
      if (error) console.error(error);
      else setDecks(data as any);
    }
    fetchDecks();
  }, []);

  const toggleDeck = (id: string) => {
    const next = new Set(selectedDecks);
    next.has(id) ? next.delete(id) : next.add(id);
    setSelectedDecks(next);
  };

  const startStudy = () => {
    const params = new URLSearchParams();
    params.set('decks', Array.from(selectedDecks).join(','));
    params.set('count', String(cardCount));
    navigate(`/study/run?${params.toString()}`);
  };

  return (
    <div className="p-4 max-w-lg mx-auto bg-white dark:bg-dark-200">
      <button
        onClick={() => navigate('/flashcards')}
        className="mb-4 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Flashcard Decks
      </button>
      <h2 className="text-xl font-bold mb-4 text-gray-800 dark:text-gray-100">
        Study Session Setup
      </h2>
      <div className="mb-4">
        <label className="font-medium mb-2 block text-gray-700 dark:text-gray-300">
          Select Decks:
        </label>
        <div className="space-y-2">
          {decks.map((deck) => (
            <label key={deck.id} className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={selectedDecks.has(deck.id)}
                onChange={() => toggleDeck(deck.id)}
                className="form-checkbox text-emerald-600 focus:ring-emerald-500"
              />
              <span className="text-gray-900 dark:text-gray-100">
                {deck.name}
              </span>
            </label>
          ))}
        </div>
      </div>

      <div className="mb-6">
        <label className="font-medium mb-2 block text-gray-700 dark:text-gray-300">
          Number of Cards:
        </label>
        <input
          type="number"
          min={1}
          value={cardCount}
          onChange={(e) => setCardCount(Number(e.target.value))}
          className="w-24 p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-dark-100 text-gray-800 dark:text-gray-200"
        />
      </div>

      <button
        onClick={startStudy}
        disabled={selectedDecks.size === 0}
        className="w-full p-3 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:opacity-50"
      >
        Start
      </button>
    </div>
  );
};

export default StudySelection;


=== FILE: src/components/StudySession.tsx ===
import React, { useState, useEffect, useMemo } from 'react';
import { supabase } from '../lib/supabaseClient';
import { useLocation, useNavigate } from 'react-router-dom';
import CardView from './CardView';
import { AlertCircle } from 'lucide-react'; // ✅ Import AlertCircle

interface DueCard {
  id: string; // review id
  card: {
    id: string;
    fields: {
      english: string;
      arabic: string;
      transliteration?: string;
      clozeText?: string;
      imageUrl?: string;
    };
    audio_url?: string | null; // Added audio_url based on the query in logs
  };
  last_review_date: string;
  next_review_date: string;
  interval: number;
  ease_factor: number;
  repetition_count: number;
  reviews_count: number;
  quality_history: number[];
  // Add other review columns if needed later, based on schema
  streak?: number;
  avg_response_time?: number;
}

const StudySession: React.FC = () => {
  const navigate = useNavigate();
  const { search } = useLocation();
  const params = new URLSearchParams(search);
  const decks = params.get('decks')?.split(',') || [];
  const count = Number(params.get('count') || 10);

  const [dueCards, setDueCards] = useState<DueCard[]>([]);
  const [current, setCurrent] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null); // Add error state

  // Calculate the "due now" threshold timestamp once when the component mounts
  // for this specific set of URL parameters. This value will be stable.
  const dueThresholdTimestamp = useMemo(() => {
    console.log('Memoizing dueThresholdTimestamp'); // Debug log
    return new Date().toISOString();
  }, [decks.join(','), count]); // Recalculate if decks or count change

  // 1) Fetch due cards on mount or when decks/count change
  useEffect(() => {
    setError(null); // Clear previous errors
    async function loadDue() {
      console.log(
        `Attempting to fetch due cards for decks: ${decks.join(
          ','
        )} (count: ${count}) <= ${dueThresholdTimestamp}`
      ); // Debug log
      setLoading(true);

      console.log('DEBUG: Initiating Supabase fetch...'); // Add this log
      const { data, error } = await supabase
        .from('reviews') // Use the correct table name 'reviews'
        .select(
          `
          id,
          last_review_date,
          next_review_date,
          interval,
          ease_factor,
          repetition_count,
          reviews_count,
          quality_history,
          card:cards!reviews_card_fk (
            id,
            fields,
            audio_url
          )
        `
        )
        // Use the stable timestamp from useMemo
        .lte('next_review_date', dueThresholdTimestamp)
        .in('card.deck_id', decks)
        .limit(count)
        .order('next_review_date', { ascending: true });

      console.log('DEBUG: Supabase fetch attempt finished.'); // Add this log

      if (error) {
        console.error('Error fetching due cards:', error);
        setError('Failed to load cards for study session.'); // Set user-friendly error
        console.log('DEBUG: Error path taken, setting loading false.'); // Add this log
      } else {
        console.log('Successfully fetched due cards:', data); // Debug log
        // Filter out any potential null cards just in case
        setDueCards(
          (data || []).filter((card) => card.card !== null) as DueCard[]
        );
        if (data && data.length > 0) {
          setCurrent(0); // Reset to the first card if cards are loaded
        }
        console.log('DEBUG: Success path taken, setting loading false.'); // Add this log
      }
      setLoading(false); // This should run in finally, but putting here too for extra check
    }

    // Only fetch if decks are selected
    if (decks && decks.length > 0) {
      loadDue();
    } else {
      console.log('No decks selected for study session.');
      setDueCards([]);
      setLoading(false);
    }

    // Effect dependencies: decks and count.
    // dueThresholdTimestamp is already reactive to these via useMemo,
    // but React hooks best practices recommend including values used inside,
    // even if they are memoized based on other dependencies listed.
    // This ensures the effect "sees" the correct, stable timestamp for the current parameters.
  }, [decks.join(','), count, dueThresholdTimestamp]); // Updated dependencies

  // 2) Handle quality grading, run SM-2, update review, advance card
  const onQualitySelect = async (quality: number) => {
    // Removed cardId as it's available from current card
    const review = dueCards[current];
    if (!review) {
      console.error('No current review to grade.');
      return;
    }

    console.log(`Grading card ${review.card.id} with quality ${quality}`); // Debug log

    // call sm2_schedule RPC
    const { data: sched, error: rpcErr } = await supabase.rpc('calculate_sm2', {
      // Use calculate_sm2 as per SQL dump
      p_repetition_count: review.repetition_count,
      p_ease_factor: review.ease_factor,
      p_interval: review.interval,
      p_quality: quality,
    });

    if (rpcErr) {
      console.error('SM-2 RPC Error:', rpcErr);
      setError('Failed to update review stats.'); // Set user-friendly error
      // Still advance card to avoid getting stuck? Or stop session?
      // For now, let's advance to not block the user.
      if (current < dueCards.length - 1) {
        setCurrent(current + 1);
      } else {
        navigate('/flashcards'); // Session complete
      }
      return;
    }

    console.log('SM-2 calculation result:', sched); // Debug log

    const { next_interval, next_ease_factor, next_repetition_count } = (
      sched as any
    )[0]; // Match RPC function output names

    // update the review row
    const { error: updateError } = await supabase
      .from('reviews')
      .update({
        last_review_date: new Date().toISOString(),
        next_review_date: new Date(
          Date.now() + next_interval * 86400000 // Use next_interval
        ).toISOString(),
        interval: next_interval, // Use next_interval
        ease_factor: next_ease_factor, // Use next_ease_factor
        repetition_count: next_repetition_count, // Use next_repetition_count
        reviews_count: review.reviews_count + 1,
        quality_history: [...review.quality_history, quality],
      })
      .eq('id', review.id);

    if (updateError) {
      console.error('Supabase update error:', updateError);
      setError('Failed to save review progress.'); // Set user-friendly error
      // Advance card anyway
    } else {
      console.log('Review updated successfully. Moving to next card.'); // Debug log
    }

    // move to next card or finish
    if (current < dueCards.length - 1) {
      setCurrent(current + 1);
    } else {
      console.log('Session complete!'); // Debug log
      navigate('/flashcards'); // Go back to flashcard list or decks page
    }
  };

  // Render loading, error, or content
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px] p-6">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-emerald-600"></div>
        <p className="ml-4 text-gray-700 dark:text-gray-300">
          Loading study session...
        </p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 bg-red-50 dark:bg-red-900/20 rounded-lg text-red-700 dark:text-red-400">
        <div className="flex items-center">
          <AlertCircle className="w-5 h-5 mr-2" />
          <p>{error}</p>
        </div>
        <button
          onClick={() => navigate('/study')} // Go back to selection
          className="mt-4 px-4 py-2 bg-gray-300 dark:bg-gray-700 text-black dark:text-white rounded-md hover:bg-gray-400 dark:hover:bg-gray-600"
        >
          Go back
        </button>
      </div>
    );
  }

  // Add a function to force load more cards
  const forceLoadMoreCards = async () => {
    setError(null); // Clear previous errors
    setLoading(true);

    console.log(
      `Attempting to force fetch next ${count} cards for decks: ${decks.join(
        ','
      )}`
    );

    try {
      const { data, error } = await supabase
        .from('reviews')
        .select(
          `
          id,
          last_review_date,
          next_review_date,
          interval,
          ease_factor,
          repetition_count,
          reviews_count,
          quality_history,
          card:cards!reviews_card_fk (
            id,
            fields,
            audio_url,
            english,
            arabic,
            transliteration,
            image_url,
            tags,
            type,
            layout,
            metadata,
            review_stats_id
          )
        `
        )
        .in('card.deck_id', decks)
        .limit(count)
        .order('next_review_date', { ascending: true }); // Order by next_review_date to get 'most due' first

      if (error) {
        console.error('Error force fetching cards:', error);
        setError('Failed to load more cards.');
      } else {
        console.log('Successfully force fetched cards:', data);
        const validCards = (data || []).filter(
          (review) => review.card !== null
        );
        setDueCards(validCards as DueCard[]);
        if (validCards.length > 0) {
          setCurrent(0); // Start session with the first card
        } else {
          setError('No more cards found in the selected decks.');
        }
      }
    } catch (err) {
      console.error('Caught error during force fetch:', err);
      setError('An unexpected error occurred while fetching more cards.');
    } finally {
      setLoading(false);
    }
  };

  if (dueCards.length === 0) {
    return (
      <div className="p-6 text-center text-gray-700 dark:text-gray-300">
        <p className="mb-4">
          No cards are due for review in the selected decks right now.
        </p>
        {/* Add the "Force Review" button */}
        <button
          onClick={forceLoadMoreCards}
          className="mb-4 mr-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700" // Use a different color
        >
          Force Review Next {count} Cards
        </button>
        <button
          onClick={() => navigate('/study')} // Go back to selection
          className="px-4 py-2 bg-emerald-600 text-white rounded-md hover:bg-emerald-700"
        >
          Select different decks
        </button>
      </div>
    );
  }

  // Display the current card
  const currentCard = dueCards[current].card;
  if (!currentCard) {
    return (
      <div className="p-6 text-center text-red-600">
        <p>Error: Could not load card details for the current review.</p>
        <button
          onClick={() => navigate('/study')} // Go back to selection
          className="mt-4 px-4 py-2 bg-gray-300 dark:bg-gray-700 text-black dark:text-white rounded-md hover:bg-gray-400 dark:hover:bg-gray-600"
        >
          End Session
        </button>
      </div>
    );
  }

  return (
    <div className="p-6">
      {/* Pass the correct card object to CardView */}
      <CardView
        card={currentCard} // Pass the nested card object
        onQualitySelect={(quality) => onQualitySelect(quality)} // Pass the quality
      />
      <p className="mt-4 text-center text-gray-700 dark:text-gray-300">
        Card {current + 1} of {dueCards.length}
      </p>
    </div>
  );
};

export default StudySession;


=== FILE: src/components/TaskForm.tsx ===
import React, { useState } from 'react';
import { supabase } from '../lib/supabaseClient';
import { PlusCircle, Loader2 } from 'lucide-react';

interface TaskFormProps {
  onSuccess?: () => void;
}

const TaskForm: React.FC<TaskFormProps> = ({ onSuccess }) => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [budget, setBudget] = useState('');
  const [skills, setSkills] = useState('');
  const [deadline, setDeadline] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');

    try {
      const { data, error: submitError } = await supabase
        .from('tasks')
        .insert([
          {
            title,
            description,
            budget: parseFloat(budget),
            required_skills: skills.split(',').map(s => s.trim()),
            deadline: new Date(deadline).toISOString(),
          }
        ])
        .select();

      if (submitError) throw submitError;

      // Reset form
      setTitle('');
      setDescription('');
      setBudget('');
      setSkills('');
      setDeadline('');
      
      if (onSuccess) onSuccess();
    } catch (err) {
      setError('Failed to create task. Please try again.');
      console.error('Error creating task:', err);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {error && (
        <div className="bg-red-50 text-red-700 p-3 rounded-md">
          {error}
        </div>
      )}

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Title
        </label>
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md"
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Description
        </label>
        <textarea
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md"
          rows={4}
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Budget ($)
        </label>
        <input
          type="number"
          value={budget}
          onChange={(e) => setBudget(e.target.value)}
          className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md"
          min="0"
          step="0.01"
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Required Skills (comma-separated)
        </label>
        <input
          type="text"
          value={skills}
          onChange={(e) => setSkills(e.target.value)}
          className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md"
          placeholder="React, TypeScript, Node.js"
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
          Deadline
        </label>
        <input
          type="datetime-local"
          value={deadline}
          onChange={(e) => setDeadline(e.target.value)}
          className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md"
          required
        />
      </div>

      <button
        type="submit"
        disabled={isSubmitting}
        className="w-full bg-emerald-600 text-white py-2 px-4 rounded-md hover:bg-emerald-700 disabled:bg-emerald-400 flex items-center justify-center"
      >
        {isSubmitting ? (
          <>
            <Loader2 size={18} className="mr-2 animate-spin" />
            Creating Task...
          </>
        ) : (
          <>
            <PlusCircle size={18} className="mr-2" />
            Create Task
          </>
        )}
      </button>
    </form>
  );
};

export default TaskForm;



=== FILE: src/components/TaskList.tsx ===
import React, { useEffect, useState } from 'react';
import { supabase } from '../lib/supabaseClient';
import { Calendar, DollarSign, Clock, ChevronRight } from 'lucide-react';

interface Task {
  id: string;
  title: string;
  description: string;
  budget: number;
  required_skills: string[];
  deadline: string;
  created_at: string;
  status: 'open' | 'assigned' | 'completed';
}

const TaskList: React.FC = () => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchTasks();

    // Subscribe to changes
    const subscription = supabase
      .channel('tasks_channel')
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'tasks' 
      }, () => {
        fetchTasks();
      })
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  const fetchTasks = async () => {
    try {
      const { data, error: fetchError } = await supabase
        .from('tasks')
        .select('*')
        .order('created_at', { ascending: false });

      if (fetchError) throw fetchError;

      setTasks(data || []);
    } catch (err) {
      setError('Failed to fetch tasks');
      console.error('Error fetching tasks:', err);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 text-red-700 p-4 rounded-md">
        {error}
      </div>
    );
  }

  if (tasks.length === 0) {
    return (
      <div className="text-center py-8 text-gray-500">
        No tasks available. Be the first to post a task!
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {tasks.map((task) => (
        <div 
          key={task.id} 
          className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:border-emerald-500 transition-colors"
        >
          <div className="flex justify-between items-start mb-3">
            <h3 className="text-lg font-semibold">{task.title}</h3>
            <span className={`
              px-2 py-1 rounded-full text-sm
              ${task.status === 'open' ? 'bg-green-100 text-green-800' : 
                task.status === 'assigned' ? 'bg-blue-100 text-blue-800' :
                'bg-gray-100 text-gray-800'}
            `}>
              {task.status.charAt(0).toUpperCase() + task.status.slice(1)}
            </span>
          </div>

          <p className="text-gray-600 dark:text-gray-400 mb-4 line-clamp-2">
            {task.description}
          </p>

          <div className="flex flex-wrap gap-2 mb-4">
            {task.required_skills.map((skill, index) => (
              <span 
                key={index}
                className="bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 px-2 py-1 rounded-md text-sm"
              >
                {skill}
              </span>
            ))}
          </div>

          <div className="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400">
            <div className="flex items-center">
              <DollarSign size={16} className="mr-1" />
              ${task.budget.toFixed(2)}
            </div>
            <div className="flex items-center">
              <Calendar size={16} className="mr-1" />
              {new Date(task.deadline).toLocaleDateString()}
            </div>
            <div className="flex items-center">
              <Clock size={16} className="mr-1" />
              {new Date(task.created_at).toLocaleDateString()}
            </div>
            <button className="flex items-center text-emerald-600 hover:text-emerald-700">
              View Details
              <ChevronRight size={16} className="ml-1" />
            </button>
          </div>
        </div>
      ))}
    </div>
  );
};

export default TaskList;



=== FILE: src/components/Translate.tsx ===
import React, { useState, useRef, useEffect } from 'react';
import { Send, Volume2, Settings, X, Check, Loader2 } from 'lucide-react';
import OpenAI from 'openai';

// Define the translation result type
interface TranslationResult {
  id: number;
  english: string;
  context: string;
  arabic: string;
  arabicSentence: string;
  transliteration: string;
  transliterationSentence: string;
  audioUrl: string;
}

// Sample translations as fallback
const sampleTranslations = [
  {
    id: 1,
    english: 'chase',
    context: 'he is chasing her',
    arabic: 'يلحق',
    arabicSentence: 'هو عم يلحقها',
    transliteration: 'yil7a2',
    transliterationSentence: 'huwwe 3am yil7a2ha',
    audioUrl: 'https://www.madinaharabic.com/Audio/L001/001_015.mp3',
  },
  {
    id: 2,
    english: 'eat',
    context: 'I want to eat lunch',
    arabic: 'آكل',
    arabicSentence: 'بدي آكل غدا',
    transliteration: 'eekol',
    transliterationSentence: 'biddi eekol ghada',
    audioUrl: 'https://www.madinaharabic.com/Audio/L001/001_017.mp3',
  },
];

interface TranslateProps {
  setSubTab: (tab: string) => void;
}

const Translate: React.FC<TranslateProps> = ({ setSubTab }) => {
  const [word, setWord] = useState('');
  const [context, setContext] = useState('');
  const [result, setResult] = useState<TranslationResult | null>(null);
  const [history, setHistory] = useState<TranslationResult[]>([]);
  const [audioRef, setAudioRef] = useState<HTMLAudioElement | null>(null);
  const [apiKey, setApiKey] = useState('');
  const [savedApiKey, setSavedApiKey] = useState('');
  const [showSettings, setShowSettings] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  // Load API key from localStorage on component mount
  useEffect(() => {
    const storedApiKey = localStorage.getItem('openai_api_key');
    if (storedApiKey) {
      setApiKey(storedApiKey);
      setSavedApiKey(storedApiKey);
    }
  }, []);

  const saveApiKey = () => {
    if (apiKey) {
      localStorage.setItem('openai_api_key', apiKey);
      setSavedApiKey(apiKey);
      setShowSettings(false);
      setError('');
    }
  };

  const clearApiKey = () => {
    setApiKey('');
    setSavedApiKey('');
    localStorage.removeItem('openai_api_key');
  };

  const translateWithOpenAI = async (text: string, contextText: string) => {
    if (!savedApiKey) {
      setError('Please add your OpenAI API key in settings');
      return null;
    }

    setIsLoading(true);
    setError('');

    try {
      const openai = new OpenAI({
        apiKey: savedApiKey,
        dangerouslyAllowBrowser: true, // Note: In production, API calls should be made from a backend
      });

      const prompt = `
        Translate the following English text to Levantine Arabic (specifically the dialect spoken in Lebanon, Syria, Jordan, and Palestine).
        
        IMPORTANT INSTRUCTIONS:
        1. Provide the translation in Arabic script
        2. Provide a transliteration using Arabic chat alphabet (using numbers like 3 for ع, 7 for ح, etc.)
        3. If context is provided, also translate a full sentence using the word in that context
        4. Use authentic Levantine dialect vocabulary and grammar, NOT Modern Standard Arabic
        5. Format your response as JSON with these fields:
           - arabic: the translated word/phrase in Arabic script
           - transliteration: transliteration using Arabic chat alphabet
           - arabicSentence: (if context provided) a sentence using the word in Arabic script
           - transliterationSentence: (if context provided) transliteration of the sentence
        
        English word/phrase: ${text}
        ${contextText ? `Context or example: ${contextText}` : ''}
      `;

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content:
              'You are a Levantine Arabic translator specializing in the dialects of Lebanon, Syria, Jordan, and Palestine. Provide translations in authentic Levantine dialect, not Modern Standard Arabic.',
          },
          {
            role: 'user',
            content: prompt,
          },
        ],
        temperature: 0.3,
        response_format: { type: 'json_object' },
      });

      const content = response.choices[0]?.message?.content;

      if (content) {
        try {
          const parsedResponse = JSON.parse(content);

          // Create a result object
          const translationResult: TranslationResult = {
            id: Date.now(),
            english: text,
            context: contextText,
            arabic: parsedResponse.arabic || 'مش موجود',
            arabicSentence: parsedResponse.arabicSentence || '',
            transliteration: parsedResponse.transliteration || '',
            transliterationSentence:
              parsedResponse.transliterationSentence || '',
            audioUrl: '', // No audio URL for OpenAI translations
          };

          return translationResult;
        } catch (parseError) {
          console.error('Failed to parse OpenAI response:', parseError);
          setError('Failed to parse translation response');
          return null;
        }
      } else {
        setError('No translation received');
        return null;
      }
    } catch (error) {
      console.error('OpenAI API error:', error);
      setError('Translation failed. Please check your API key and try again.');
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!word.trim()) return;

    // Try to translate with OpenAI
    const openAIResult = await translateWithOpenAI(word, context);

    if (openAIResult) {
      setResult(openAIResult);
      setHistory((prev) => [openAIResult, ...prev]);
    } else if (!error) {
      // Fallback to sample data if OpenAI fails but not due to API key issues
      const lowerWord = word.toLowerCase().trim();
      const match = sampleTranslations.find(
        (item) => item.english.toLowerCase() === lowerWord
      );

      if (match) {
        setResult(match);
        if (!history.some((item) => item.id === match.id)) {
          setHistory((prev) => [match, ...prev]);
        }
      } else {
        // Create a placeholder result
        const fallbackResult: TranslationResult = {
          id: Date.now(),
          english: word,
          context: context,
          arabic: 'مش موجود', // "Not available" in Levantine Arabic
          arabicSentence: 'هاي الكلمة مش موجودة بالقاموس', // "This word is not in the dictionary" in Levantine
          transliteration: 'mish mawjood',
          transliterationSentence: 'hay il-kilme mish mawjoode bil-2amoos',
          audioUrl: '',
        };

        setResult(fallbackResult);
        setHistory((prev) => [fallbackResult, ...prev]);
      }
    }

    // Clear the form
    setWord('');
    setContext('');
  };

  const playAudio = (audioUrl: string) => {
    try {
      if (!audioUrl) return;

      // Create or reuse audio element
      if (!audioRef) {
        const audio = new Audio(audioUrl);
        audio.onerror = (e) => {
          console.error('Audio failed to load:', e);
        };
        setAudioRef(audio);
      } else {
        audioRef.src = audioUrl;
      }

      // Play the audio
      if (audioRef) {
        audioRef.currentTime = 0;
        const playPromise = audioRef.play();

        if (playPromise !== undefined) {
          playPromise.catch((error) => {
            console.error('Error playing audio:', error);
          });
        }
      }
    } catch (error) {
      console.error('Error in playAudio function:', error);
    }
  };

  return (
    <div className="p-4">
      <button
        onClick={() => setSubTab('landing')}
        className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
      >
        ← Back to Fluency
      </button>

      {/* Note Section with Dark Mode Classes */}
      <div className="mb-4 bg-emerald-50 dark:bg-emerald-900/20 p-3 rounded-md border border-emerald-100 dark:border-emerald-800">
        <p className="text-sm text-emerald-800 dark:text-emerald-200">
          <strong>Note:</strong> This translator provides words and phrases in
          Levantine Arabic dialect (spoken in Lebanon, Syria, Jordan, and
          Palestine), not Modern Standard Arabic.
          {!savedApiKey && (
            <span className="block mt-1">
              Add your OpenAI API key in settings to enable unlimited
              translations.
            </span>
          )}
        </p>
      </div>

      {/* Error message */}
      {error && (
        <div className="mb-4 bg-red-50 dark:bg-red-900/20 p-3 rounded-md border border-red-100 dark:border-red-800">
          <p className="text-sm text-red-800 dark:text-red-300">{error}</p>
        </div>
      )}

      {/* Input Form */}
      <form onSubmit={handleSubmit} className="mb-6 dark:text-gray-100">
        <div className="mb-4">
          <label
            htmlFor="word"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Word or Phrase
          </label>
          <input
            type="text"
            id="word"
            value={word}
            onChange={(e) => setWord(e.target.value)}
            className="w-full p-2 border border-gray-300 dark:border-gray-600 dark:bg-dark-100 rounded-md focus:ring-emerald-500 focus:border-emerald-500 dark:text-gray-100"
            placeholder="Enter a word or phrase"
            required
          />
        </div>

        <div className="mb-4">
          <label
            htmlFor="context"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Context or Example (optional)
          </label>
          <textarea
            id="context"
            value={context}
            onChange={(e) => setContext(e.target.value)}
            className="w-full p-2 border border-gray-300 dark:border-gray-600 dark:bg-dark-100 rounded-md focus:ring-emerald-500 focus:border-emerald-500 dark:text-gray-100"
            placeholder="e.g., 'I want to eat lunch'"
            rows={2}
          />
        </div>

        <button
          type="submit"
          disabled={isLoading}
          className="w-full bg-emerald-600 text-white py-2 px-4 rounded-md hover:bg-emerald-700 flex items-center justify-center disabled:bg-emerald-400"
        >
          {isLoading ? (
            <>
              <Loader2 size={18} className="mr-2 animate-spin" />
              Translating...
            </>
          ) : (
            <>
              <Send size={18} className="mr-2" />
              Translate
            </>
          )}
        </button>
      </form>

      {/* Translation Result */}
      {result && (
        <div className="mb-6 border border-emerald-200 dark:border-emerald-700 rounded-lg p-4 bg-emerald-50 dark:bg-emerald-900/20">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="font-bold text-lg">{result.arabic}</h3>
              <p className="text-sm text-gray-600 dark:text-gray-300 mb-1">
                {result.transliteration}
              </p>
            </div>
            {result.audioUrl && (
              <button
                onClick={() => playAudio(result.audioUrl)}
                className="p-2 rounded-full bg-emerald-100 dark:bg-emerald-800 text-emerald-600 dark:text-emerald-300 hover:bg-emerald-200 dark:hover:bg-emerald-700"
              >
                <Volume2 size={18} />
              </button>
            )}
          </div>

          {result.arabicSentence && (
            <div className="mt-3 pt-3 border-t border-emerald-200 dark:border-emerald-700">
              <p className="font-medium">In context:</p>
              <p className="text-lg mt-1">{result.arabicSentence}</p>
              <p className="text-sm text-gray-600 dark:text-gray-300">
                {result.transliterationSentence}
              </p>
            </div>
          )}
        </div>
      )}

      {/* Translation History */}
      {history.length > 0 && (
        <div>
          <h3 className="font-bold text-lg mb-3">Recent Translations</h3>
          <div className="space-y-3">
            {history.map((item) => (
              <div
                key={item.id}
                className="border border-gray-200 dark:border-gray-600 rounded-lg p-3 hover:bg-gray-50 dark:hover:bg-dark-200"
              >
                <div className="flex justify-between">
                  <div>
                    <p className="font-medium">{item.english}</p>
                    <p className="text-sm text-gray-500 dark:text-gray-400">
                      {item.context}
                    </p>
                  </div>
                  <div className="text-right">
                    <p className="font-bold">{item.arabic}</p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      {item.transliteration}
                    </p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* About Transliteration Section with Dark Mode Styling */}
      <div className="mt-6 bg-gray-50 dark:bg-dark-200 p-4 rounded-md border border-gray-200 dark:border-dark-100">
        <h3 className="font-bold text-md mb-2 dark:text-gray-100">
          About Levantine Arabic Transliteration
        </h3>
        <p className="text-sm text-gray-700 dark:text-gray-300 mb-2">
          Levantine Arabic uses numbers to represent sounds that don't exist in
          English:
        </p>
        <ul className="text-sm text-gray-700 dark:text-gray-300 space-y-1 list-disc pl-5">
          <li>
            <strong>3</strong> - represents the Arabic letter ع ('ayn), a deep
            throat sound
          </li>
          <li>
            <strong>7</strong> - represents the Arabic letter ح (ḥa), a breathy
            H sound
          </li>
          <li>
            <strong>2</strong> - represents the glottal stop (hamza)
          </li>
          <li>
            <strong>gh</strong> - represents the Arabic letter غ (ghayn),
            similar to French R
          </li>
        </ul>
      </div>
    </div>
  );
};

export default Translate;




=== FILE: src/components/VocabularyLanding.tsx ===
import React, { useState, useEffect } from 'react';

interface Word {
  id: number;
  arabic: string;
  transliteration: string;
  englishMeaning: string;
  dateMade: string;
  isEditing?: boolean;
}

interface VocabularyLandingProps {
  setActiveTab: (tab: string) => void;
}

const VocabularyLanding: React.FC<VocabularyLandingProps> = ({
  setActiveTab,
}) => {
  const [words, setWords] = useState<Word[]>(() => {
    const savedWords = localStorage.getItem('Vocabulary');
    return savedWords ? JSON.parse(savedWords) : [];
  });
  const [arabic, setArabic] = useState('');
  const [transliteration, setTransliteration] = useState('');
  const [englishMeaning, setEnglishMeaning] = useState('');
  const [error, setError] = useState('');

  // Save words to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('Vocabulary', JSON.stringify(words));
  }, [words]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (!englishMeaning) {
      setError('English Meaning is required.');
      return;
    }

    if (!transliteration && !arabic) {
      setError('Either Transliteration or Arabic must be filled.');
      return;
    }

    const newWord: Word = {
      id: Date.now(),
      arabic,
      transliteration,
      englishMeaning,
      dateMade: new Date().toLocaleDateString('en-GB'),
      isEditing: false,
    };

    setWords((prev) => [newWord, ...prev]);
    setArabic('');
    setTransliteration('');
    setEnglishMeaning('');
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-2">Vocabulary</h2>
      <p className="text-gray-600 dark:text-gray-400 mb-4">
        Build your Levantine Arabic vocabulary
      </p>

      {/* Options Grid */}
      <div className="grid grid-cols-2 gap-4 mb-8">
        <div
          className="p-4 bg-gray-100 dark:bg-dark-100 rounded cursor-pointer"
          onClick={() => setActiveTab('wordbank')}
        >
          <h3 className="font-bold">Word Bank</h3>
          <p className="text-sm text-gray-600">Review and manage your words</p>
        </div>
        <div
          className="p-4 bg-gray-100 dark:bg-dark-100 rounded cursor-pointer"
          onClick={() => setActiveTab('flashcards')}
        >
          <h3 className="font-bold">Flashcards</h3>
          <p className="text-sm text-gray-600">Practice with flashcards</p>
        </div>
        <div
          className="p-4 bg-gray-100 dark:bg-dark-100 rounded cursor-pointer"
          onClick={() => setActiveTab('dictionary')}
        >
          <h3 className="font-bold">Travel Dictionary</h3>
          <p className="text-sm text-gray-600">Explore new words</p>
        </div>
        <div
          className="p-4 bg-gray-100 dark:bg-dark-100 rounded cursor-pointer"
          onClick={() => setActiveTab('comprehension')}
        >
          <h3 className="font-bold">Daily Words</h3>
          <p className="text-sm text-gray-600">Learn daily vocabulary</p>
        </div>
      </div>
    </div>
  );
};

export default VocabularyLanding;




=== FILE: src/components/WordBank.tsx ===
import React, { useState, useEffect } from 'react';
import {
  Plus,
  ChevronRight,
  AlertCircle,
  Edit2,
  Save,
  Trash2,
  BookOpen,
  Search,
  Calendar,
  BookA,
  Plane,
  Clock,
} from 'lucide-react';
import { useLearnedWords } from '../context/LearnedWordsContext';
import { ChevronDown, ChevronUp } from 'lucide-react';

interface VerbConjugation {
  pronoun: string;
  arabic: string;
  transliteration: string;
  translation: string;
}

interface Word {
  id: number;
  arabic: string;
  transliteration: string;
  englishMeaning: string;
  dateMade: string;
  isEditing?: boolean;
}

interface WordBankProps {
  setActiveTab: (tab: string) => void;
  setWordBankSubTab: (tab: string) => void;
}

const WordBank: React.FC<WordBankProps> = ({
  setActiveTab,
  setWordBankSubTab,
}) => {
  const { getTodayLearnedWords } = useLearnedWords();
  const [searchTerm, setSearchTerm] = useState('');
  const [showRecentlyLearned, setShowRecentlyLearned] = useState(false);
  const [recentlyLearnedWords, setRecentlyLearnedWords] = useState<
    { date: string; words: any[] }[]
  >([]);
  const [expandedVerbs, setExpandedVerbs] = useState<number[]>([]);
  const [wordsPerDay] = useState<number>(() => {
    const saved = localStorage.getItem('wordsPerDay');
    return saved ? parseInt(saved) : 3;
  });

  // Sample verb data - this would normally come from your database
  const verbDatabase = [
    {
      id: 1,
      base: {
        arabic: 'كتب',
        transliteration: 'katab',
        translation: 'to write',
      },
      past: [
        {
          pronoun: 'I',
          arabic: 'كتبت',
          transliteration: 'katabit',
          translation: 'I wrote',
        },
        {
          pronoun: 'You (m)',
          arabic: 'كتبت',
          transliteration: 'katabit',
          translation: 'You wrote',
        },
        {
          pronoun: 'You (f)',
          arabic: 'كتبتي',
          transliteration: 'katabti',
          translation: 'You wrote',
        },
        {
          pronoun: 'He',
          arabic: 'كتب',
          transliteration: 'katab',
          translation: 'He wrote',
        },
        {
          pronoun: 'She',
          arabic: 'كتبت',
          transliteration: 'katabit',
          translation: 'She wrote',
        },
        {
          pronoun: 'We',
          arabic: 'كتبنا',
          transliteration: 'katabna',
          translation: 'We wrote',
        },
        {
          pronoun: 'You (pl)',
          arabic: 'كتبتو',
          transliteration: 'katabtu',
          translation: 'You wrote',
        },
        {
          pronoun: 'They',
          arabic: 'كتبو',
          transliteration: 'katabu',
          translation: 'They wrote',
        },
      ],
      present: [
        {
          pronoun: 'I',
          arabic: 'بكتب',
          transliteration: 'baktob',
          translation: 'I write',
        },
        {
          pronoun: 'You (m)',
          arabic: 'بتكتب',
          transliteration: 'btiktob',
          translation: 'You write',
        },
        {
          pronoun: 'You (f)',
          arabic: 'بتكتبي',
          transliteration: 'btikitbi',
          translation: 'You write',
        },
        {
          pronoun: 'He',
          arabic: 'بيكتب',
          transliteration: 'byiktob',
          translation: 'He writes',
        },
        {
          pronoun: 'She',
          arabic: 'بتكتب',
          transliteration: 'btiktob',
          translation: 'She writes',
        },
        {
          pronoun: 'We',
          arabic: 'منكتب',
          transliteration: 'mniktob',
          translation: 'We write',
        },
        {
          pronoun: 'You (pl)',
          arabic: 'بتكتبو',
          transliteration: 'btikitbu',
          translation: 'You write',
        },
        {
          pronoun: 'They',
          arabic: 'بيكتبو',
          transliteration: 'byiktbu',
          translation: 'They write',
        },
      ],
      imperative: [
        {
          pronoun: 'You (m)',
          arabic: 'اكتب',
          transliteration: 'ktob',
          translation: 'Write!',
        },
        {
          pronoun: 'You (f)',
          arabic: 'اكتبي',
          transliteration: 'ktubi',
          translation: 'Write!',
        },
        {
          pronoun: 'You (pl)',
          arabic: 'اكتبو',
          transliteration: 'ktubu',
          translation: 'Write!',
        },
      ],
      examples: [
        {
          arabic: 'بدي اكتب رسالة',
          transliteration: 'biddi aktob risaale',
          translation: 'I want to write a letter',
        },
        {
          arabic: 'كتبت الواجب؟',
          transliteration: 'katabit il-waajib?',
          translation: 'Did you write the homework?',
        },
      ],
      date: '2024-02-20',
    },
    {
      id: 2,
      base: {
        arabic: 'أكل',
        transliteration: 'akal',
        translation: 'to eat',
      },
      past: [
        {
          pronoun: 'I',
          arabic: 'أكلت',
          transliteration: 'akalit',
          translation: 'I ate',
        },
        {
          pronoun: 'You (m)',
          arabic: 'أكلت',
          transliteration: 'akalit',
          translation: 'You ate',
        },
        {
          pronoun: 'You (f)',
          arabic: 'أكلتي',
          transliteration: 'akalti',
          translation: 'You ate',
        },
        {
          pronoun: 'He',
          arabic: 'أكل',
          transliteration: 'akal',
          translation: 'He ate',
        },
        {
          pronoun: 'She',
          arabic: 'أكلت',
          transliteration: 'akalit',
          translation: 'She ate',
        },
        {
          pronoun: 'We',
          arabic: 'أكلنا',
          transliteration: 'akalna',
          translation: 'We ate',
        },
        {
          pronoun: 'You (pl)',
          arabic: 'أكلتو',
          transliteration: 'akaltu',
          translation: 'You ate',
        },
        {
          pronoun: 'They',
          arabic: 'أكلو',
          transliteration: 'akalu',
          translation: 'They ate',
        },
      ],
      present: [
        {
          pronoun: 'I',
          arabic: 'باكل',
          transliteration: 'baakol',
          translation: 'I eat',
        },
        {
          pronoun: 'You (m)',
          arabic: 'بتاكل',
          transliteration: 'btaakol',
          translation: 'You eat',
        },
        {
          pronoun: 'You (f)',
          arabic: 'بتاكلي',
          transliteration: 'btaakli',
          translation: 'You eat',
        },
        {
          pronoun: 'He',
          arabic: 'بياكل',
          transliteration: 'byaakol',
          translation: 'He eats',
        },
        {
          pronoun: 'She',
          arabic: 'بتاكل',
          transliteration: 'btaakol',
          translation: 'She eats',
        },
        {
          pronoun: 'We',
          arabic: 'مناكل',
          transliteration: 'mnaakol',
          translation: 'We eat',
        },
        {
          pronoun: 'You (pl)',
          arabic: 'بتاكلو',
          transliteration: 'btaaklu',
          translation: 'You eat',
        },
        {
          pronoun: 'They',
          arabic: 'بياكلو',
          transliteration: 'byaaklu',
          translation: 'They eat',
        },
      ],
      imperative: [
        {
          pronoun: 'You (m)',
          arabic: 'كول',
          transliteration: 'kool',
          translation: 'Eat!',
        },
        {
          pronoun: 'You (f)',
          arabic: 'كولي',
          transliteration: 'kooli',
          translation: 'Eat!',
        },
        {
          pronoun: 'You (pl)',
          arabic: 'كولو',
          transliteration: 'koolu',
          translation: 'Eat!',
        },
      ],
      examples: [
        {
          arabic: 'بدك تاكل شي؟',
          transliteration: 'biddak taakol shi?',
          translation: 'Do you want to eat something?',
        },
        {
          arabic: 'أكلت الفطور',
          transliteration: 'akalit il-fToor',
          translation: 'I ate breakfast',
        },
      ],
      date: '2024-02-20',
    },
  ];

  const [groupedVerbs, setGroupedVerbs] = useState<{
    [key: string]: typeof verbDatabase;
  }>({});

  useEffect(() => {
    // Group verbs by date
    const grouped = verbDatabase.reduce(
      (acc: { [key: string]: typeof verbDatabase }, verb) => {
        if (!acc[verb.date]) {
          acc[verb.date] = [];
        }
        acc[verb.date].push(verb);
        return acc;
      },
      {}
    );
    setGroupedVerbs(grouped);
  }, []);

  const toggleVerb = (verbId: number) => {
    setExpandedVerbs((prev) =>
      prev.includes(verbId)
        ? prev.filter((id) => id !== verbId)
        : [...prev, verbId]
    );
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  };

  // Initialize words state
  const [words, setWords] = useState<Word[]>(() => {
    const savedWords = localStorage.getItem('wordBank');
    return savedWords ? JSON.parse(savedWords) : [];
  });

  const todayLearnedWords = getTodayLearnedWords();

  const tabs = [
    {
      id: 'wordbank',
      label: 'Recently Learned',
      icon: <Clock size={24} className="text-emerald-600" />,
      count: 'Last 7 days',
    },
    {
      id: 'wordbank_add',
      label: 'Word Bank',
      icon: <BookA size={24} className="text-emerald-600" />,
      count: '250 words',
    },
    {
      id: 'flashcards',
      label: 'Flashcards',
      icon: <BookOpen size={24} className="text-emerald-600" />,
      count: '12 decks',
    },
    {
      id: 'travel',
      label: 'Travel',
      icon: <Plane size={24} className="text-emerald-600" />,
      count: '100 phrases',
    },
  ];

  const [arabic, setArabic] = useState('');
  const [transliteration, setTransliteration] = useState('');
  const [englishMeaning, setEnglishMeaning] = useState('');
  const [error, setError] = useState('');
  const [sortColumn, setSortColumn] = useState<keyof Word>('englishMeaning');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
  const [currentView, setCurrentView] = useState('main'); // 'main' or 'wordbank'

  // Get words learned in the last 7 days
  const getRecentlyLearnedWords = () => {
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

    const recentWords = [];
    for (let i = 0; i < 7; i++) {
      const date = new Date();
      date.setDate(date.getDate() - i);
      const words = getTodayLearnedWords(date);
      if (words.length > 0) {
        recentWords.push({
          date: date.toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          }),
          words,
        });
      }
    }
    return recentWords;
  };

  // Update recently learned words when component mounts or when getTodayLearnedWords changes
  useEffect(() => {
    setRecentlyLearnedWords(getRecentlyLearnedWords());
  }, [getTodayLearnedWords]);

  // Save words to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('wordBank', JSON.stringify(words));
  }, [words]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    // Validation logic based on the clarified requirements
    if (!englishMeaning) {
      setError('English Meaning is required.');
      return;
    }

    if (!transliteration && !arabic) {
      setError('Either English Transliteration or Arabic must be filled.');
      return;
    }

    const newWord: Word = {
      id: Date.now(),
      arabic,
      transliteration,
      englishMeaning,
      dateMade: new Date().toLocaleDateString('en-GB'),
      isEditing: false,
    };

    setWords((prev) => [newWord, ...prev]);
    setArabic('');
    setTransliteration('');
    setEnglishMeaning('');
  };

  const handleSort = (column: keyof Word) => {
    if (sortColumn === column) {
      setSortDirection((prev) => (prev === 'asc' ? 'desc' : 'asc'));
    } else {
      setSortColumn(column);
      setSortDirection('asc');
    }
  };

  const sortedWords = [...words].sort((a, b) => {
    const direction = sortDirection === 'asc' ? 1 : -1;
    const aValue = a[sortColumn].toLowerCase();
    const bValue = b[sortColumn].toLowerCase();
    return aValue > bValue ? direction : -direction;
  });

  const handleEditToggle = (id: number) => {
    setWords((prev) =>
      prev.map((word) =>
        word.id === id ? { ...word, isEditing: !word.isEditing } : word
      )
    );
  };

  const handleSave = (id: number, updatedWord: Partial<Word>) => {
    setWords((prev) =>
      prev.map((word) =>
        word.id === id ? { ...word, ...updatedWord, isEditing: false } : word
      )
    );
  };

  const handleDelete = (id: number) => {
    const confirmed = window.confirm(
      'Are you sure you want to delete this word?'
    );
    if (confirmed) {
      setWords((prev) => prev.filter((word) => word.id !== id));
    }
  };

  // Render Word Bank view
  if (currentView === 'wordbank') {
    return (
      <div className="p-4">
        <button
          onClick={() => setCurrentView('main')}
          className="mb-6 text-emerald-600 dark:text-emerald-400 flex items-center"
        >
          ← Back to Vocabulary
        </button>

        <h2 className="text-2xl font-bold mb-6">Word Bank</h2>

        {/* Add New Word Form */}
        <form
          onSubmit={handleSubmit}
          className="mb-8 bg-white dark:bg-dark-200 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-dark-100"
        >
          <h3 className="font-bold mb-4">Add New Word</h3>

          {error && (
            <div className="mb-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 px-4 py-3 rounded-md flex items-start">
              <AlertCircle size={20} className="mr-2 mt-0.5 flex-shrink-0" />
              <p className="text-sm">{error}</p>
            </div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <input
              type="text"
              placeholder="English Meaning"
              value={englishMeaning}
              onChange={(e) => setEnglishMeaning(e.target.value)}
              className="w-full p-2 border border-gray-300 dark:border-gray-600 dark:bg-dark-100 rounded-md"
              required
            />
            <input
              type="text"
              placeholder="English Transliteration"
              value={transliteration}
              onChange={(e) => setTransliteration(e.target.value)}
              className="w-full p-2 border border-gray-300 dark:border-gray-600 dark:bg-dark-100 rounded-md"
            />
            <input
              type="text"
              placeholder="Arabic"
              value={arabic}
              onChange={(e) => setArabic(e.target.value)}
              className="w-full p-2 border border-gray-300 dark:border-gray-600 dark:bg-dark-100 rounded-md"
            />
          </div>

          <button
            type="submit"
            className="bg-emerald-600 text-white px-4 py-2 rounded-md hover:bg-emerald-700 flex items-center dark:bg-emerald-700 dark:hover:bg-emerald-600"
          >
            <Plus size={18} className="mr-2" />
            Add Word
          </button>
        </form>

        {/* Words Table */}
        <div className="bg-white dark:bg-dark-200 rounded-lg shadow-sm border border-gray-200 dark:border-dark-100 overflow-hidden">
          <table className="w-full">
            <thead>
              <tr className="bg-gray-50 dark:bg-dark-100 border-b border-gray-200 dark:border-dark-100">
                <th
                  className="px-4 py-3 text-left cursor-pointer hover:bg-gray-100 dark:hover:bg-dark-200"
                  onClick={() => handleSort('englishMeaning')}
                >
                  English Meaning
                  {sortColumn === 'englishMeaning' && (
                    <span className="ml-1">
                      {sortDirection === 'asc' ? '↑' : '↓'}
                    </span>
                  )}
                </th>
                <th
                  className="px-4 py-3 text-left cursor-pointer hover:bg-gray-100 dark:hover:bg-dark-200"
                  onClick={() => handleSort('transliteration')}
                >
                  English Transliteration
                  {sortColumn === 'transliteration' && (
                    <span className="ml-1">
                      {sortDirection === 'asc' ? '↑' : '↓'}
                    </span>
                  )}
                </th>
                <th
                  className="px-4 py-3 text-right cursor-pointer hover:bg-gray-100 dark:hover:bg-dark-200"
                  onClick={() => handleSort('arabic')}
                >
                  Arabic
                  {sortColumn === 'arabic' && (
                    <span className="ml-1">
                      {sortDirection === 'asc' ? '↑' : '↓'}
                    </span>
                  )}
                </th>
                <th
                  className="px-4 py-3 text-left cursor-pointer hover:bg-gray-100 dark:hover:bg-dark-200"
                  onClick={() => handleSort('dateMade')}
                >
                  Date Made
                  {sortColumn === 'dateMade' && (
                    <span className="ml-1">
                      {sortDirection === 'asc' ? '↑' : '↓'}
                    </span>
                  )}
                </th>
                <th className="px-4 py-3 text-right">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200 dark:divide-dark-100">
              {sortedWords.map((word) => (
                <tr
                  key={word.id}
                  className="hover:bg-gray-50 dark:hover:bg-dark-100"
                >
                  <td className="px-4 py-3">{word.englishMeaning}</td>
                  <td className="px-4 py-3">{word.transliteration}</td>
                  <td className="px-4 py-3 text-right" dir="rtl">
                    {word.arabic}
                  </td>
                  <td className="px-4 py-3">{word.dateMade}</td>
                  <td className="px-4 py-3 text-right">
                    <div className="flex justify-end space-x-2">
                      <button
                        onClick={() => handleEditToggle(word.id)}
                        className="text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200"
                      >
                        {word.isEditing ? (
                          <Save size={18} />
                        ) : (
                          <Edit2 size={18} />
                        )}
                      </button>
                      <button
                        onClick={() => handleDelete(word.id)}
                        className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
                      >
                        <Trash2 size={18} />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {words.length === 0 && (
            <div className="text-center text-gray-500 dark:text-gray-400 py-8">
              No words added yet. Start building your vocabulary!
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-2">Vocabulary</h2>
      <p className="text-gray-600 dark:text-gray-400 mb-4">
        Build your Levantine Arabic vocabulary
      </p>

      {/* Grid of Options (Tabs Map) */}
      <div className="grid grid-cols-2 gap-4 mb-8">
        {tabs.map((tab) => (
          <div
            key={tab.id}
            onClick={() => {
              if (tab.id === 'wordbank') {
                setShowRecentlyLearned(true);
              } else
                switch (tab.id) {
                  case 'wordbank_add':
                    setCurrentView('wordbank');
                    break;
                  case 'flashcards':
                    setActiveTab('wordbank');
                    setWordBankSubTab('flashcards');
                    break;
                  case 'travel':
                    setActiveTab('wordbank');
                    setWordBankSubTab('travel dictionary');
                    break;
                }
            }}
            className="p-4 rounded-lg cursor-pointer transition-colors bg-gray-50 dark:bg-[#2D2D2D] border border-gray-200 dark:border-[#121212] hover:!border-emerald-500 dark:hover:!border-emerald-500"
          >
            <div className="flex items-center justify-center mb-3">
              <div className="p-3 rounded-full bg-emerald-50 dark:bg-emerald-900/20">
                {tab.icon}
              </div>
            </div>
            <h3 className="font-bold text-center mb-1 text-gray-800 dark:text-white">
              {tab.label}
            </h3>
            <p className="text-sm text-gray-600 dark:text-white text-center">
              {tab.count}
            </p>
          </div>
        ))}
      </div>

      {/* Search Bar (Moved below Tabs Map) */}
      <div className="relative mb-4">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <Search size={18} className="text-gray-400" />
        </div>
        <input
          type="text"
          className="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md leading-5 bg-white dark:bg-dark-200 placeholder-gray-500 focus:outline-none focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm"
          placeholder="Search words or phrases"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>

      {/* Daily Words Section */}
      <div className="mt-8 space-y-6">
        <h3 className="text-xl font-bold mb-4">Daily Words</h3>
        {Object.entries(groupedVerbs)
          .sort(([a], [b]) => b.localeCompare(a))
          .map(([date, verbs]) => (
            <div
              key={date}
              className="border border-gray-200 dark:border-dark-100 rounded-lg overflow-hidden"
            >
              <div className="bg-emerald-50 dark:bg-emerald-900/20 p-3 border-b border-gray-200 dark:border-dark-100">
                <div className="flex items-center">
                  <Calendar
                    size={18}
                    className="text-emerald-600 dark:text-emerald-400 mr-2"
                  />
                  <h3 className="font-bold">{formatDate(date)}</h3>
                </div>
              </div>

              <div className="divide-y divide-gray-200 dark:divide-dark-100 dark:bg-dark-200">
                {verbs.slice(0, wordsPerDay).map((verb) => (
                  <div key={verb.id} className="p-4">
                    <div
                      className="flex justify-between items-start cursor-pointer"
                      onClick={() => toggleVerb(verb.id)}
                    >
                      <div>
                        <h4 className="text-lg font-bold">
                          {verb.base.arabic}
                        </h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {verb.base.transliteration}
                        </p>
                        <p className="text-sm text-gray-700 dark:text-gray-300">
                          {verb.base.translation}
                        </p>
                      </div>
                      {expandedVerbs.includes(verb.id) ? (
                        <ChevronUp className="text-gray-400 dark:text-gray-500" />
                      ) : (
                        <ChevronDown className="text-gray-400 dark:text-gray-500" />
                      )}
                    </div>

                    {expandedVerbs.includes(verb.id) && (
                      <div className="mt-4">
                        {/* Past Tense */}
                        <div className="mb-4">
                          <h5 className="font-bold mb-2">Past Tense</h5>
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                            {verb.past.map((conj, idx) => (
                              <div
                                key={idx}
                                className="bg-gray-50 dark:bg-dark-100 p-2 rounded-md"
                              >
                                <span className="text-sm font-medium">
                                  {conj.pronoun}
                                </span>
                                <div className="flex justify-between mt-1">
                                  <span className="text-lg">{conj.arabic}</span>
                                  <span className="text-gray-600 dark:text-gray-400">
                                    {conj.transliteration}
                                  </span>
                                </div>
                                <p className="text-sm text-gray-700 dark:text-gray-300">
                                  {conj.translation}
                                </p>
                              </div>
                            ))}
                          </div>
                        </div>

                        {/* Present Tense */}
                        <div className="mb-4">
                          <h5 className="font-bold mb-2">Present Tense</h5>
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                            {verb.present.map((conj, idx) => (
                              <div
                                key={idx}
                                className="bg-gray-50 dark:bg-dark-100 p-2 rounded-md"
                              >
                                <span className="text-sm font-medium">
                                  {conj.pronoun}
                                </span>
                                <div className="flex justify-between mt-1">
                                  <span className="text-lg">{conj.arabic}</span>
                                  <span className="text-gray-600 dark:text-gray-400">
                                    {conj.transliteration}
                                  </span>
                                </div>
                                <p className="text-sm text-gray-700 dark:text-gray-300">
                                  {conj.translation}
                                </p>
                              </div>
                            ))}
                          </div>
                        </div>

                        {/* Imperative */}
                        <div className="mb-4">
                          <h5 className="font-bold mb-2">
                            Imperative - Telling someone to do the action
                          </h5>
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                            {verb.imperative.map((conj, idx) => (
                              <div
                                key={idx}
                                className="bg-gray-50 dark:bg-dark-100 p-2 rounded-md"
                              >
                                <span className="text-sm font-medium">
                                  {conj.pronoun}
                                </span>
                                <div className="flex justify-between mt-1">
                                  <span className="text-lg">{conj.arabic}</span>
                                  <span className="text-gray-600 dark:text-gray-400">
                                    {conj.transliteration}
                                  </span>
                                </div>
                                <p className="text-sm text-gray-700 dark:text-gray-300">
                                  {conj.translation}
                                </p>
                              </div>
                            ))}
                          </div>
                        </div>

                        {/* Example Sentences */}
                        <div>
                          <h5 className="font-bold mb-2">Examples</h5>
                          <div className="space-y-2">
                            {verb.examples.map((example, idx) => (
                              <div
                                key={idx}
                                className="bg-gray-50 dark:bg-dark-100 p-2 rounded-md"
                              >
                                <div className="text-lg">{example.arabic}</div>
                                <div className="text-gray-600 dark:text-gray-400">
                                  {example.transliteration}
                                </div>
                                <div className="text-gray-700 dark:text-gray-300">
                                  {example.translation}
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))}
      </div>
    </div>
  );
};

export default WordBank;




=== FILE: src/context/AudioContext.tsx ===
import React, { createContext, useContext, useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';

interface AudioContextType {
  audioData: { [key: string]: string };
  loading: boolean;
}

const AudioContext = createContext<AudioContextType | undefined>(undefined);

export const AudioProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [audioData, setAudioData] = useState<{ [key: string]: string }>({});
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchAudio() {
      const { data, error } = await supabase
        .from('alphabet')
        .select('letter, audio_url');
      if (error) {
        console.error('❌ Error fetching audio data:', error);
        setLoading(false);
        return;
      }

      const audioMap: { [key: string]: string } = {};

      for (const row of data) {
        if (!row.audio_url) continue;

        // Use Supabase's getPublicUrl method to get the correct URL
        const { data: publicUrlData } = supabase.storage
          .from('audio')
          .getPublicUrl(row.audio_url);
        const publicUrl = publicUrlData.publicUrl;
        audioMap[row.letter] = publicUrl;
      }

      setAudioData(audioMap);
      setLoading(false);
    }

    fetchAudio();
  }, []);

  return (
    <AudioContext.Provider value={{ audioData, loading }}>
      {children}
    </AudioContext.Provider>
  );
};

export const useAudio = () => {
  const context = useContext(AudioContext);
  if (!context) {
    throw new Error('useAudio must be used within an AudioProvider');
  }
  return context;
};




=== FILE: src/context/LearnedWordsContext.tsx ===
import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';

// Define the word type
export interface Word {
  id: number;
  word: string;
  transliteration: string;
  definition: string;
  example: string;
  exampleTranslation: string;
  learnedAt: Date;
}

interface LearnedWordsContextType {
  learnedWords: Word[];
  addLearnedWord: (word: Omit<Word, 'learnedAt'>) => void;
  getTodayLearnedCount: () => number;
  getTodayLearnedWords: () => Word[];
}

const LearnedWordsContext = createContext<LearnedWordsContextType | undefined>(undefined);

export const useLearnedWords = () => {
  const context = useContext(LearnedWordsContext);
  if (!context) {
    throw new Error('useLearnedWords must be used within a LearnedWordsProvider');
  }
  return context;
};

interface LearnedWordsProviderProps {
  children: ReactNode;
}

export const LearnedWordsProvider: React.FC<LearnedWordsProviderProps> = ({ children }) => {
  const [learnedWords, setLearnedWords] = useState<Word[]>(() => {
    // Load from localStorage on initial render
    const savedWords = localStorage.getItem('learnedWords');
    if (savedWords) {
      const parsed = JSON.parse(savedWords);
      // Convert string dates back to Date objects
      return parsed.map((word: any) => ({
        ...word,
        learnedAt: new Date(word.learnedAt)
      }));
    }
    return [];
  });

  // Save to localStorage whenever learnedWords changes
  useEffect(() => {
    localStorage.setItem('learnedWords', JSON.stringify(learnedWords));
  }, [learnedWords]);

  const addLearnedWord = (word: Omit<Word, 'learnedAt'>) => {
    // Check if word is already learned
    const isAlreadyLearned = learnedWords.some(w => w.id === word.id);
    
    if (!isAlreadyLearned) {
      const newLearnedWord = {
        ...word,
        learnedAt: new Date()
      };
      setLearnedWords(prev => [...prev, newLearnedWord]);
    }
  };

  const isToday = (date: Date) => {
    const today = new Date();
    return date.getDate() === today.getDate() &&
      date.getMonth() === today.getMonth() &&
      date.getFullYear() === today.getFullYear();
  };

  const getTodayLearnedCount = () => {
    return learnedWords.filter(word => isToday(word.learnedAt)).length;
  };

  const getTodayLearnedWords = () => {
    return learnedWords.filter(word => isToday(word.learnedAt));
  };

  return (
    <LearnedWordsContext.Provider value={{ 
      learnedWords, 
      addLearnedWord, 
      getTodayLearnedCount,
      getTodayLearnedWords
    }}>
      {children}
    </LearnedWordsContext.Provider>
  );
};



=== FILE: src/context/SupabaseContext.tsx ===
import { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { User } from '@supabase/supabase-js';
import { supabase } from '../lib/supabaseClient';

interface SupabaseContextType {
  user: User | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (email: string, password: string) => Promise<void>;
  signOut: () => Promise<void>;
}

const SupabaseContext = createContext<SupabaseContextType | undefined>(undefined);

export const useSupabase = () => {
  const context = useContext(SupabaseContext);
  if (!context) {
    throw new Error('useSupabase must be used within a SupabaseProvider');
  }
  return context;
};

interface SupabaseProviderProps {
  children: ReactNode;
}

export const SupabaseProvider: React.FC<SupabaseProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Get initial session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setUser(session?.user ?? null);
      setLoading(false);
    });

    // Listen for auth changes
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
    });

    return () => subscription.unsubscribe();
  }, []);

  const signIn = async (email: string, password: string) => {
    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    if (error) throw error;
  };

  const signUp = async (email: string, password: string) => {
    const { error } = await supabase.auth.signUp({
      email,
      password,
    });
    if (error) throw error;
  };

  const signOut = async () => {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
  };

  return (
    <SupabaseContext.Provider value={{ user, loading, signIn, signUp, signOut }}>
      {children}
    </SupabaseContext.Provider>
  );
};



=== FILE: src/hooks/useDecks.ts ===
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';
import { User } from '@supabase/supabase-js';

export interface Deck {
  id: string;
  user_id: string;
  name: string;
  description: string;
  emoji: string;
  is_default: boolean;
  archived: boolean;
}

export interface Flashcard {
  id: string;
  deck_id: string;
  front: string;
  back: string;
  transliteration: string;
  image_url: string | null;
  audio_url: string | null;
  tags: string[];
}

export function useDecks(user: User | null) {
  const [decks, setDecks] = useState<Deck[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!user) return;
    
    async function fetchDecks() {
      try {
        const { data, error } = await supabase
          .from('decks')
          .select('*')
          .eq('user_id', user.id)
          .eq('archived', false)
          .order('created_at', { ascending: false });

        if (error) throw error;
        setDecks(data || []);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to fetch decks');
      } finally {
        setLoading(false);
      }
    }

    fetchDecks();
  }, [user]);

  const createDeck = async (name: string, description: string, emoji: string) => {
    if (!user) return null;

    try {
      const { data, error } = await supabase
        .from('decks')
        .insert({
          user_id: user.id,
          name,
          description,
          emoji,
          is_default: false,
          archived: false,
        })
        .select()
        .single();

      if (error) throw error;
      setDecks(prev => [data, ...prev]);
      return data;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create deck');
      return null;
    }
  };

  const updateDeck = async (deckId: string, updates: Partial<Deck>) => {
    if (!user) return false;

    try {
      const { error } = await supabase
        .from('decks')
        .update(updates)
        .eq('id', deckId)
        .eq('user_id', user.id);

      if (error) throw error;
      setDecks(prev => 
        prev.map(deck => 
          deck.id === deckId ? { ...deck, ...updates } : deck
        )
      );
      return true;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update deck');
      return false;
    }
  };

  const archiveDeck = async (deckId: string) => {
    if (!user) return false;

    try {
      const { error } = await supabase
        .from('decks')
        .update({ archived: true })
        .eq('id', deckId)
        .eq('user_id', user.id);

      if (error) throw error;
      setDecks(prev => prev.filter(deck => deck.id !== deckId));
      return true;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to archive deck');
      return false;
    }
  };

  return {
    decks,
    loading,
    error,
    createDeck,
    updateDeck,
    archiveDeck,
  };
}



=== FILE: src/hooks/useFlashcards.ts ===
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';
import type { Flashcard } from './useDecks';

export function useFlashcards(deckId: string | null) {
  const [flashcards, setFlashcards] = useState<Flashcard[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!deckId) {
      setFlashcards([]);
      setLoading(false);
      return;
    }

    async function fetchFlashcards() {
      try {
        const { data, error } = await supabase
          .from('flashcards')
          .select('*')
          .eq('deck_id', deckId)
          .order('created_at', { ascending: true });

        if (error) throw error;
        setFlashcards(data || []);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to fetch flashcards');
      } finally {
        setLoading(false);
      }
    }

    fetchFlashcards();
  }, [deckId]);

  const addFlashcard = async (flashcard: Omit<Flashcard, 'id'>) => {
    try {
      const { data, error } = await supabase
        .from('flashcards')
        .insert(flashcard)
        .select()
        .single();

      if (error) throw error;
      setFlashcards(prev => [...prev, data]);
      return data;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to add flashcard');
      return null;
    }
  };

  const updateFlashcard = async (id: string, updates: Partial<Flashcard>) => {
    try {
      const { error } = await supabase
        .from('flashcards')
        .update(updates)
        .eq('id', id);

      if (error) throw error;
      setFlashcards(prev =>
        prev.map(card => (card.id === id ? { ...card, ...updates } : card))
      );
      return true;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update flashcard');
      return false;
    }
  };

  const deleteFlashcard = async (id: string) => {
    try {
      const { error } = await supabase
        .from('flashcards')
        .delete()
        .eq('id', id);

      if (error) throw error;
      setFlashcards(prev => prev.filter(card => card.id !== id));
      return true;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete flashcard');
      return false;
    }
  };

  return {
    flashcards,
    loading,
    error,
    addFlashcard,
    updateFlashcard,
    deleteFlashcard,
  };
}



=== FILE: src/lib/initUserDecks.ts ===
import { createClient } from '@supabase/supabase-js';
import { supabase } from './supabaseClient';

export async function initUserDecks(userId: string) {
  try {
    // Check if user already has decks
    const { data: existingDecks, error: checkError } = await supabase
      .from('decks')
      .select('id')
      .eq('user_id', userId);

    if (checkError) throw checkError;
    if (existingDecks && existingDecks.length > 0) return;

    // Fetch default decks
    const { data: defaultDecks, error: defaultDecksError } = await supabase
      .from('default_decks')
      .select('*');

    if (defaultDecksError) throw defaultDecksError;
    if (!defaultDecks) return;

    // Clone each default deck and its cards
    for (const defaultDeck of defaultDecks) {
      // Create new deck
      const { data: newDeck, error: deckError } = await supabase
        .from('decks')
        .insert({
          user_id: userId,
          name: defaultDeck.name,
          description: defaultDeck.description,
          emoji: defaultDeck.emoji,
          is_default: true,
          archived: false,
        })
        .select()
        .single();

      if (deckError) throw deckError;
      if (!newDeck) continue;

      // Fetch default cards for this deck
      const { data: defaultCards, error: cardsError } = await supabase
        .from('default_flashcards')
        .select('*')
        .eq('default_deck_id', defaultDeck.id);

      if (cardsError) throw cardsError;
      if (!defaultCards || defaultCards.length === 0) continue;

      // Clone cards to new deck
      const cardsToInsert = defaultCards.map(card => ({
        deck_id: newDeck.id,
        front: card.front,
        back: card.back,
        transliteration: card.transliteration,
        image_url: card.image_url,
        audio_url: card.audio_url,
        tags: card.tags,
      }));

      const { error: insertError } = await supabase
        .from('flashcards')
        .insert(cardsToInsert);

      if (insertError) throw insertError;
    }
  } catch (error) {
    console.error('Error initializing user decks:', error);
    throw error;
  }
}



=== FILE: src/lib/lessonService.ts ===
import { supabase } from './supabaseClient';

// Fetch all distinct topics (lesson types), ordered by their lowest level
// lessonService.ts
import { supabase } from './supabaseClient';

export async function fetchLessonTopics() {
  const { data, error } = await supabase
    .from('topics')
    .select('id, label, description, level');

  if (error) throw error;
  return data;
}

// New: generic lesson fetch by type
// lessonService.ts
export async function fetchLessonsByLevel(level: number) {
  const { data, error } = await supabase
    .from('lessons')
    .select('*')
    .eq('level', level)
    .order('order_num', { ascending: true }); // ✅ sort by order_num

  if (error) throw error;
  return data;
}




=== FILE: src/lib/supabaseClient.ts ===
import { createClient } from '@supabase/supabase-js';
import type { Database } from '../types/supabase';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables. Please check your .env file.');
}

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  }
});



=== FILE: src/types/lessons.ts ===
// Lesson content types
export interface QuizOption {
  id: string;
  text: string;
  isCorrect: boolean;
}

export interface QuizQuestion {
  question: string;
  audio?: string;
  answer: string;
  options: string[];
}

export interface LessonContent {
  pronunciation: string;
  examples: string[];
  letters?: string[];
  quiz?: QuizQuestion[];
}

export interface Lesson {
  id: string;
  title: string;
  description: string;
  content: LessonContent;
  level: number;
  order_num: number;
  type: 'alphabet' | 'grammar' | 'vocabulary' | 'pronunciation';
  created_at?: string;
}

// Letter types for alphabet lessons
export interface LetterForm {
  isolated: string;
  initial: string;
  medial: string;
  final: string;
}

export interface LetterExample {
  word: string;
  transliteration: string;
  meaning: string;
}

export interface Letter {
  id: number;
  letter: string;
  name: string;
  transliteration: string;
  forms: LetterForm;
  examples: LetterExample[];
  audio_url?: string;
}



=== FILE: src/types/supabase.ts ===
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      vocabulary_items: {
        Row: {
          id: string
          arabic: string
          transliteration: string
          translation: string
          context: string | null
          examples: Json | null
          audio_url: string | null
          category: string[] | null
          created_at: string | null
        }
        Insert: {
          id?: string
          arabic: string
          transliteration: string
          translation: string
          context?: string | null
          examples?: Json | null
          audio_url?: string | null
          category?: string[] | null
          created_at?: string | null
        }
        Update: {
          id?: string
          arabic?: string
          transliteration?: string
          translation?: string
          context?: string | null
          examples?: Json | null
          audio_url?: string | null
          category?: string[] | null
          created_at?: string | null
        }
      }
      user_progress: {
        Row: {
          id: string
          user_id: string | null
          level: number | null
          xp: number | null
          streak: number | null
          last_active: string | null
          preferences: Json | null
        }
        Insert: {
          id?: string
          user_id?: string | null
          level?: number | null
          xp?: number | null
          streak?: number | null
          last_active?: string | null
          preferences?: Json | null
        }
        Update: {
          id?: string
          user_id?: string | null
          level?: number | null
          xp?: number | null
          streak?: number | null
          last_active?: string | null
          preferences?: Json | null
        }
      }
      learned_words: {
        Row: {
          id: string
          user_id: string | null
          word_id: string | null
          learned_at: string | null
          strength: number | null
          next_review: string | null
        }
        Insert: {
          id?: string
          user_id?: string | null
          word_id?: string | null
          learned_at?: string | null
          strength?: number | null
          next_review?: string | null
        }
        Update: {
          id?: string
          user_id?: string | null
          word_id?: string | null
          learned_at?: string | null
          strength?: number | null
          next_review?: string | null
        }
      }
      lessons: {
        Row: {
          id: string
          title: string
          description: string
          content: Json
          level: number
          order_num: number
          type: string
          created_at: string | null
        }
        Insert: {
          id?: string
          title: string
          description: string
          content: Json
          level: number
          order_num: number
          type: string
          created_at?: string | null
        }
        Update: {
          id?: string
          title?: string
          description?: string
          content?: Json
          level?: number
          order_num?: number
          type?: string
          created_at?: string | null
        }
      }
      lesson_progress: {
        Row: {
          id: string
          user_id: string | null
          lesson_id: string | null
          completed: boolean | null
          score: number | null
          completed_at: string | null
        }
        Insert: {
          id?: string
          user_id?: string | null
          lesson_id?: string | null
          completed?: boolean | null
          score?: number | null
          completed_at?: string | null
        }
        Update: {
          id?: string
          user_id?: string | null
          lesson_id?: string | null
          completed?: boolean | null
          score?: number | null
          completed_at?: string | null
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    Tables: {
      quizzes: {
        Row: {
          id: string
          level: number
          order_num: number
          correct_letter: string
        }
        Insert: {
          id?: string
          level: number
          order_num: number
          correct_letter: string
        }
        Update: {
          id?: string
          level?: number
          order_num?: number
          correct_letter?: string
        }
      }
      quiz_options: {
        Row: {
          id: string
          level: number
          order_num: number
          letter: string
        }
        Insert: {
          id?: string
          level: number
          order_num: number
          letter: string
        }
        Update: {
          id?: string
          level?: number
          order_num?: number
          letter?: string
        }
      }
    }
  }
}



=== FILE: supabase/functions/cloneDefaultDecks/index.ts ===
// cloneDefaultDecks/index.ts
import { createClient } from 'npm:@supabase/supabase-js@2.39.7';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { user } = await req.json();
    
    if (!user?.id) {
      throw new Error('User data not provided');
    }

    // Initialize Supabase client with environment variables
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false,
        },
      }
    );

    // Check if user already has decks
    const { data: existingDecks, error: checkError } = await supabase
      .from('decks')
      .select('id')
      .eq('user_id', user.id);

    if (checkError) throw checkError;
    if (existingDecks?.length > 0) {
      return new Response(
        JSON.stringify({ message: 'User already has decks' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Fetch default decks
    const { data: defaultDecks, error: defaultDecksError } = await supabase
      .from('default_decks')
      .select('*');

    if (defaultDecksError) throw defaultDecksError;
    if (!defaultDecks?.length) {
      return new Response(
        JSON.stringify({ message: 'No default decks found' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Clone each default deck and its cards
    for (const defaultDeck of defaultDecks) {
      // Create new deck
      const { data: newDeck, error: deckError } = await supabase
        .from('decks')
        .insert({
          user_id: user.id,
          name: defaultDeck.name,
          description: defaultDeck.description,
          emoji: defaultDeck.emoji,
          is_default: true,
          archived: false,
        })
        .select()
        .single();

      if (deckError) throw deckError;
      if (!newDeck) continue;

      // Fetch default cards for this deck
      const { data: defaultCards, error: cardsError } = await supabase
        .from('default_flashcards')
        .select('*')
        .eq('default_deck_id', defaultDeck.id);

      if (cardsError) throw cardsError;
      if (!defaultCards?.length) continue;

      // Clone cards to new deck
      const cardsToInsert = defaultCards.map(card => ({
        deck_id: newDeck.id,
        front: card.front,
        back: card.back,
        transliteration: card.transliteration,
        image_url: card.image_url,
        audio_url: card.audio_url,
        tags: card.tags,
      }));

      const { error: insertError } = await supabase
        .from('flashcards')
        .insert(cardsToInsert);

      if (insertError) throw insertError;
    }

    return new Response(
      JSON.stringify({ message: 'Default decks cloned successfully' }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error:', error.message);
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});



=== FILE: supabase/functions/cloneDefaultDecks.js ===
// cloneDefaultDecks.js
import { createClient } from '@supabase/supabase-js';

// Use your service role key (ensure this is kept secure)
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

export default async function handler(req, res) {
  try {
    // Get the new user information from the request body
    const { user } = req.body;
    if (!user) {
      return res.status(400).json({ error: 'User data not provided' });
    }

    // 1. Fetch default decks
    const { data: defaultDecks, error: decksError } = await supabase
      .from('default_decks')
      .select('*');
    if (decksError) throw decksError;

    // 2. For each default deck, clone it for the new user
    for (const deck of defaultDecks) {
      const { data: newDeck, error: deckInsertError } = await supabase
        .from('decks')
        .insert({
          user_id: user.id,
          name: deck.name,
          description: deck.description,
          emoji: deck.emoji,
          is_default: true, // mark as a default copy
          archived: false,
        })
        .single();

      if (deckInsertError) {
        console.error('Error inserting deck:', deckInsertError);
        continue;
      }

      // 3. Clone the flashcards for this deck
      const { data: defaultFlashcards, error: flashcardsError } = await supabase
        .from('default_flashcards')
        .select('*')
        .eq('default_deck_id', deck.id);
      if (flashcardsError) {
        console.error('Error fetching default flashcards:', flashcardsError);
        continue;
      }

      for (const card of defaultFlashcards) {
        await supabase.from('flashcards').insert({
          deck_id: newDeck.id,
          front: card.front,
          back: card.back,
          transliteration: card.transliteration,
          image_url: card.image_url,
          audio_url: card.audio_url,
          tags: card.tags,
        });
      }
    }

    res.status(200).json({ message: 'Default decks cloned successfully.' });
  } catch (error) {
    console.error('Error cloning default decks:', error);
    res.status(500).json({ error: error.message });
  }
}




=== FILE: ./vite.config.ts ===
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});




=== FILE: ./tailwind.config.js ===
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: 'class',
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      colors: {
        dark: {
          100: '#2D2D2D',
          200: '#1E1E1E',
          300: '#121212',
        },
      },
      fontFamily: {
        arabic: ['"Amiri"', 'Arial', 'sans-serif'],
      },
      animation: {
        'scroll-hint': 'scroll-hint 1.5s ease-in-out infinite',
      },
      keyframes: {
        'scroll-hint': {
          '0%, 100%': { transform: 'translateX(0)' },
          '50%': { transform: 'translateX(10px)' },
        },
      },
    },
  },
  plugins: [],
};




=== FILE: ./postcss.config.js ===
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};




=== FILE: ./tsconfig.json ===
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}




=== FILE: ./tsconfig.app.json ===
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}




=== FILE: ./tsconfig.node.json ===
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}




=== FILE: ./index.html ===
<!DOCTYPE html>
<html lang="en">
  <head>
    <link
      href="https://fonts.googleapis.com/css2?family=Amiri&display=swap"
      rel="stylesheet"
    />
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>




=== FILE: ./.env ===
VITE_SUPABASE_URL=https://mnfxcqpwvsprsrxmaxxt.supabase.co
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1uZnhjcXB3dnNwcnNyeG1heHh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3NDMwMDMsImV4cCI6MjA1NzMxOTAwM30.IVTRI8a-ja0RhyCmyQoXfLG4dIsGfXXxa2vRuIfUD4I




=== FILE: ./package.json ===
{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "bundle": "node bundle-codebase.cjs",
    "unbundle": "node unbundle-codebase.cjs"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.49.1",
    "date-fns": "^3.3.1",
    "framer-motion": "^12.5.0",
    "lucide-react": "^0.344.0",
    "openai": "^4.28.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.30.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.14"
  }
}

=== FILE: ./package-lock.json ===
{
  "name": "vite-react-typescript-starter",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "vite-react-typescript-starter",
      "version": "0.0.0",
      "dependencies": {
        "@supabase/supabase-js": "^2.49.1",
        "date-fns": "^3.3.1",
        "framer-motion": "^12.5.0",
        "lucide-react": "^0.344.0",
        "openai": "^4.28.0",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-router-dom": "^6.30.0"
      },
      "devDependencies": {
        "@eslint/js": "^9.9.1",
        "@types/react": "^18.3.5",
        "@types/react-dom": "^18.3.0",
        "@vitejs/plugin-react": "^4.3.1",
        "autoprefixer": "^10.4.18",
        "eslint": "^9.9.1",
        "eslint-plugin-react-hooks": "^5.1.0-rc.0",
        "eslint-plugin-react-refresh": "^0.4.11",
        "globals": "^15.9.0",
        "postcss": "^8.4.35",
        "tailwindcss": "^3.4.1",
        "ts-node": "^10.9.2",
        "typescript": "^5.8.3",
        "typescript-eslint": "^8.3.0",
        "vite": "^5.4.14"
      }
    },
    "node_modules/@alloc/quick-lru": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.25.7.tgz",
      "integrity": "sha512-0xZJFNE5XMpENsgfHYTw8FbX4kv53mFLn2i3XPoq69LyhYSCBJtitaHx9QnsVTrsogI4Z3+HtEfZ2/GFPOtf5g==",
      "dev": true,
      "dependencies": {
        "@babel/highlight": "^7.25.7",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.25.7.tgz",
      "integrity": "sha512-9ickoLz+hcXCeh7jrcin+/SLWm+GkxE2kTvoYyp38p4WkdFXfQJxDFGWp/YHjiKLPx06z2A7W8XKuqbReXDzsw==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.25.7.tgz",
      "integrity": "sha512-yJ474Zv3cwiSOO9nXJuqzvwEeM+chDuQ8GJirw+pZ91sCGCyOZ3dJkVE09fTV0VEVzXyLWhh3G/AolYTPX7Mow==",
      "dev": true,
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.25.7",
        "@babel/generator": "^7.25.7",
        "@babel/helper-compilation-targets": "^7.25.7",
        "@babel/helper-module-transforms": "^7.25.7",
        "@babel/helpers": "^7.25.7",
        "@babel/parser": "^7.25.7",
        "@babel/template": "^7.25.7",
        "@babel/traverse": "^7.25.7",
        "@babel/types": "^7.25.7",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.25.7.tgz",
      "integrity": "sha512-5Dqpl5fyV9pIAD62yK9P7fcA768uVPUyrQmqpqstHWgMma4feF1x/oFysBCVZLY5wJ2GkMUCdsNDnGZrPoR6rA==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.25.7",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.25.7.tgz",
      "integrity": "sha512-DniTEax0sv6isaw6qSQSfV4gVRNtw2rte8HHM45t9ZR0xILaufBRNkpMifCRiAPyvL4ACD6v0gfCwCmtOQaV4A==",
      "dev": true,
      "dependencies": {
        "@babel/compat-data": "^7.25.7",
        "@babel/helper-validator-option": "^7.25.7",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.7.tgz",
      "integrity": "sha512-o0xCgpNmRohmnoWKQ0Ij8IdddjyBFE4T2kagL/x6M3+4zUgc+4qTOUBoNe4XxDskt1HPKO007ZPiMgLDq2s7Kw==",
      "dev": true,
      "dependencies": {
        "@babel/traverse": "^7.25.7",
        "@babel/types": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.25.7.tgz",
      "integrity": "sha512-k/6f8dKG3yDz/qCwSM+RKovjMix563SLxQFo0UhRNo239SP6n9u5/eLtKD6EAjwta2JHJ49CsD8pms2HdNiMMQ==",
      "dev": true,
      "dependencies": {
        "@babel/helper-module-imports": "^7.25.7",
        "@babel/helper-simple-access": "^7.25.7",
        "@babel/helper-validator-identifier": "^7.25.7",
        "@babel/traverse": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.25.7.tgz",
      "integrity": "sha512-eaPZai0PiqCi09pPs3pAFfl/zYgGaE6IdXtYvmf0qlcDTd3WCtO7JWCcRd64e0EQrcYgiHibEZnOGsSY4QSgaw==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-simple-access": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.25.7.tgz",
      "integrity": "sha512-FPGAkJmyoChQeM+ruBGIDyrT2tKfZJO8NcxdC+CWNJi7N8/rZpSxK7yvBJ5O/nF1gfu5KzN7VKG3YVSLFfRSxQ==",
      "dev": true,
      "dependencies": {
        "@babel/traverse": "^7.25.7",
        "@babel/types": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.7.tgz",
      "integrity": "sha512-CbkjYdsJNHFk8uqpEkpCvRs3YRp9tY6FmFY7wLMSYuGYkrdUi7r2lc4/wqsvlHoMznX3WJ9IP8giGPq68T/Y6g==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.7.tgz",
      "integrity": "sha512-AM6TzwYqGChO45oiuPqwL2t20/HdMC1rTPAesnBCgPCSF1x3oN9MVUwQV2iyz4xqWrctwK5RNC8LV22kaQCNYg==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.7.tgz",
      "integrity": "sha512-ytbPLsm+GjArDYXJ8Ydr1c/KJuutjF2besPNbIZnZ6MKUxi/uTA22t2ymmA4WFjZFpjiAMO0xuuJPqK2nvDVfQ==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.25.7.tgz",
      "integrity": "sha512-Sv6pASx7Esm38KQpF/U/OXLwPPrdGHNKoeblRxgZRLXnAtnkEe4ptJPDtAZM7fBLadbc1Q07kQpSiGQ0Jg6tRA==",
      "dev": true,
      "dependencies": {
        "@babel/template": "^7.25.7",
        "@babel/types": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.25.7.tgz",
      "integrity": "sha512-iYyACpW3iW8Fw+ZybQK+drQre+ns/tKpXbNESfrhNnPLIklLbXr7MYJ6gPEd0iETGLOK+SxMjVvKb/ffmk+FEw==",
      "dev": true,
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.25.7",
        "chalk": "^2.4.2",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.25.7.tgz",
      "integrity": "sha512-aZn7ETtQsjjGG5HruveUK06cU3Hljuhd9Iojm4M8WWv3wLE6OkE5PWbDUkItmMgegmccaITudyuW5RPYrYlgWw==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.25.7"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.25.7.tgz",
      "integrity": "sha512-JD9MUnLbPL0WdVK8AWC7F7tTG2OS6u/AKKnsK+NdRhUiVdnzyR1S3kKQCaRLOiaULvUiqK6Z4JQE635VgtCFeg==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.25.7.tgz",
      "integrity": "sha512-S/JXG/KrbIY06iyJPKfxr0qRxnhNOdkNXYBl/rmwgDd72cQLH9tEGkDm/yJPGvcSIUoikzfjMios9i+xT/uv9w==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.25.7.tgz",
      "integrity": "sha512-wRwtAgI3bAS+JGU2upWNL9lSlDcRCqD05BZ1n3X2ONLH1WilFP6O1otQjeMK/1g0pvYcXC7b/qVUB1keofjtZA==",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.25.7",
        "@babel/parser": "^7.25.7",
        "@babel/types": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.25.7.tgz",
      "integrity": "sha512-jatJPT1Zjqvh/1FyJs6qAHL+Dzb7sTb+xr7Q+gM1b+1oBsMsQQ4FkVKb6dFlJvLlVssqkRzV05Jzervt9yhnzg==",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.25.7",
        "@babel/generator": "^7.25.7",
        "@babel/parser": "^7.25.7",
        "@babel/template": "^7.25.7",
        "@babel/types": "^7.25.7",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.25.7.tgz",
      "integrity": "sha512-vwIVdXG+j+FOpkwqHRcBgHLYNL7XMkufrlaFvL9o6Ai9sJn9+PdyIL5qa0XzTZw084c+u9LOls53eoZWP/W5WQ==",
      "dev": true,
      "dependencies": {
        "@babel/helper-string-parser": "^7.25.7",
        "@babel/helper-validator-identifier": "^7.25.7",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz",
      "integrity": "sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==",
      "dev": true,
      "dependencies": {
        "eslint-visitor-keys": "^3.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.11.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.11.1.tgz",
      "integrity": "sha512-m4DVN9ZqskZoLU5GlWZadwDnYo3vAEydiUayB9widCl9ffWx2IvPnp6n3on5rJmziJSw9Bv+Z3ChDVdMwXCY8Q==",
      "dev": true,
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.18.0.tgz",
      "integrity": "sha512-fTxvnS1sRMu3+JjXwJG0j/i4RT9u4qJ+lqS/yCGap4lH4zZGzQ7tu+xZqQmcMZq5OBZDL4QRxQzRjkWcGt8IVw==",
      "dev": true,
      "dependencies": {
        "@eslint/object-schema": "^2.1.4",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.6.0.tgz",
      "integrity": "sha512-8I2Q8ykA4J0x0o7cg67FPVnehcqWTBehu/lmY+bolPFHGjh49YzGBMXTvpqVgEbBdvNCSxj6iFgiIyHzf03lzg==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.1.0.tgz",
      "integrity": "sha512-4Bfj15dVJdoy3RfZmmo86RK1Fwzn6SstsvK9JS+BaVKqC6QQQQyXekNaC+g+LKNgkQ+2VhGAzm6hO40AhMR3zQ==",
      "dev": true,
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.12.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.12.0.tgz",
      "integrity": "sha512-eohesHH8WFRUprDNyEREgqP6beG6htMeUYeCpkEgBCieCMme5r9zFWjzAJp//9S+Kub4rqE+jXe9Cp1a7IYIIA==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.4.tgz",
      "integrity": "sha512-BsWiH1yFGjXXS2yvrf5LyuoSIIbPrGUWob917o+BTKuZ7qJdxX8aJLRxs1fS9n6r7vESrq1OUqb68dANcFXuQQ==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.0.tgz",
      "integrity": "sha512-vH9PiIMMwvhCx31Af3HiGzsVNULDbyVkHXwlemn/B0TFj/00ho3y55efXrUZTfQipxoHC5u4xq6zblww1zm1Ig==",
      "dev": true,
      "dependencies": {
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.0.tgz",
      "integrity": "sha512-2cbWIHbZVEweE853g8jymffCA+NCMiuqeECeBBLm8dg2oFdjuGJhgN4UAbI+6v0CKbbhvtXA4qV8YR5Ji86nmw==",
      "dev": true,
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.5",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.5.tgz",
      "integrity": "sha512-KSPA4umqSG4LHYRodq31VDwKAvaTF4xmVlzM8Aeh4PlU1JQ3IG0wiA8C25d3RQ9nJyM3mBHyI53K06VVL/oFFg==",
      "dev": true,
      "dependencies": {
        "@humanfs/core": "^0.19.0",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "dev": true,
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz",
      "integrity": "sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==",
      "dev": true,
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "dev": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "dev": true
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "dev": true,
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "dev": true,
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.24.0.tgz",
      "integrity": "sha512-Q6HJd7Y6xdB48x8ZNVDOqsbh2uByBhgK8PiQgPhwkIw/HC/YX5Ghq2mQY5sRMZWHb3VsFkWooUVOZHKr7DmDIA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.24.0.tgz",
      "integrity": "sha512-ijLnS1qFId8xhKjT81uBHuuJp2lU4x2yxa4ctFPtG+MqEE6+C5f/+X/bStmxapgmwLwiL3ih122xv8kVARNAZA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.24.0.tgz",
      "integrity": "sha512-bIv+X9xeSs1XCk6DVvkO+S/z8/2AMt/2lMqdQbMrmVpgFvXlmde9mLcbQpztXm1tajC3raFDqegsH18HQPMYtA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.24.0.tgz",
      "integrity": "sha512-X6/nOwoFN7RT2svEQWUsW/5C/fYMBe4fnLK9DQk4SX4mgVBiTA9h64kjUYPvGQ0F/9xwJ5U5UfTbl6BEjaQdBQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.24.0.tgz",
      "integrity": "sha512-0KXvIJQMOImLCVCz9uvvdPgfyWo93aHHp8ui3FrtOP57svqrF/roSSR5pjqL2hcMp0ljeGlU4q9o/rQaAQ3AYA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.24.0.tgz",
      "integrity": "sha512-it2BW6kKFVh8xk/BnHfakEeoLPv8STIISekpoF+nBgWM4d55CZKc7T4Dx1pEbTnYm/xEKMgy1MNtYuoA8RFIWw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.24.0.tgz",
      "integrity": "sha512-i0xTLXjqap2eRfulFVlSnM5dEbTVque/3Pi4g2y7cxrs7+a9De42z4XxKLYJ7+OhE3IgxvfQM7vQc43bwTgPwA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.24.0.tgz",
      "integrity": "sha512-9E6MKUJhDuDh604Qco5yP/3qn3y7SLXYuiC0Rpr89aMScS2UAmK1wHP2b7KAa1nSjWJc/f/Lc0Wl1L47qjiyQw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.24.0.tgz",
      "integrity": "sha512-2XFFPJ2XMEiF5Zi2EBf4h73oR1V/lycirxZxHZNc93SqDN/IWhYYSYj8I9381ikUFXZrz2v7r2tOVk2NBwxrWw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.24.0.tgz",
      "integrity": "sha512-M3Dg4hlwuntUCdzU7KjYqbbd+BLq3JMAOhCKdBE3TcMGMZbKkDdJ5ivNdehOssMCIokNHFOsv7DO4rlEOfyKpg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.24.0.tgz",
      "integrity": "sha512-mjBaoo4ocxJppTorZVKWFpy1bfFj9FeCMJqzlMQGjpNPY9JwQi7OuS1axzNIk0nMX6jSgy6ZURDZ2w0QW6D56g==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.24.0.tgz",
      "integrity": "sha512-ZXFk7M72R0YYFN5q13niV0B7G8/5dcQ9JDp8keJSfr3GoZeXEoMHP/HlvqROA3OMbMdfr19IjCeNAnPUG93b6A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.24.0.tgz",
      "integrity": "sha512-w1i+L7kAXZNdYl+vFvzSZy8Y1arS7vMgIy8wusXJzRrPyof5LAb02KGr1PD2EkRcl73kHulIID0M501lN+vobQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.24.0.tgz",
      "integrity": "sha512-VXBrnPWgBpVDCVY6XF3LEW0pOU51KbaHhccHw6AS6vBWIC60eqsH19DAeeObl+g8nKAz04QFdl/Cefta0xQtUQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.24.0.tgz",
      "integrity": "sha512-xrNcGDU0OxVcPTH/8n/ShH4UevZxKIO6HJFK0e15XItZP2UcaiLFd5kiX7hJnqCbSztUF8Qot+JWBC/QXRPYWQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.24.0.tgz",
      "integrity": "sha512-fbMkAF7fufku0N2dE5TBXcNlg0pt0cJue4xBRE2Qc5Vqikxr4VCgKj/ht6SMdFcOacVA9rqF70APJ8RN/4vMJw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@supabase/auth-js": {
      "version": "2.68.0",
      "resolved": "https://registry.npmjs.org/@supabase/auth-js/-/auth-js-2.68.0.tgz",
      "integrity": "sha512-odG7nb7aOmZPUXk6SwL2JchSsn36Ppx11i2yWMIc/meUO2B2HK9YwZHPK06utD9Ql9ke7JKDbwGin/8prHKxxQ==",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/functions-js": {
      "version": "2.4.4",
      "resolved": "https://registry.npmjs.org/@supabase/functions-js/-/functions-js-2.4.4.tgz",
      "integrity": "sha512-WL2p6r4AXNGwop7iwvul2BvOtuJ1YQy8EbOd0dhG1oN1q8el/BIRSFCFnWAMM/vJJlHWLi4ad22sKbKr9mvjoA==",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/node-fetch": {
      "version": "2.6.15",
      "resolved": "https://registry.npmjs.org/@supabase/node-fetch/-/node-fetch-2.6.15.tgz",
      "integrity": "sha512-1ibVeYUacxWYi9i0cf5efil6adJ9WRyZBLivgjs+AUpewx1F3xPi7gLgaASI2SmIQxPoCEjAsLAzKPgMJVgOUQ==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      }
    },
    "node_modules/@supabase/postgrest-js": {
      "version": "1.19.2",
      "resolved": "https://registry.npmjs.org/@supabase/postgrest-js/-/postgrest-js-1.19.2.tgz",
      "integrity": "sha512-MXRbk4wpwhWl9IN6rIY1mR8uZCCG4MZAEji942ve6nMwIqnBgBnZhZlON6zTTs6fgveMnoCILpZv1+K91jN+ow==",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/realtime-js": {
      "version": "2.11.2",
      "resolved": "https://registry.npmjs.org/@supabase/realtime-js/-/realtime-js-2.11.2.tgz",
      "integrity": "sha512-u/XeuL2Y0QEhXSoIPZZwR6wMXgB+RQbJzG9VErA3VghVt7uRfSVsjeqd7m5GhX3JR6dM/WRmLbVR8URpDWG4+w==",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14",
        "@types/phoenix": "^1.5.4",
        "@types/ws": "^8.5.10",
        "ws": "^8.18.0"
      }
    },
    "node_modules/@supabase/storage-js": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/@supabase/storage-js/-/storage-js-2.7.1.tgz",
      "integrity": "sha512-asYHcyDR1fKqrMpytAS1zjyEfvxuOIp1CIXX7ji4lHHcJKqyk+sLl/Vxgm4sN6u8zvuUtae9e4kDxQP2qrwWBA==",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/supabase-js": {
      "version": "2.49.1",
      "resolved": "https://registry.npmjs.org/@supabase/supabase-js/-/supabase-js-2.49.1.tgz",
      "integrity": "sha512-lKaptKQB5/juEF5+jzmBeZlz69MdHZuxf+0f50NwhL+IE//m4ZnOeWlsKRjjsM0fVayZiQKqLvYdBn0RLkhGiQ==",
      "dependencies": {
        "@supabase/auth-js": "2.68.0",
        "@supabase/functions-js": "2.4.4",
        "@supabase/node-fetch": "2.6.15",
        "@supabase/postgrest-js": "1.19.2",
        "@supabase/realtime-js": "2.11.2",
        "@supabase/storage-js": "2.7.1"
      }
    },
    "node_modules/@tsconfig/node10": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz",
      "integrity": "sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.6.8",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.8.tgz",
      "integrity": "sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.6",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.6.tgz",
      "integrity": "sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz",
      "integrity": "sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==",
      "dev": true
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true
    },
    "node_modules/@types/node": {
      "version": "18.19.78",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-18.19.78.tgz",
      "integrity": "sha512-m1ilZCTwKLkk9rruBJXFeYN0Bc5SbjirwYX/Td3MqPfioYbgun3IvK/m8dQxMCnrPGZPg1kvXjp3SIekCN/ynw==",
      "dependencies": {
        "undici-types": "~5.26.4"
      }
    },
    "node_modules/@types/node-fetch": {
      "version": "2.6.12",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.12.tgz",
      "integrity": "sha512-8nneRWKCg3rMtF69nLQJnOYUcbafYeFSjqkw3jCRLsqkWFlHaoQrr5mXmofFGOx3DKn7UfmBMyov8ySvLRVldA==",
      "dependencies": {
        "@types/node": "*",
        "form-data": "^4.0.0"
      }
    },
    "node_modules/@types/phoenix": {
      "version": "1.6.6",
      "resolved": "https://registry.npmjs.org/@types/phoenix/-/phoenix-1.6.6.tgz",
      "integrity": "sha512-PIzZZlEppgrpoT2QgbnDU+MMzuR6BbCjllj0bM70lWoejMeNJAxCchxnv7J3XFkI8MpygtRpzXrIlmWUBclP5A=="
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.13",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.13.tgz",
      "integrity": "sha512-hCZTSvwbzWGvhqxp/RqVqwU999pBf2vp7hzIjiYOsl8wqOmUxkQ6ddw1cV3l8811+kdUFus/q4d1Y3E3SyEifA==",
      "dev": true
    },
    "node_modules/@types/react": {
      "version": "18.3.11",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.11.tgz",
      "integrity": "sha512-r6QZ069rFTjrEYgFdOck1gK7FLVsgJE7tTz0pQBczlBNUhBNk0MQH4UbnFSwjpQLMkLzgqvBBa+qGpLje16eTQ==",
      "dev": true,
      "dependencies": {
        "@types/prop-types": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "18.3.0",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.0.tgz",
      "integrity": "sha512-EhwApuTmMBmXuFOikhQLIBUn6uFg81SwLMOAUgodJF14SOBOCMdU04gDoYi0WOJJHD144TL32z4yDqCW3dnkQg==",
      "dev": true,
      "dependencies": {
        "@types/react": "*"
      }
    },
    "node_modules/@types/ws": {
      "version": "8.18.0",
      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.18.0.tgz",
      "integrity": "sha512-8svvI3hMyvN0kKCJMvTJP/x6Y/EoQbepff882wL+Sn5QsXb3etnamgrJq4isrBxSJj5L2AuXcI0+bgkoAXGUJw==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.8.1.tgz",
      "integrity": "sha512-xfvdgA8AP/vxHgtgU310+WBnLB4uJQ9XdyP17RebG26rLtDrQJV3ZYrcopX91GrHmMoH8bdSwMRh2a//TiJ1jQ==",
      "dev": true,
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.8.1",
        "@typescript-eslint/type-utils": "8.8.1",
        "@typescript-eslint/utils": "8.8.1",
        "@typescript-eslint/visitor-keys": "8.8.1",
        "graphemer": "^1.4.0",
        "ignore": "^5.3.1",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.0.0 || ^8.0.0-alpha.0",
        "eslint": "^8.57.0 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.8.1.tgz",
      "integrity": "sha512-hQUVn2Lij2NAxVFEdvIGxT9gP1tq2yM83m+by3whWFsWC+1y8pxxxHUFE1UqDu2VsGi2i6RLcv4QvouM84U+ow==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.8.1",
        "@typescript-eslint/types": "8.8.1",
        "@typescript-eslint/typescript-estree": "8.8.1",
        "@typescript-eslint/visitor-keys": "8.8.1",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.8.1.tgz",
      "integrity": "sha512-X4JdU+66Mazev/J0gfXlcC/dV6JI37h+93W9BRYXrSn0hrE64IoWgVkO9MSJgEzoWkxONgaQpICWg8vAN74wlA==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/types": "8.8.1",
        "@typescript-eslint/visitor-keys": "8.8.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.8.1.tgz",
      "integrity": "sha512-qSVnpcbLP8CALORf0za+vjLYj1Wp8HSoiI8zYU5tHxRVj30702Z1Yw4cLwfNKhTPWp5+P+k1pjmD5Zd1nhxiZA==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/typescript-estree": "8.8.1",
        "@typescript-eslint/utils": "8.8.1",
        "debug": "^4.3.4",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.8.1.tgz",
      "integrity": "sha512-WCcTP4SDXzMd23N27u66zTKMuEevH4uzU8C9jf0RO4E04yVHgQgW+r+TeVTNnO1KIfrL8ebgVVYYMMO3+jC55Q==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.8.1.tgz",
      "integrity": "sha512-A5d1R9p+X+1js4JogdNilDuuq+EHZdsH9MjTVxXOdVFfTJXunKJR/v+fNNyO4TnoOn5HqobzfRlc70NC6HTcdg==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/types": "8.8.1",
        "@typescript-eslint/visitor-keys": "8.8.1",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
      "version": "7.6.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.8.1.tgz",
      "integrity": "sha512-/QkNJDbV0bdL7H7d0/y0qBbV2HTtf0TIyjSDTvvmQEzeVx8jEImEbLuOA4EsvE8gIgqMitns0ifb5uQhMj8d9w==",
      "dev": true,
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.4.0",
        "@typescript-eslint/scope-manager": "8.8.1",
        "@typescript-eslint/types": "8.8.1",
        "@typescript-eslint/typescript-estree": "8.8.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.8.1.tgz",
      "integrity": "sha512-0/TdC3aeRAsW7MDvYRwEc1Uwm0TIBfzjPFgg60UU2Haj5qsCs9cc3zNgY71edqE3LbWfF/WoZQd3lJoDXFQpag==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/types": "8.8.1",
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.3.2.tgz",
      "integrity": "sha512-hieu+o05v4glEBucTcKMK3dlES0OeJlD9YVOAPraVMOInBCwzumaIFiUjr4bHK7NPgnAHgiskUoceKercrN8vg==",
      "dev": true,
      "dependencies": {
        "@babel/core": "^7.25.2",
        "@babel/plugin-transform-react-jsx-self": "^7.24.7",
        "@babel/plugin-transform-react-jsx-source": "^7.24.7",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.14.2"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0"
      }
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/acorn": {
      "version": "8.12.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.12.1.tgz",
      "integrity": "sha512-tcpGyI9zbizT9JbV6oYE477V6mTlXvvi0T0G3SNIYE2apm/G5huBa1+K89VGeovbg+jycCrfhl3ADxErOuO6Jg==",
      "dev": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.3.4",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.11.0"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/agentkeepalive": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.6.0.tgz",
      "integrity": "sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==",
      "dependencies": {
        "humanize-ms": "^1.2.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-regex": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dev": true,
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/any-promise": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
      "dev": true
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
      "dev": true
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "node_modules/autoprefixer": {
      "version": "10.4.20",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.20.tgz",
      "integrity": "sha512-XY25y5xSv/wEoqzDyXXME4AFfkZI0P23z6Fs3YgymDnKJkCGOnkL0iTxCa85UTqaSgfcqyf3UA6+c7wUvx/16g==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "browserslist": "^4.23.3",
        "caniuse-lite": "^1.0.30001646",
        "fraction.js": "^4.3.7",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.0.1",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.0.tgz",
      "integrity": "sha512-Rmb62sR1Zpjql25eSanFGEhAxcFwfA1K0GuQcLoaJBAcENegrQut3hYdhXFF1obQfiDyqIW/cLM5HSJ/9k884A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "caniuse-lite": "^1.0.30001663",
        "electron-to-chromium": "^1.5.28",
        "node-releases": "^2.0.18",
        "update-browserslist-db": "^1.1.0"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase-css": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001667",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001667.tgz",
      "integrity": "sha512-7LTwJjcRkzKFmtqGsibMeuXmvFDfZq/nzIjnmgCGzKKRVzjD72selLDK1oPF/Oxzmt4fNcPvTDvGqSDG4tCALw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ]
    },
    "node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chokidar/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dev": true,
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
      "dev": true
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "dev": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/cssesc": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
      "dev": true,
      "bin": {
        "cssesc": "bin/cssesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "dev": true
    },
    "node_modules/date-fns": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-3.6.0.tgz",
      "integrity": "sha512-fRHTG8g/Gif+kSh50gaGEdToemgfj74aRX3swtiouboip5JDLAyDE9F11nHMIcvOaXeOC6D7SpNhi7uFyB7Uww==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/kossnocorp"
      }
    },
    "node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/didyoumean": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
      "dev": true
    },
    "node_modules/diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/dlv": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
      "dev": true
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "dev": true
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.33",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.33.tgz",
      "integrity": "sha512-+cYTcFB1QqD4j4LegwLfpCNxifb6dDFUAwk6RsLusCwIaZI6or2f+q8rs5tTB2YC53HhOlIbEaqHMAAC8IOIwA==",
      "dev": true
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "dev": true
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "dev": true,
      "hasInstallScript": true,
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "dev": true,
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/eslint": {
      "version": "9.12.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.12.0.tgz",
      "integrity": "sha512-UVIOlTEWxwIopRL1wgSQYdnVDcEvs2wyaO6DGo5mXqe3r16IoCNWkR29iHhyaP4cICWjbgbmFUGAhh0GJRuGZw==",
      "dev": true,
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.11.0",
        "@eslint/config-array": "^0.18.0",
        "@eslint/core": "^0.6.0",
        "@eslint/eslintrc": "^3.1.0",
        "@eslint/js": "9.12.0",
        "@eslint/plugin-kit": "^0.2.0",
        "@humanfs/node": "^0.16.5",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.3.1",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.1.0",
        "eslint-visitor-keys": "^4.1.0",
        "espree": "^10.2.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.1.0-rc-fb9a90fa48-20240614",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.1.0-rc-fb9a90fa48-20240614.tgz",
      "integrity": "sha512-xsiRwaDNF5wWNC4ZHLut+x/YcAxksUd9Rizt7LaEn3bV8VyYRpXnRJQlLOfYaVy9esk4DFP4zPPnoNVjq5Gc0w==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.12",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.12.tgz",
      "integrity": "sha512-9neVjoGv20FwYtCP6CB1dzR1vr57ZDNOXst21wd2xJ/cTlM2xLq0GWVlSNTdMn/4BtP6cHYBMCSp1wFBJ9jBsg==",
      "dev": true,
      "peerDependencies": {
        "eslint": ">=7"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.1.0.tgz",
      "integrity": "sha512-14dSvlhaVhKKsa9Fx1l8A17s7ah7Ef7wCakJ10LYk6+GYmP9yDti2oq2SEwcyndt6knfcZyhyxwY3i9yL78EQw==",
      "dev": true,
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.1.0.tgz",
      "integrity": "sha512-Q7lok0mqMUSf5a/AdAZkA5a/gHcO6snwQClVNNvFKCAVlxXucdU8pKydU5ZVZjBx5xr37vGbFFWtLQYreLzrZg==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/eslint/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true
    },
    "node_modules/eslint/node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eslint/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/espree": {
      "version": "10.2.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.2.0.tgz",
      "integrity": "sha512-upbkBJbckcCNBDBDXEbuhjbP68n+scUd3k/U2EkyM9nw+I/jPiL4cLF/Al06CF96wRltFda16sxDFrxsI1v0/g==",
      "dev": true,
      "dependencies": {
        "acorn": "^8.12.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true
    },
    "node_modules/fast-glob": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz",
      "integrity": "sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true
    },
    "node_modules/fastq": {
      "version": "1.17.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz",
      "integrity": "sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==",
      "dev": true,
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.1.tgz",
      "integrity": "sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==",
      "dev": true
    },
    "node_modules/foreground-child": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.0.tgz",
      "integrity": "sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==",
      "dev": true,
      "dependencies": {
        "cross-spawn": "^7.0.0",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.2.tgz",
      "integrity": "sha512-hGfm/slu0ZabnNt4oaRZ6uREyfCj6P4fT/n6A1rGV+Z0VdGXjfOhVUpkn6qVQONHGIFwmveGXyDs75+nr6FM8w==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/form-data-encoder": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/form-data-encoder/-/form-data-encoder-1.7.2.tgz",
      "integrity": "sha512-qfqtYan3rxrnCk1VYaA4H+Ms9xdpPqvLZa6xmMgFvhO32x7/3J/ExcTd6qpxM0vH2GdMI+poehyBZvqfMTto8A=="
    },
    "node_modules/formdata-node": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/formdata-node/-/formdata-node-4.4.1.tgz",
      "integrity": "sha512-0iirZp3uVDjVGt9p49aTaqjk84TrglENEDuqfdlZQ1roC9CWlPk6Avf8EEnZNcAqPonwkG35x4n3ww/1THYAeQ==",
      "dependencies": {
        "node-domexception": "1.0.0",
        "web-streams-polyfill": "4.0.0-beta.3"
      },
      "engines": {
        "node": ">= 12.20"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
      "dev": true,
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://github.com/sponsors/rawify"
      }
    },
    "node_modules/framer-motion": {
      "version": "12.5.0",
      "resolved": "https://registry.npmjs.org/framer-motion/-/framer-motion-12.5.0.tgz",
      "integrity": "sha512-buPlioFbH9/W7rDzYh1C09AuZHAk2D1xTA1BlounJ2Rb9aRg84OXexP0GLd+R83v0khURdMX7b5MKnGTaSg5iA==",
      "dependencies": {
        "motion-dom": "^12.5.0",
        "motion-utils": "^12.5.0",
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "@emotion/is-prop-valid": "*",
        "react": "^18.0.0 || ^19.0.0",
        "react-dom": "^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/is-prop-valid": {
          "optional": true
        },
        "react": {
          "optional": true
        },
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob": {
      "version": "10.4.5",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
      "dev": true,
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^3.1.2",
        "minimatch": "^9.0.4",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^1.11.1"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/glob/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/glob/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/globals": {
      "version": "15.11.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-15.11.0.tgz",
      "integrity": "sha512-yeyNSjdbyVaWurlwCpcA6XNBrHTMIeDdj0/hnvX/OLJ9ekOXYbLsLinH/MucQyGvNnXhidTdNhTtJaffL2sMfw==",
      "dev": true,
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/humanize-ms": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
      "dependencies": {
        "ms": "^2.0.0"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
      "dev": true,
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.15.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.15.1.tgz",
      "integrity": "sha512-z0vtXSwucUJtANQWldhbtbt7BnL0vxiFjIdDLAatwhDYty2bad6s+rijD6Ri4YuYJubLzIJLUidCh09e1djEVQ==",
      "dev": true,
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true
    },
    "node_modules/jackspeak": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
      "dev": true,
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/jiti": {
      "version": "1.21.6",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.6.tgz",
      "integrity": "sha512-2yTgeWTWzMWkHu6Jp9NKgePDaYHbntiwvYuuJLbbN9vl7DC9DvXKOB2BC3ZZ92D3cvV/aflH0osDfwpHepQ53w==",
      "dev": true,
      "bin": {
        "jiti": "bin/jiti.js"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.0.2.tgz",
      "integrity": "sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==",
      "dev": true,
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lilconfig": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.1.0.tgz",
      "integrity": "sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==",
      "dev": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "dev": true
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/lucide-react": {
      "version": "0.344.0",
      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.344.0.tgz",
      "integrity": "sha512-6YyBnn91GB45VuVT96bYCOKElbJzUHqp65vX8cDcu55MQL9T969v4dhGClpljamuI/+KMO9P6w9Acq1CVQGvIQ==",
      "peerDependencies": {
        "react": "^16.5.1 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/motion-dom": {
      "version": "12.5.0",
      "resolved": "https://registry.npmjs.org/motion-dom/-/motion-dom-12.5.0.tgz",
      "integrity": "sha512-uH2PETDh7m+Hjd1UQQ56yHqwn83SAwNjimNPE/kC+Kds0t4Yh7+29rfo5wezVFpPOv57U4IuWved5d1x0kNhbQ==",
      "dependencies": {
        "motion-utils": "^12.5.0"
      }
    },
    "node_modules/motion-utils": {
      "version": "12.5.0",
      "resolved": "https://registry.npmjs.org/motion-utils/-/motion-utils-12.5.0.tgz",
      "integrity": "sha512-+hFFzvimn0sBMP9iPxBa9OtRX35ZQ3py0UHnb8U29VD+d8lQ8zH3dTygJWqK7av2v6yhg7scj9iZuvTS0f4+SA=="
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/mz": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
      "dev": true,
      "dependencies": {
        "any-promise": "^1.0.0",
        "object-assign": "^4.0.1",
        "thenify-all": "^1.0.0"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.7",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.7.tgz",
      "integrity": "sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true
    },
    "node_modules/node-domexception": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
      "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/jimmywarting"
        },
        {
          "type": "github",
          "url": "https://paypal.me/jimmywarting"
        }
      ],
      "engines": {
        "node": ">=10.5.0"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.18.tgz",
      "integrity": "sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g==",
      "dev": true
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/openai": {
      "version": "4.86.1",
      "resolved": "https://registry.npmjs.org/openai/-/openai-4.86.1.tgz",
      "integrity": "sha512-x3iCLyaC3yegFVZaxOmrYJjitKxZ9hpVbLi+ZlT5UHuHTMlEQEbKXkGOM78z9qm2T5GF+XRUZCP2/aV4UPFPJQ==",
      "dependencies": {
        "@types/node": "^18.11.18",
        "@types/node-fetch": "^2.6.4",
        "abort-controller": "^3.0.0",
        "agentkeepalive": "^4.2.1",
        "form-data-encoder": "1.7.2",
        "formdata-node": "^4.3.2",
        "node-fetch": "^2.6.7"
      },
      "bin": {
        "openai": "bin/cli"
      },
      "peerDependencies": {
        "ws": "^8.18.0",
        "zod": "^3.23.8"
      },
      "peerDependenciesMeta": {
        "ws": {
          "optional": true
        },
        "zod": {
          "optional": true
        }
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/package-json-from-dist": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
      "dev": true
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true
    },
    "node_modules/path-scurry": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
      "dev": true,
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.18"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/path-scurry/node_modules/lru-cache": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
      "dev": true
    },
    "node_modules/picocolors": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.0.tgz",
      "integrity": "sha512-TQ92mBOW0l3LeMeyLV6mzy/kWr8lkd/hp3mTg7wYK7zJhuBStmGMBG0BdeDZS/dZx1IukaX6Bk11zcln25o1Aw==",
      "dev": true
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/postcss": {
      "version": "8.4.47",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.47.tgz",
      "integrity": "sha512-56rxCq7G/XfB4EkXq9Egn5GCqugWvDFjafDOThIdMBsI15iqPqR5r15TfSr1YPYeEI19YeaXMCbY6u88Y76GLQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "nanoid": "^3.3.7",
        "picocolors": "^1.1.0",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-import": {
      "version": "15.1.0",
      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
      "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
      "dev": true,
      "dependencies": {
        "postcss-value-parser": "^4.0.0",
        "read-cache": "^1.0.0",
        "resolve": "^1.1.7"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "postcss": "^8.0.0"
      }
    },
    "node_modules/postcss-js": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
      "integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
      "dev": true,
      "dependencies": {
        "camelcase-css": "^2.0.1"
      },
      "engines": {
        "node": "^12 || ^14 || >= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.4.21"
      }
    },
    "node_modules/postcss-load-config": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
      "integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "lilconfig": "^3.0.0",
        "yaml": "^2.3.4"
      },
      "engines": {
        "node": ">= 14"
      },
      "peerDependencies": {
        "postcss": ">=8.0.9",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "postcss": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/postcss-load-config/node_modules/lilconfig": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.2.tgz",
      "integrity": "sha512-eop+wDAvpItUys0FWkHIKeC9ybYrTGbU41U5K7+bttZZeohvnY7M9dZ5kB21GNWiFT2q1OoPTvncPCgSOVO5ow==",
      "dev": true,
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/antonk52"
      }
    },
    "node_modules/postcss-nested": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
      "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "postcss-selector-parser": "^6.1.1"
      },
      "engines": {
        "node": ">=12.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.14"
      }
    },
    "node_modules/postcss-selector-parser": {
      "version": "6.1.2",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
      "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
      "dev": true,
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "dev": true
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.14.2",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.14.2.tgz",
      "integrity": "sha512-jCvmsr+1IUSMUyzOkRcvnVbX3ZYC6g9TDrDbFuFmRDq7PD4yaGbLKNQL6k2jnArV8hjYxh7hVhAZB6s9HDGpZA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.0",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.0.tgz",
      "integrity": "sha512-D3X8FyH9nBcTSHGdEKurK7r8OYE1kKFn3d/CF+CoxbSHkxU7o37+Uh7eAHRXr6k2tSExXYO++07PeXJtA/dEhQ==",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.0",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.0.tgz",
      "integrity": "sha512-x30B78HV5tFk8ex0ITwzC9TTZMua4jGyA9IUlH1JLQYQTFyxr/ZxwOJq7evg1JX1qGVUcvhsmQSKdPncQrjTgA==",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/read-cache": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
      "dev": true,
      "dependencies": {
        "pify": "^2.3.0"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.8",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.8.tgz",
      "integrity": "sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==",
      "dev": true,
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
      "dev": true,
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rollup": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.24.0.tgz",
      "integrity": "sha512-DOmrlGSXNk1DM0ljiQA+i+o0rSLhtii1je5wgk60j49d1jHT5YYttBv1iWOnYSTG+fZZESUOSNiAl89SIet+Cg==",
      "dev": true,
      "dependencies": {
        "@types/estree": "1.0.6"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.24.0",
        "@rollup/rollup-android-arm64": "4.24.0",
        "@rollup/rollup-darwin-arm64": "4.24.0",
        "@rollup/rollup-darwin-x64": "4.24.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.24.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.24.0",
        "@rollup/rollup-linux-arm64-gnu": "4.24.0",
        "@rollup/rollup-linux-arm64-musl": "4.24.0",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.24.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.24.0",
        "@rollup/rollup-linux-s390x-gnu": "4.24.0",
        "@rollup/rollup-linux-x64-gnu": "4.24.0",
        "@rollup/rollup-linux-x64-musl": "4.24.0",
        "@rollup/rollup-win32-arm64-msvc": "4.24.0",
        "@rollup/rollup-win32-ia32-msvc": "4.24.0",
        "@rollup/rollup-win32-x64-msvc": "4.24.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "dev": true,
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "dev": true,
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true
    },
    "node_modules/string-width-cjs/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/sucrase": {
      "version": "3.35.0",
      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
      "dev": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.2",
        "commander": "^4.0.0",
        "glob": "^10.3.10",
        "lines-and-columns": "^1.1.6",
        "mz": "^2.7.0",
        "pirates": "^4.0.1",
        "ts-interface-checker": "^0.1.9"
      },
      "bin": {
        "sucrase": "bin/sucrase",
        "sucrase-node": "bin/sucrase-node"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tailwindcss": {
      "version": "3.4.13",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.13.tgz",
      "integrity": "sha512-KqjHOJKogOUt5Bs752ykCeiwvi0fKVkr5oqsFNt/8px/tA8scFPIlkygsf6jXrfCqGHz7VflA6+yytWuM+XhFw==",
      "dev": true,
      "dependencies": {
        "@alloc/quick-lru": "^5.2.0",
        "arg": "^5.0.2",
        "chokidar": "^3.5.3",
        "didyoumean": "^1.2.2",
        "dlv": "^1.1.3",
        "fast-glob": "^3.3.0",
        "glob-parent": "^6.0.2",
        "is-glob": "^4.0.3",
        "jiti": "^1.21.0",
        "lilconfig": "^2.1.0",
        "micromatch": "^4.0.5",
        "normalize-path": "^3.0.0",
        "object-hash": "^3.0.0",
        "picocolors": "^1.0.0",
        "postcss": "^8.4.23",
        "postcss-import": "^15.1.0",
        "postcss-js": "^4.0.1",
        "postcss-load-config": "^4.0.1",
        "postcss-nested": "^6.0.1",
        "postcss-selector-parser": "^6.0.11",
        "resolve": "^1.22.2",
        "sucrase": "^3.32.0"
      },
      "bin": {
        "tailwind": "lib/cli.js",
        "tailwindcss": "lib/cli.js"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "dev": true
    },
    "node_modules/thenify": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
      "dev": true,
      "dependencies": {
        "any-promise": "^1.0.0"
      }
    },
    "node_modules/thenify-all": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
      "dev": true,
      "dependencies": {
        "thenify": ">= 3.1.0 < 4"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/ts-api-utils": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.3.0.tgz",
      "integrity": "sha512-UQMIo7pb8WRomKR1/+MFVLTroIvDVtMX3K6OUir8ynLyzB8Jeriont2bTAtmNPa1ekAgN7YPDyf6V+ygrdU+eQ==",
      "dev": true,
      "engines": {
        "node": ">=16"
      },
      "peerDependencies": {
        "typescript": ">=4.2.0"
      }
    },
    "node_modules/ts-interface-checker": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
      "dev": true
    },
    "node_modules/ts-node": {
      "version": "10.9.2",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
      "integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-cwd": "dist/bin-cwd.js",
        "ts-node-esm": "dist/bin-esm.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "peerDependencies": {
        "@swc/core": ">=1.2.50",
        "@swc/wasm": ">=1.2.50",
        "@types/node": "*",
        "typescript": ">=2.7"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "@swc/wasm": {
          "optional": true
        }
      }
    },
    "node_modules/ts-node/node_modules/arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w=="
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.8.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/typescript-eslint": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-8.8.1.tgz",
      "integrity": "sha512-R0dsXFt6t4SAFjUSKFjMh4pXDtq04SsFKCVGDP3ZOzNP7itF0jBcZYU4fMsZr4y7O7V7Nc751dDeESbe4PbQMQ==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/eslint-plugin": "8.8.1",
        "@typescript-eslint/parser": "8.8.1",
        "@typescript-eslint/utils": "8.8.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/undici-types": {
      "version": "5.26.5",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA=="
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.1.tgz",
      "integrity": "sha512-R8UzCaa9Az+38REPiJ1tXlImTJXlVfgHZsglwBD/k6nj76ctsH1E3q4doGrukiLQd3sGQYu56r5+lo5r94l29A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.0"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "dev": true
    },
    "node_modules/v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/vite": {
      "version": "5.4.14",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.14.tgz",
      "integrity": "sha512-EK5cY7Q1D8JNhSaPKVK4pwBFvaTmZxEnoKXLG/U9gmdDcihQGNzFlgIvaxezFR4glP1LsuiedwMBqCXH3wZccA==",
      "dev": true,
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.43",
        "rollup": "^4.20.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/web-streams-polyfill": {
      "version": "4.0.0-beta.3",
      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-4.0.0-beta.3.tgz",
      "integrity": "sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug==",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true
    },
    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true
    },
    "node_modules/wrap-ansi-cjs/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/ws": {
      "version": "8.18.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.1.tgz",
      "integrity": "sha512-RKW2aJZMXeMxVpnZ6bck+RswznaxmzdULiBr6KY7XkTnW8uvt0iT9H5DkHUChXrc+uurzwa0rVI16n/Xzjdz1w==",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true
    },
    "node_modules/yaml": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.5.1.tgz",
      "integrity": "sha512-bLQOjaX/ADgQ20isPJRvF0iRUHIxVhYvr53Of7wGcWlO2jvtUlH5m87DsmulFVxRpNLOnI4tB6p/oh8D7kpn9Q==",
      "dev": true,
      "bin": {
        "yaml": "bin.mjs"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}

